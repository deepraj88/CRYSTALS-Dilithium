#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
#pragma line 1 "<built-in>"
#pragma line 1 "<command-line>"
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/params.h" 1
#pragma line 2 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c" 2
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/poly.h" 1
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/opt/Xilinx2018/Vivado/2018.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/include/stdint.h" 1 3 4
#pragma line 9 "/opt/Xilinx2018/Vivado/2018.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/include/stdint.h" 3 4
#pragma line 1 "/usr/include/stdint.h" 1 3 4
#pragma line 26 "/usr/include/stdint.h" 3 4
#pragma line 1 "/usr/include/features.h" 1 3 4
#pragma line 361 "/usr/include/features.h" 3 4
#pragma line 1 "/usr/include/sys/cdefs.h" 1 3 4
#pragma line 373 "/usr/include/sys/cdefs.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 374 "/usr/include/sys/cdefs.h" 2 3 4
#pragma line 362 "/usr/include/features.h" 2 3 4
#pragma line 385 "/usr/include/features.h" 3 4
#pragma line 1 "/usr/include/gnu/stubs.h" 1 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 5 "/usr/include/gnu/stubs.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/gnu/stubs-64.h" 1 3 4
#pragma line 10 "/usr/include/gnu/stubs.h" 2 3 4
#pragma line 386 "/usr/include/features.h" 2 3 4
#pragma line 27 "/usr/include/stdint.h" 2 3 4
#pragma line 1 "/usr/include/bits/wchar.h" 1 3 4
#pragma line 28 "/usr/include/stdint.h" 2 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/stdint.h" 2 3 4
#pragma line 37 "/usr/include/stdint.h" 3 4
#pragma empty_line
#pragma line 37 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
#pragma empty_line
typedef long int int64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
#pragma empty_line
typedef unsigned int uint32_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned long int uint64_t;
#pragma line 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
#pragma empty_line
typedef long int int_least64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
#pragma empty_line
typedef unsigned long int uint_least64_t;
#pragma line 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;
#pragma empty_line
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
#pragma line 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;
#pragma empty_line
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
#pragma line 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int uintptr_t;
#pragma line 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
#pragma line 10 "/opt/Xilinx2018/Vivado/2018.2/tps/lnx64/gcc-6.2.0/lib/gcc/x86_64-pc-linux-gnu/6.2.0/include/stdint.h" 2 3 4
#pragma line 5 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/poly.h" 2
#pragma empty_line
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/fips202.h" 1
#pragma line 9 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/fips202.h"
#pragma empty_line
#pragma line 9 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/fips202.h"
void shake128_absorb(uint64_t *s,
                     const unsigned char *input,
                     unsigned long long inlen);
#pragma empty_line
void shake128_squeezeblocks(unsigned char *output,
                            unsigned long nblocks,
                            uint64_t *s);
#pragma empty_line
void shake256_absorb(uint64_t *s,
                     const unsigned char *input,
                     unsigned long long inlen);
#pragma empty_line
void shake256_squeezeblocks(unsigned char *output,
                            unsigned long nblocks,
                            uint64_t *s);
#pragma empty_line
void shake128(unsigned char *output,
              unsigned long long outlen,
              const unsigned char *input,
              unsigned long long inlen);
#pragma empty_line
void shake256(unsigned char *output,
              unsigned long long outlen,
              const unsigned char *input,
              unsigned long long inlen);
#pragma line 7 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/poly.h" 2
#pragma empty_line
typedef struct {
  uint32_t coeffs[256U];
} poly __attribute__((aligned(32)));
#pragma empty_line
void poly_copy(poly *b, const poly *a);
void poly_freeze(poly *a);
#pragma empty_line
void poly_add(poly *c, const poly *a, const poly *b);
void poly_sub(poly *c, const poly *a, const poly *b);
void poly_neg(poly *a);
void poly_shiftl(poly *a, unsigned int k);
#pragma empty_line
void poly_ntt(poly *a);
void poly_invntt_montgomery(poly *a);
void poly_pointwise_invmontgomery(poly *c, const poly *a, const poly *b);
#pragma empty_line
int poly_chknorm(const poly *a, uint32_t B);
void poly_uniform(poly *a, unsigned char *buf);
void poly_uniform_eta(poly *a,
                      const unsigned char seed[32U],
                      unsigned char nonce);
void poly_uniform_gamma1m1(poly *a,
                           const unsigned char seed[32U + 48U],
                           uint16_t nonce);
#pragma empty_line
void polyeta_pack(unsigned char *r, const poly *a);
void polyeta_unpack(poly *r, const unsigned char *a);
#pragma empty_line
void polyt1_pack(unsigned char *r, const poly *a);
void polyt1_unpack(poly *r, const unsigned char *a);
#pragma empty_line
void polyt0_pack(unsigned char *r, const poly *a);
void polyt0_unpack(poly *r, const unsigned char *a);
#pragma empty_line
void polyz_pack(unsigned char *r, const poly *a);
void polyz_unpack(poly *r, const unsigned char *a);
#pragma empty_line
void polyw1_pack(unsigned char *r, const poly *a);
#pragma line 3 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c" 2
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/polyvec.h" 1
#pragma line 9 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/polyvec.h"
typedef struct {
  poly vec[4U];
} polyvecl;
#pragma empty_line
void polyvecl_freeze(polyvecl *v);
#pragma empty_line
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v);
#pragma empty_line
void polyvecl_ntt(polyvecl *v);
void polyvecl_pointwise_acc_invmontgomery(poly *w,
                                          const polyvecl *u,
                                          const polyvecl *v);
#pragma empty_line
int polyvecl_chknorm(const polyvecl *v, uint32_t B);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct {
  poly vec[5U];
} polyveck;
#pragma empty_line
void polyveck_freeze(polyveck *v);
#pragma empty_line
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v);
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v);
void polyveck_neg(polyveck *v);
void polyveck_shiftl(polyveck *v, unsigned int k);
#pragma empty_line
void polyveck_ntt(polyveck *v);
void polyveck_invntt_montgomery(polyveck *v);
#pragma empty_line
int polyveck_chknorm(const polyveck *v, uint32_t B);
#pragma empty_line
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v);
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v);
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *u,
                                const polyveck *v);
void polyveck_use_hint(polyveck *w, const polyveck *v, const polyveck *h);
#pragma line 4 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c" 2
#pragma line 1 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.h" 1
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
void pack_pk(unsigned char pk[(32U + 5U*((256U*(23U - 14U))/8))],
             const unsigned char rho[32U], const polyveck *t1);
void pack_sk(unsigned char pk[(32U + 5U*((256U*(23U - 14U))/8))],
             const unsigned char rho[32U],
             const unsigned char key[32U],
             const unsigned char tr[48U],
             const polyvecl *s1,
             const polyveck *s2,
             const polyveck *t0);
void pack_sig(unsigned char sig[(4U*((256U*(23U - 3))/8) + (96U + 5U) + (256U/8 + 8))],
              const polyvecl *z, const polyveck *h, const poly *c);
#pragma empty_line
void unpack_pk(unsigned char rho[32U], polyveck *t1,
               const unsigned char sk[(2*32U + (4U + 5U)*((256U*4U)/8) + 48U + 5U*((256U*14U)/8))]);
void unpack_sk(unsigned char rho[32U],
               unsigned char key[32U],
               unsigned char tr[48U],
               polyvecl *s1,
               polyveck *s2,
               polyveck *t0,
               const unsigned char sk[(2*32U + (4U + 5U)*((256U*4U)/8) + 48U + 5U*((256U*14U)/8))]);
void unpack_sig(polyvecl *z, polyveck *h, poly *c,
                const unsigned char sig[(4U*((256U*(23U - 3))/8) + (96U + 5U) + (256U/8 + 8))]);
#pragma line 5 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c" 2
#pragma line 15 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void pack_pk(unsigned char pk[(32U + 5U*((256U*(23U - 14U))/8))],
             const unsigned char rho[32U],
             const polyveck *t1)
{
  unsigned int i;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    pk[i] = rho[i];
  pk += 32U;
#pragma empty_line
  for(i = 0; i < 5U; ++i)
    polyt1_pack(pk + i*((256U*(23U - 14U))/8), t1->vec+i);
}
#pragma line 38 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void unpack_pk(unsigned char rho[32U],
               polyveck *t1,
               const unsigned char pk[(32U + 5U*((256U*(23U - 14U))/8))])
{
  unsigned int i;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    rho[i] = pk[i];
  pk += 32U;
#pragma empty_line
  for(i = 0; i < 5U; ++i)
    polyt1_unpack(t1->vec+i, pk + i*((256U*(23U - 14U))/8));
}
#pragma line 65 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void pack_sk(unsigned char sk[(2*32U + (4U + 5U)*((256U*4U)/8) + 48U + 5U*((256U*14U)/8))],
             const unsigned char rho[32U],
             const unsigned char key[32U],
             const unsigned char tr[48U],
             const polyvecl *s1,
             const polyveck *s2,
             const polyveck *t0)
{
  unsigned int i;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    sk[i] = rho[i];
  sk += 32U;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    sk[i] = key[i];
  sk += 32U;
#pragma empty_line
  for(i = 0; i < 48U; ++i)
    sk[i] = tr[i];
  sk += 48U;
#pragma empty_line
  for(i = 0; i < 4U; ++i)
    polyeta_pack(sk + i*((256U*4U)/8), s1->vec+i);
  sk += 4U*((256U*4U)/8);
#pragma empty_line
  for(i = 0; i < 5U; ++i)
    polyeta_pack(sk + i*((256U*4U)/8), s2->vec+i);
  sk += 5U*((256U*4U)/8);
#pragma empty_line
  for(i = 0; i < 5U; ++i)
    polyt0_pack(sk + i*((256U*14U)/8), t0->vec+i);
}
#pragma line 112 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void unpack_sk(unsigned char rho[32U],
               unsigned char key[32U],
               unsigned char tr[48U],
               polyvecl *s1,
               polyveck *s2,
               polyveck *t0,
               const unsigned char sk[(2*32U + (4U + 5U)*((256U*4U)/8) + 48U + 5U*((256U*14U)/8))])
{
  unsigned int i;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    rho[i] = sk[i];
  sk += 32U;
#pragma empty_line
  for(i = 0; i < 32U; ++i)
    key[i] = sk[i];
  sk += 32U;
#pragma empty_line
  for(i = 0; i < 48U; ++i)
    tr[i] = sk[i];
  sk += 48U;
#pragma empty_line
  for(i=0; i < 4U; ++i)
    polyeta_unpack(s1->vec+i, sk + i*((256U*4U)/8));
  sk += 4U*((256U*4U)/8);
#pragma empty_line
  for(i=0; i < 5U; ++i)
    polyeta_unpack(s2->vec+i, sk + i*((256U*4U)/8));
  sk += 5U*((256U*4U)/8);
#pragma empty_line
  for(i=0; i < 5U; ++i)
    polyt0_unpack(t0->vec+i, sk + i*((256U*14U)/8));
}
#pragma line 156 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void pack_sig(unsigned char sig[(4U*((256U*(23U - 3))/8) + (96U + 5U) + (256U/8 + 8))],
              const polyvecl *z,
              const polyveck *h,
              const poly *c)
{
  unsigned int i, j, k;
  uint64_t signs, mask;
#pragma empty_line
  for(i = 0; i < 4U; ++i)
    polyz_pack(sig + i*((256U*(23U - 3))/8), z->vec+i);
  sig += 4U*((256U*(23U - 3))/8);
#pragma empty_line
#pragma empty_line
  k = 0;
  for(i = 0; i < 5U; ++i) {
    for(j = 0; j < 256U; ++j)
      if(h->vec[i].coeffs[j] == 1)
        sig[k++] = j;
#pragma empty_line
    sig[96U + i] = k;
  }
  while(k < 96U) sig[k++] = 0;
  sig += 96U + 5U;
#pragma empty_line
#pragma empty_line
  signs = 0;
  mask = 1;
  for(i = 0; i < 256U/8; ++i) {
    sig[i] = 0;
    for(j = 0; j < 8; ++j) {
      if(c->coeffs[8*i+j] != 0) {
        sig[i] |= (1 << j);
        if(c->coeffs[8*i+j] == (8380417U - 1)) signs |= mask;
        mask <<= 1;
      }
    }
  }
  sig += 256U/8;
  for(i = 0; i < 8; ++i)
    sig[i] = signs >> 8*i;
}
#pragma line 208 "/home/dss545/vivado_hls/CRYSTALS-Dilithium/Reference_Implementation/Dilithium_recommended/packing.c"
void unpack_sig(polyvecl *z,
                polyveck *h,
                poly *c,
                const unsigned char sig[(4U*((256U*(23U - 3))/8) + (96U + 5U) + (256U/8 + 8))])
{
  unsigned int i, j, k;
  uint64_t signs, mask;
#pragma empty_line
  for(i = 0; i < 4U; ++i)
    polyz_unpack(z->vec+i, sig + i*((256U*(23U - 3))/8));
  sig += 4U*((256U*(23U - 3))/8);
#pragma empty_line
#pragma empty_line
  k = 0;
  for(i = 0; i < 5U; ++i) {
    for(j = 0; j < 256U; ++j)
      h->vec[i].coeffs[j] = 0;
#pragma empty_line
    for(j = k; j < sig[96U + i]; ++j)
      h->vec[i].coeffs[sig[j]] = 1;
#pragma empty_line
    k = sig[96U + i];
  }
  sig += 96U + 5U;
#pragma empty_line
#pragma empty_line
  for(i = 0; i < 256U; ++i)
    c->coeffs[i] = 0;
#pragma empty_line
  signs = 0;
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)sig[256U/8+i] << 8*i;
#pragma empty_line
  mask = 1;
  for(i = 0; i < 256U/8; ++i) {
    for(j = 0; j < 8; ++j) {
      if((sig[i] >> j) & 0x01) {
        c->coeffs[8*i+j] = (signs & mask) ? 8380417U - 1 : 1;
        mask <<= 1;
      }
    }
  }
}
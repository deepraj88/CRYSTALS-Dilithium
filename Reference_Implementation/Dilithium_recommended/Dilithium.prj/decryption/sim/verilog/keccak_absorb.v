// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        m_address0,
        m_ce0,
        m_q0,
        m_offset,
        mlen
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
output  [11:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [12:0] m_offset;
input  [63:0] mlen;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg s_ce1;
reg s_we1;
reg[11:0] m_address0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_25_fu_328_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_122_fu_339_p1;
wire   [0:0] tmp_fu_322_p2;
wire   [12:0] tmp_123_fu_342_p1;
reg   [12:0] tmp_123_reg_653;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp1_fu_352_p2;
reg   [12:0] tmp1_reg_661;
wire   [0:0] tmp_108_fu_346_p2;
wire   [4:0] i_6_fu_363_p2;
reg   [4:0] i_6_reg_669;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_110_fu_369_p3;
reg   [7:0] tmp_110_reg_674;
wire   [0:0] exitcond3_fu_357_p2;
wire   [63:0] p_rec_fu_377_p2;
reg   [63:0] p_rec_reg_679;
wire   [3:0] i_28_fu_389_p2;
reg   [3:0] i_28_reg_687;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_i_fu_383_p2;
reg   [4:0] s_addr_2_reg_697;
wire   [63:0] r_fu_449_p2;
wire    ap_CS_fsm_state6;
wire   [63:0] mlen_assign_fu_462_p2;
wire    ap_CS_fsm_state8;
wire    grp_KeccakF1600_StatePer_fu_314_ap_idle;
wire    grp_KeccakF1600_StatePer_fu_314_ap_ready;
wire    grp_KeccakF1600_StatePer_fu_314_ap_done;
wire   [31:0] indvars_iv_next_fu_468_p2;
wire   [7:0] i_27_fu_480_p2;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_111_fu_491_p1;
reg   [63:0] tmp_111_reg_725;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_113_fu_505_p2;
reg   [7:0] tmp_113_reg_733;
wire   [0:0] tmp_112_fu_499_p2;
wire   [7:0] t_addr_4_reg_743;
wire    ap_CS_fsm_state12;
wire   [4:0] i_29_fu_544_p2;
reg   [4:0] i_29_reg_751;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_118_fu_550_p3;
reg   [7:0] tmp_118_reg_756;
wire   [0:0] exitcond4_fu_538_p2;
wire   [3:0] i_7_fu_564_p2;
reg   [3:0] i_7_reg_764;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_i3_fu_558_p2;
reg   [4:0] s_addr_3_reg_774;
wire   [63:0] r_1_fu_615_p2;
wire    ap_CS_fsm_state16;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
wire    grp_KeccakF1600_StatePer_fu_314_ap_start;
wire   [4:0] grp_KeccakF1600_StatePer_fu_314_state_address0;
wire    grp_KeccakF1600_StatePer_fu_314_state_ce0;
wire    grp_KeccakF1600_StatePer_fu_314_state_we0;
wire   [63:0] grp_KeccakF1600_StatePer_fu_314_state_d0;
wire   [4:0] grp_KeccakF1600_StatePer_fu_314_state_address1;
wire    grp_KeccakF1600_StatePer_fu_314_state_ce1;
wire    grp_KeccakF1600_StatePer_fu_314_state_we1;
wire   [63:0] grp_KeccakF1600_StatePer_fu_314_state_d1;
reg   [4:0] i_reg_177;
reg   [31:0] i_26_reg_188;
reg   [63:0] p_01_rec_reg_198;
reg   [63:0] p_0_reg_210;
reg   [4:0] i_1_reg_220;
wire    ap_CS_fsm_state7;
reg   [3:0] i_i_reg_232;
reg   [63:0] r_i_reg_244;
reg   [7:0] i_2_reg_256;
wire   [0:0] exitcond_fu_474_p2;
reg   [7:0] i_3_reg_267;
wire    ap_CS_fsm_state11;
reg   [4:0] i_4_reg_278;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
reg   [3:0] i_i1_reg_290;
reg   [63:0] r_i2_reg_302;
reg    grp_KeccakF1600_StatePer_fu_314_ap_start_reg;
wire   [63:0] tmp_s_fu_334_p1;
wire   [63:0] sum_i_cast_fu_413_p1;
wire   [63:0] tmp_116_fu_418_p1;
wire   [63:0] tmp_109_fu_486_p1;
wire   [63:0] sum2_cast_fu_521_p1;
wire   [63:0] tmp_114_fu_526_p1;
wire   [63:0] sum_i5_cast_fu_579_p1;
wire   [63:0] tmp_119_fu_584_p1;
wire   [63:0] tmp_117_fu_455_p2;
wire   [63:0] tmp_120_fu_621_p2;
wire   [7:0] tmp_115_fu_531_p2;
wire   [7:0] tmp_i_cast_fu_395_p1;
wire   [7:0] tmp2_fu_399_p2;
wire   [12:0] tmp2_cast_fu_404_p1;
wire   [12:0] sum_i_fu_408_p2;
wire   [2:0] tmp_124_fu_427_p1;
wire   [5:0] tmp_190_i_fu_431_p3;
wire   [63:0] tmp_189_i_fu_423_p1;
wire   [63:0] tmp_191_i_fu_439_p1;
wire   [63:0] tmp_192_i_fu_443_p2;
wire   [12:0] tmp_171_cast_fu_495_p1;
wire   [12:0] tmp3_fu_511_p2;
wire   [12:0] sum2_fu_516_p2;
wire   [7:0] tmp_i4_cast_fu_570_p1;
wire   [7:0] sum_i5_fu_574_p2;
wire   [2:0] tmp_125_fu_593_p1;
wire   [5:0] tmp_190_i9_fu_597_p3;
wire   [63:0] tmp_189_i8_fu_589_p1;
wire   [63:0] tmp_191_i1_fu_605_p1;
wire   [63:0] tmp_192_i1_fu_609_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_KeccakF1600_StatePer_fu_314_ap_start_reg = 1'b0;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

KeccakF1600_StatePer grp_KeccakF1600_StatePer_fu_314(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePer_fu_314_ap_start),
    .ap_done(grp_KeccakF1600_StatePer_fu_314_ap_done),
    .ap_idle(grp_KeccakF1600_StatePer_fu_314_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePer_fu_314_ap_ready),
    .state_address0(grp_KeccakF1600_StatePer_fu_314_state_address0),
    .state_ce0(grp_KeccakF1600_StatePer_fu_314_state_ce0),
    .state_we0(grp_KeccakF1600_StatePer_fu_314_state_we0),
    .state_d0(grp_KeccakF1600_StatePer_fu_314_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePer_fu_314_state_address1),
    .state_ce1(grp_KeccakF1600_StatePer_fu_314_state_ce1),
    .state_we1(grp_KeccakF1600_StatePer_fu_314_state_we1),
    .state_d1(grp_KeccakF1600_StatePer_fu_314_state_d1),
    .state_q1(s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePer_fu_314_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_KeccakF1600_StatePer_fu_314_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePer_fu_314_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePer_fu_314_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_108_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_220 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_220 <= i_6_reg_669;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_26_reg_188 <= tmp_122_fu_339_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_314_ap_done == 1'b1))) begin
        i_26_reg_188 <= indvars_iv_next_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_108_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_256 <= 8'd0;
    end else if (((exitcond_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_256 <= i_27_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_3_reg_267 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_267 <= tmp_113_reg_733;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_4_reg_278 <= i_29_reg_751;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_4_reg_278 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_i1_reg_290 <= i_7_reg_764;
    end else if (((exitcond4_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_i1_reg_290 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_i_reg_232 <= i_28_reg_687;
    end else if (((exitcond3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_i_reg_232 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_177 <= i_25_fu_328_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_177 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01_rec_reg_198 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_314_ap_done == 1'b1))) begin
        p_01_rec_reg_198 <= p_rec_reg_679;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_210 <= mlen;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_314_ap_done == 1'b1))) begin
        p_0_reg_210 <= mlen_assign_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_i2_reg_302 <= r_1_fu_615_p2;
    end else if (((exitcond4_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        r_i2_reg_302 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_i_reg_244 <= r_fu_449_p2;
    end else if (((exitcond3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_i_reg_244 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_28_reg_687 <= i_28_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_29_reg_751 <= i_29_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_6_reg_669 <= i_6_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_7_reg_764 <= i_7_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_357_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_rec_reg_679 <= p_rec_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_addr_2_reg_697 <= tmp_116_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i3_fu_558_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        s_addr_3_reg_774 <= tmp_119_fu_584_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_108_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_reg_661 <= tmp1_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_110_reg_674[7 : 3] <= tmp_110_fu_369_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_111_reg_725[7 : 0] <= tmp_111_fu_491_p1[7 : 0];
        tmp_113_reg_733 <= tmp_113_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_118_reg_756[7 : 3] <= tmp_118_fu_550_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_123_reg_653 <= tmp_123_fu_342_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond4_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        m_address0 = sum2_cast_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = sum_i_cast_fu_413_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_address0 = s_addr_3_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_address0 = tmp_119_fu_584_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = s_addr_2_reg_697;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = tmp_116_fu_418_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = tmp_s_fu_334_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = grp_KeccakF1600_StatePer_fu_314_state_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce0 = grp_KeccakF1600_StatePer_fu_314_state_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce1 = grp_KeccakF1600_StatePer_fu_314_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_d0 = tmp_120_fu_621_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_d0 = tmp_117_fu_455_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_d0 = grp_KeccakF1600_StatePer_fu_314_state_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7) | ((tmp_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we0 = grp_KeccakF1600_StatePer_fu_314_state_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we1 = grp_KeccakF1600_StatePer_fu_314_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        t_address0 = sum_i5_cast_fu_579_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address0 = t_addr_4_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        t_address0 = 64'd135;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_address0 = tmp_111_reg_725;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = tmp_114_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address0 = tmp_109_fu_486_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t_d0 = tmp_115_fu_531_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_d0 = 8'd31;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | ((tmp_112_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((exitcond_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_108_fu_346_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_i_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_314_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_112_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond4_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((tmp_i3_fu_558_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond3_fu_357_p2 = ((i_1_reg_220 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond4_fu_538_p2 = ((i_4_reg_278 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond_fu_474_p2 = ((i_2_reg_256 == 8'd136) ? 1'b1 : 1'b0);

assign grp_KeccakF1600_StatePer_fu_314_ap_start = grp_KeccakF1600_StatePer_fu_314_ap_start_reg;

assign i_25_fu_328_p2 = (i_reg_177 + 5'd1);

assign i_27_fu_480_p2 = (i_2_reg_256 + 8'd1);

assign i_28_fu_389_p2 = (i_i_reg_232 + 4'd1);

assign i_29_fu_544_p2 = (i_4_reg_278 + 5'd1);

assign i_6_fu_363_p2 = (i_1_reg_220 + 5'd1);

assign i_7_fu_564_p2 = (i_i1_reg_290 + 4'd1);

assign indvars_iv_next_fu_468_p2 = ($signed(i_26_reg_188) + $signed(32'd4294967160));

assign mlen_assign_fu_462_p2 = ($signed(p_0_reg_210) + $signed(64'd18446744073709551480));

assign p_rec_fu_377_p2 = (p_01_rec_reg_198 + 64'd136);

assign r_1_fu_615_p2 = (tmp_192_i1_fu_609_p2 | r_i2_reg_302);

assign r_fu_449_p2 = (tmp_192_i_fu_443_p2 | r_i_reg_244);

assign s_address1 = grp_KeccakF1600_StatePer_fu_314_state_address1;

assign s_d1 = grp_KeccakF1600_StatePer_fu_314_state_d1;

assign sum2_cast_fu_521_p1 = sum2_fu_516_p2;

assign sum2_fu_516_p2 = (tmp3_fu_511_p2 + m_offset);

assign sum_i5_cast_fu_579_p1 = sum_i5_fu_574_p2;

assign sum_i5_fu_574_p2 = (tmp_118_reg_756 + tmp_i4_cast_fu_570_p1);

assign sum_i_cast_fu_413_p1 = sum_i_fu_408_p2;

assign sum_i_fu_408_p2 = (tmp1_reg_661 + tmp2_cast_fu_404_p1);

assign t_addr_4_reg_743 = 64'd135;

assign tmp1_fu_352_p2 = (tmp_123_fu_342_p1 + m_offset);

assign tmp2_cast_fu_404_p1 = tmp2_fu_399_p2;

assign tmp2_fu_399_p2 = (tmp_i_cast_fu_395_p1 + tmp_110_reg_674);

assign tmp3_fu_511_p2 = (tmp_123_reg_653 + tmp_171_cast_fu_495_p1);

assign tmp_108_fu_346_p2 = ((p_0_reg_210 < 64'd136) ? 1'b1 : 1'b0);

assign tmp_109_fu_486_p1 = i_2_reg_256;

assign tmp_110_fu_369_p3 = {{i_1_reg_220}, {3'd0}};

assign tmp_111_fu_491_p1 = i_3_reg_267;

assign tmp_112_fu_499_p2 = ((tmp_111_fu_491_p1 < p_0_reg_210) ? 1'b1 : 1'b0);

assign tmp_113_fu_505_p2 = (i_3_reg_267 + 8'd1);

assign tmp_114_fu_526_p1 = i_26_reg_188;

assign tmp_115_fu_531_p2 = (t_q0 | 8'd128);

assign tmp_116_fu_418_p1 = i_1_reg_220;

assign tmp_117_fu_455_p2 = (s_q0 ^ r_i_reg_244);

assign tmp_118_fu_550_p3 = {{i_4_reg_278}, {3'd0}};

assign tmp_119_fu_584_p1 = i_4_reg_278;

assign tmp_120_fu_621_p2 = (s_q0 ^ r_i2_reg_302);

assign tmp_122_fu_339_p1 = mlen[31:0];

assign tmp_123_fu_342_p1 = p_01_rec_reg_198[12:0];

assign tmp_124_fu_427_p1 = i_i_reg_232[2:0];

assign tmp_125_fu_593_p1 = i_i1_reg_290[2:0];

assign tmp_171_cast_fu_495_p1 = i_3_reg_267;

assign tmp_189_i8_fu_589_p1 = t_q0;

assign tmp_189_i_fu_423_p1 = m_q0;

assign tmp_190_i9_fu_597_p3 = {{tmp_125_fu_593_p1}, {3'd0}};

assign tmp_190_i_fu_431_p3 = {{tmp_124_fu_427_p1}, {3'd0}};

assign tmp_191_i1_fu_605_p1 = tmp_190_i9_fu_597_p3;

assign tmp_191_i_fu_439_p1 = tmp_190_i_fu_431_p3;

assign tmp_192_i1_fu_609_p2 = tmp_189_i8_fu_589_p1 << tmp_191_i1_fu_605_p1;

assign tmp_192_i_fu_443_p2 = tmp_189_i_fu_423_p1 << tmp_191_i_fu_439_p1;

assign tmp_fu_322_p2 = ((i_reg_177 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_i3_fu_558_p2 = ((i_i1_reg_290 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_i4_cast_fu_570_p1 = i_i1_reg_290;

assign tmp_i_cast_fu_395_p1 = i_i_reg_232;

assign tmp_i_fu_383_p2 = ((i_i_reg_232 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_334_p1 = i_reg_177;

always @ (posedge ap_clk) begin
    tmp_110_reg_674[2:0] <= 3'b000;
    tmp_111_reg_725[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_118_reg_756[2:0] <= 3'b000;
end

endmodule //keccak_absorb

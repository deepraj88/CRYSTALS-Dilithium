-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyvecl_pointwise_a is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    w_coeffs_ce0 : OUT STD_LOGIC;
    w_coeffs_we0 : OUT STD_LOGIC;
    w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    u_vec_coeffs_ce0 : OUT STD_LOGIC;
    u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of polyvecl_pointwise_a is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_FC7FDFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111100011111111101111111111111";
    constant ap_const_lv55_7FE001 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000011111111110000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_230 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_cast_fu_246_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_cast_reg_633 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_47_cast_fu_258_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_cast_reg_640 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_11_reg_648 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_fu_301_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_reg_663 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_315_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_reg_673 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal t_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_328_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_1_reg_683 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_53_cast_fu_380_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_cast_reg_691 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_cast_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_cast_reg_696 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_2_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_704 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_i2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_3_fu_448_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_3_reg_719 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_53_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal t_6_fu_466_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_6_reg_734 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_13_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_13_reg_742 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal w_coeffs_addr_2_reg_747 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_30_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_535_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_fu_554_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_12_reg_765 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal w_coeffs_addr_reg_770 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_4_fu_618_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal t_4_reg_775 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_coeffs_ce0 : STD_LOGIC;
    signal t_coeffs_we0 : STD_LOGIC;
    signal t_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_172 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i1_reg_196 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_i2_reg_208 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_1_reg_219 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_45_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_27_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_32_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_161_i_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_5_cast_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_238_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_44_fu_279_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal a_assign_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_301_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_i_cast_fu_311_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_cast_cast_fu_341_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal a_assign_cast_fu_338_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_2_fu_344_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_46_fu_350_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_cast_fu_371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_388_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_cast_fu_416_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_fu_420_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i3_cast1_fu_412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_430_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_3_fu_448_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_3_fu_448_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal t_6_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_8_cast_cast_fu_480_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal a_assign_3_cast9_fu_477_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_7_fu_483_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_54_fu_489_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i2_cast_fu_521_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_525_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_cast_fu_560_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_49_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_3_fu_574_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_50_fu_582_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_i1_fu_596_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal t_4_cast_fu_578_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_2_cast_fu_592_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_i_fu_608_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_i_cast_fu_614_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_i1_cast_fu_604_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal a_assign_3_fu_448_p00 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_3_fu_448_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_fu_301_p00 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_fu_301_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_1_fu_328_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_6_fu_466_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component polyvecl_pointwisdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    t_coeffs_U : component polyvecl_pointwisdEe
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_coeffs_address0,
        ce0 => t_coeffs_ce0,
        we0 => t_coeffs_we0,
        d0 => t_coeffs_d0,
        q0 => t_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_365_p2 = ap_const_lv1_1))) then 
                i_1_reg_219 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_1_reg_219 <= i_12_reg_765;
            end if; 
        end if;
    end process;

    i_i1_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i1_reg_196 <= i_2_reg_704;
            elsif (((exitcond_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_i1_reg_196 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i2_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_i2_fu_400_p2 = ap_const_lv1_1))) then 
                i_i2_reg_208 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i2_reg_208 <= i_13_reg_742;
            end if; 
        end if;
    end process;

    i_i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i_reg_172 <= i_11_reg_648;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_reg_172 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_184 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_i3_30_fu_504_p2 = ap_const_lv1_1))) then 
                i_reg_184 <= i_3_fu_535_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                a_assign_3_reg_719 <= a_assign_3_fu_448_p2;
                tmp_53_reg_724 <= tmp_53_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                a_assign_reg_663 <= a_assign_fu_301_p2;
                tmp_reg_668 <= tmp_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_11_reg_648 <= i_11_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_12_reg_765 <= i_12_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_13_reg_742 <= i_13_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_704 <= i_2_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_230 <= u_vec_coeffs_q0;
                reg_234 <= v_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                t_1_reg_683 <= t_1_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                t_4_reg_775 <= t_4_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                t_5_reg_729 <= t_5_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                t_6_reg_734 <= t_6_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                t_reg_678 <= t_fu_320_p2;
                tmp_43_reg_673 <= tmp_43_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_45_cast_reg_633(10 downto 8) <= tmp_45_cast_fu_246_p1(10 downto 8);
                    tmp_47_cast_reg_640(4 downto 2) <= tmp_47_cast_fu_258_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_53_cast_reg_691(13 downto 8) <= tmp_53_cast_fu_380_p3(13 downto 8);
                    tmp_55_cast_reg_696(10 downto 8) <= tmp_55_cast_fu_396_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i3_30_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                w_coeffs_addr_2_reg_747 <= tmp_61_cast_fu_530_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_548_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                w_coeffs_addr_reg_770 <= tmp_56_cast_fu_569_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    tmp_45_cast_reg_633(7 downto 0) <= "00000000";
    tmp_45_cast_reg_633(11) <= '0';
    tmp_47_cast_reg_640(1 downto 0) <= "00";
    tmp_47_cast_reg_640(5) <= '0';
    tmp_53_cast_reg_691(7 downto 0) <= "00000000";
    tmp_55_cast_reg_696(7 downto 0) <= "00000000";
    tmp_55_cast_reg_696(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_i_fu_262_p2, ap_CS_fsm_state8, exitcond_fu_365_p2, ap_CS_fsm_state9, tmp_i2_fu_400_p2, ap_CS_fsm_state15, tmp_i3_30_fu_504_p2, ap_CS_fsm_state17, tmp_s_fu_548_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_365_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_i2_fu_400_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_i3_30_fu_504_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_548_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_2_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_582_p4),24));
    a_assign_3_cast9_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_3_reg_719),56));
    a_assign_3_fu_448_p0 <= a_assign_3_fu_448_p00(32 - 1 downto 0);
    a_assign_3_fu_448_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_234),55));
    a_assign_3_fu_448_p1 <= a_assign_3_fu_448_p10(23 - 1 downto 0);
    a_assign_3_fu_448_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_230),55));
    a_assign_3_fu_448_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_3_fu_448_p0) * unsigned(a_assign_3_fu_448_p1), 55));
    a_assign_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_reg_663),56));
    a_assign_fu_301_p0 <= a_assign_fu_301_p00(32 - 1 downto 0);
    a_assign_fu_301_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_234),55));
    a_assign_fu_301_p1 <= a_assign_fu_301_p10(23 - 1 downto 0);
    a_assign_fu_301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_230),55));
    a_assign_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_301_p0) * unsigned(a_assign_fu_301_p1), 55));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17, tmp_s_fu_548_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_548_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17, tmp_s_fu_548_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_s_fu_548_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_365_p2 <= "1" when (i_reg_184 = ap_const_lv3_4) else "0";
    i_11_fu_268_p2 <= std_logic_vector(unsigned(i_i_reg_172) + unsigned(ap_const_lv9_1));
    i_12_fu_554_p2 <= std_logic_vector(unsigned(i_1_reg_219) + unsigned(ap_const_lv9_1));
    i_13_fu_510_p2 <= std_logic_vector(unsigned(i_i2_reg_208) + unsigned(ap_const_lv9_1));
    i_2_fu_406_p2 <= std_logic_vector(unsigned(i_i1_reg_196) + unsigned(ap_const_lv9_1));
    i_3_fu_535_p2 <= std_logic_vector(unsigned(i_reg_184) + unsigned(ap_const_lv3_1));
    t_1_fu_328_p1 <= t_1_fu_328_p10(32 - 1 downto 0);
    t_1_fu_328_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_678),55));
    t_1_fu_328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_1_fu_328_p1), 55));
    t_2_cast_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_1_reg_683),56));
    t_2_fu_344_p2 <= std_logic_vector(unsigned(t_2_cast_cast_fu_341_p1) + unsigned(a_assign_cast_fu_338_p1));
    t_3_fu_574_p1 <= w_coeffs_q0(23 - 1 downto 0);
    t_4_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_3_fu_574_p1),24));
    t_4_fu_618_p2 <= std_logic_vector(signed(tmp_41_i_cast_fu_614_p1) + signed(tmp_i1_cast_fu_604_p1));
        t_5_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_4_reg_775),32));

    t_5_fu_458_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_53_reg_724))), 32));
    t_6_fu_466_p1 <= t_6_fu_466_p10(32 - 1 downto 0);
    t_6_fu_466_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_5_reg_729),55));
    t_6_fu_466_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_6_fu_466_p1), 55));
    t_7_fu_483_p2 <= std_logic_vector(unsigned(t_8_cast_cast_fu_480_p1) + unsigned(a_assign_3_cast9_fu_477_p1));
    t_8_cast_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_6_reg_734),56));

    t_coeffs_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state14, tmp_i3_fu_472_p1, tmp_i2_32_fu_516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_coeffs_address0 <= tmp_i2_32_fu_516_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_coeffs_address0 <= tmp_i3_fu_472_p1(8 - 1 downto 0);
        else 
            t_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_coeffs_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_coeffs_ce0 <= ap_const_logic_1;
        else 
            t_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    t_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_489_p4),32));

    t_coeffs_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_coeffs_we0 <= ap_const_logic_1;
        else 
            t_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_reg_668))), 32));
    tmp_161_i_fu_541_p2 <= std_logic_vector(unsigned(w_coeffs_q0) + unsigned(t_coeffs_q0));
    tmp_33_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_219),12));
    tmp_41_fu_238_p3 <= (w_coeffs_offset & ap_const_lv8_0);
        tmp_41_i_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_41_i_fu_608_p2),25));

    tmp_41_i_fu_608_p2 <= std_logic_vector(unsigned(t_4_cast_fu_578_p1) - unsigned(a_assign_2_cast_fu_592_p1));
    tmp_42_fu_250_p3 <= (w_coeffs_offset & ap_const_lv2_0);
    tmp_43_fu_315_p2 <= std_logic_vector(unsigned(tmp_i_cast_fu_311_p1) + unsigned(tmp_45_cast_reg_633));
    tmp_44_fu_279_p4 <= ((w_coeffs_offset & ap_const_lv1_0) & i_i_reg_172);
    tmp_45_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_238_p3),12));
    tmp_45_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_279_p4),64));
    tmp_46_fu_350_p4 <= t_2_fu_344_p2(55 downto 32);
    tmp_47_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_250_p3),6));
    tmp_47_fu_375_p2 <= std_logic_vector(unsigned(tmp_cast_fu_371_p1) + unsigned(tmp_47_cast_reg_640));
    tmp_48_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_673),64));
    tmp_48_fu_388_p3 <= (i_reg_184 & ap_const_lv8_0);
    tmp_49_fu_564_p2 <= std_logic_vector(unsigned(tmp_33_cast_fu_560_p1) + unsigned(tmp_45_cast_reg_633));
    tmp_50_fu_582_p4 <= w_coeffs_q0(31 downto 23);
    tmp_51_fu_420_p2 <= std_logic_vector(unsigned(tmp_i3_cast_fu_416_p1) + unsigned(tmp_53_cast_reg_691));
    tmp_52_fu_430_p2 <= std_logic_vector(unsigned(tmp_i3_cast1_fu_412_p1) + unsigned(tmp_55_cast_reg_696));
    tmp_53_cast_fu_380_p3 <= (tmp_47_fu_375_p2 & ap_const_lv8_0);
    tmp_53_fu_454_p1 <= a_assign_3_fu_448_p2(32 - 1 downto 0);
    tmp_54_fu_489_p4 <= t_7_fu_483_p2(55 downto 32);
    tmp_55_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_388_p3),12));
    tmp_55_fu_525_p2 <= std_logic_vector(unsigned(tmp_45_cast_reg_633) + unsigned(tmp_i2_cast_fu_521_p1));
    tmp_56_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_564_p2),64));
    tmp_59_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_420_p2),64));
    tmp_60_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_430_p2),64));
    tmp_61_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_525_p2),64));
    tmp_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_184),6));
    tmp_fu_307_p1 <= a_assign_fu_301_p2(32 - 1 downto 0);
    tmp_i1_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_fu_596_p3),25));
    tmp_i1_fu_596_p3 <= (tmp_50_fu_582_p4 & ap_const_lv13_0);
    tmp_i2_32_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_208),64));
    tmp_i2_cast_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i2_reg_208),12));
    tmp_i2_fu_400_p2 <= "1" when (i_i1_reg_196 = ap_const_lv9_100) else "0";
    tmp_i3_30_fu_504_p2 <= "1" when (i_i2_reg_208 = ap_const_lv9_100) else "0";
    tmp_i3_cast1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_196),12));
    tmp_i3_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_196),14));
    tmp_i3_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_196),64));
    tmp_i_27_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_172),64));
    tmp_i_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_172),12));
    tmp_i_fu_262_p2 <= "1" when (i_i_reg_172 = ap_const_lv9_100) else "0";
    tmp_i_i_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_350_p4),32));
    tmp_s_fu_548_p2 <= "1" when (i_1_reg_219 = ap_const_lv9_100) else "0";

    u_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_45_fu_288_p1, tmp_59_cast_fu_425_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            u_vec_coeffs_address0 <= tmp_59_cast_fu_425_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            u_vec_coeffs_address0 <= tmp_45_fu_288_p1(13 - 1 downto 0);
        else 
            u_vec_coeffs_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    u_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            u_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            u_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, tmp_i_27_fu_274_p1, tmp_60_cast_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            v_vec_coeffs_address0 <= tmp_60_cast_fu_435_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            v_vec_coeffs_address0 <= tmp_i_27_fu_274_p1(10 - 1 downto 0);
        else 
            v_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_coeffs_address0_assign_proc : process(ap_CS_fsm_state15, w_coeffs_addr_2_reg_747, ap_CS_fsm_state17, w_coeffs_addr_reg_770, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state19, tmp_48_cast_fu_334_p1, tmp_61_cast_fu_530_p1, tmp_56_cast_fu_569_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            w_coeffs_address0 <= w_coeffs_addr_reg_770;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            w_coeffs_address0 <= tmp_56_cast_fu_569_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            w_coeffs_address0 <= w_coeffs_addr_2_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            w_coeffs_address0 <= tmp_61_cast_fu_530_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_coeffs_address0 <= tmp_48_cast_fu_334_p1(11 - 1 downto 0);
        else 
            w_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    w_coeffs_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            w_coeffs_ce0 <= ap_const_logic_1;
        else 
            w_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_coeffs_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state19, tmp_i_i_fu_360_p1, tmp_161_i_fu_541_p2, t_5_cast_fu_624_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            w_coeffs_d0 <= t_5_cast_fu_624_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            w_coeffs_d0 <= tmp_161_i_fu_541_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_coeffs_d0 <= tmp_i_i_fu_360_p1;
        else 
            w_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_coeffs_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w_coeffs_we0 <= ap_const_logic_1;
        else 
            w_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

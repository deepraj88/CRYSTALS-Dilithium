-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity unpack_sig is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    z_vec_coeffs_ce0 : OUT STD_LOGIC;
    z_vec_coeffs_we0 : OUT STD_LOGIC;
    z_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    h_vec_coeffs_ce0 : OUT STD_LOGIC;
    h_vec_coeffs_we0 : OUT STD_LOGIC;
    h_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_coeffs_ce0 : OUT STD_LOGIC;
    c_coeffs_we0 : OUT STD_LOGIC;
    c_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce0 : OUT STD_LOGIC;
    sig_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce1 : OUT STD_LOGIC;
    sig_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of unpack_sig is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv21_7FDFF : STD_LOGIC_VECTOR (20 downto 0) := "001111111110111111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv25_7FE001 : STD_LOGIC_VECTOR (24 downto 0) := "0011111111110000000000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv14_A00 : STD_LOGIC_VECTOR (13 downto 0) := "00101000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv12_A65 : STD_LOGIC_VECTOR (11 downto 0) := "101001100101";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv23_7FE000 : STD_LOGIC_VECTOR (22 downto 0) := "11111111110000000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_403 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_409 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_5_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_1079 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_439_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_1084 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_reg_1101 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_20_fu_475_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_20_reg_1106 : STD_LOGIC_VECTOR (9 downto 0);
    signal sig_load_6_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_reg_1134 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_8_fu_758_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_1157 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_cast1_fu_772_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_cast1_reg_1162 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_782_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sig_addr_1_reg_1175 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_877_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_7_fu_894_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_1204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_1_fu_954_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_9_fu_966_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_9_reg_1229 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sig_addr_2_reg_1234 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_991_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_1239 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_cast2_fu_999_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_cast2_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal j_5_fu_1009_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_1253 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_reg_303 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal j1_reg_326 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_reg_346 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_reg_381 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sum5_i_cast_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_i_cast_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_i_cast_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_i_cast_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_1_fu_1065_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_66_i_cast_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_i_cast_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_cast_cas_fu_1056_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_425_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_429_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_fu_463_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_i_cast1_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_cast_fu_471_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_i_cast_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum5_i_fu_485_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_i_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_i_cast_fu_500_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum7_i_fu_504_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_47_i_fu_514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_i_cast_fu_519_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum9_i_fu_523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_i_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_i_cast_fu_542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_i_fu_546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_59_i_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_i_cast_fu_561_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum1_i_fu_565_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_575_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_i_fu_589_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_50_i_cast_fu_598_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_64_i_fu_602_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_34_fu_612_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_i_cast_cast_fu_620_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_64_i_cast_fu_608_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_66_i_fu_628_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_i_fu_645_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_i_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_664_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_654_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_685_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_i_fu_677_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_i_fu_699_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_63_i_cast_fu_707_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_67_i_fu_711_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_35_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_i_cast_cast_fu_729_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_67_i_cast_fu_717_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_69_i_fu_737_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_764_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_cast_fu_788_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_fu_792_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_802_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_cast_fu_810_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_fu_814_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_837_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum4_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_858_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_900_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_cast_fu_908_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum6_fu_912_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_932_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_936_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_948_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_972_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum8_fu_976_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_fu_987_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_1015_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_1020_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1035_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_1047_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_413_p2 = ap_const_lv1_1))) then 
                i_1_reg_303 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_11_fu_831_p2 = ap_const_lv1_0))) then 
                i_1_reg_303 <= i_8_reg_1157;
            end if; 
        end if;
    end process;

    i_2_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_752_p2 = ap_const_lv1_1))) then 
                i_2_reg_346 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_2_fu_871_p2 = ap_const_lv1_0))) then 
                i_2_reg_346 <= i_6_fu_877_p2;
            end if; 
        end if;
    end process;

    i_3_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_2_fu_871_p2 = ap_const_lv1_1))) then 
                i_3_reg_357 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_3_reg_357 <= i_7_reg_1204;
            end if; 
        end if;
    end process;

    i_4_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_23_fu_1003_p2 = ap_const_lv1_1))) then 
                i_4_reg_381 <= i_9_reg_1229;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_10_fu_888_p2 = ap_const_lv1_1))) then 
                i_4_reg_381 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i_reg_291 <= i_10_reg_1096;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_413_p2 = ap_const_lv1_0))) then 
                i_i_reg_291 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_447_p2 = ap_const_lv1_1))) then 
                i_reg_279 <= i_5_reg_1079;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_279 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j1_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_752_p2 = ap_const_lv1_0))) then 
                j1_reg_326 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_776_p2 = ap_const_lv1_0))) then 
                j1_reg_326 <= j_3_fu_782_p2;
            end if; 
        end if;
    end process;

    j_1_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_776_p2 = ap_const_lv1_1))) then 
                j_1_reg_337 <= j_cast_reg_1149;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_1_reg_337 <= j_4_reg_1188;
            end if; 
        end if;
    end process;

    j_2_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_2_reg_392 <= j_5_reg_1253;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_20_fu_960_p2 = ap_const_lv1_0))) then 
                j_2_reg_392 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_413_p2 = ap_const_lv1_1))) then 
                j_reg_315 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_11_fu_831_p2 = ap_const_lv1_0))) then 
                j_reg_315 <= sig_q1;
            end if; 
        end if;
    end process;

    mask_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_27_fu_1026_p2 = ap_const_lv1_0))) then 
                mask_fu_130 <= mask_1_fu_1065_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_10_fu_888_p2 = ap_const_lv1_1))) then 
                mask_fu_130 <= ap_const_lv64_1;
            end if; 
        end if;
    end process;

    reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_403 <= sig_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_403 <= sig_q0;
            end if; 
        end if;
    end process;

    signs_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_2_fu_871_p2 = ap_const_lv1_1))) then 
                signs_reg_369 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                signs_reg_369 <= signs_1_fu_954_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_10_reg_1096 <= i_10_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_5_reg_1079 <= i_5_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_7_reg_1204 <= i_7_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_8_reg_1157 <= i_8_fu_758_p2;
                    j_cast_reg_1149(7 downto 0) <= j_cast_fu_748_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_9_reg_1229 <= i_9_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    j_2_cast2_reg_1244(3 downto 0) <= j_2_cast2_fu_999_p1(3 downto 0);
                j_5_reg_1253 <= j_5_fu_1009_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_11_fu_831_p2 = ap_const_lv1_1))) then
                j_4_reg_1188 <= j_4_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_409 <= sig_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_776_p2 = ap_const_lv1_1))) then
                    sig_addr_1_reg_1175(2 downto 0) <= sum2_cast_fu_822_p1(13 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_20_fu_960_p2 = ap_const_lv1_0))) then
                    sig_addr_2_reg_1234(11 downto 0) <= sum8_cast_fu_982_p1(13 - 1 downto 0)(11 downto 0);
                    tmp_22_reg_1239(7 downto 3) <= tmp_22_fu_991_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sig_load_6_reg_1129 <= sig_q1;
                tmp_19_reg_1134 <= tmp_19_fu_533_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_752_p2 = ap_const_lv1_0))) then
                    tmp_13_cast1_reg_1162(10 downto 8) <= tmp_13_cast1_fu_772_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_447_p2 = ap_const_lv1_0))) then
                tmp_5_reg_1101 <= tmp_5_fu_459_p1;
                tmp_i_20_reg_1106 <= tmp_i_20_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_413_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_1084(10 downto 7) <= tmp_cast_fu_439_p1(10 downto 7);
            end if;
        end if;
    end process;
    tmp_cast_reg_1084(6 downto 0) <= "0000000";
    tmp_cast_reg_1084(11) <= '0';
    j_cast_reg_1149(31 downto 8) <= "000000000000000000000000";
    tmp_13_cast1_reg_1162(7 downto 0) <= "00000000";
    tmp_13_cast1_reg_1162(11) <= '0';
    sig_addr_1_reg_1175(12 downto 3) <= "0101001100";
    sig_addr_2_reg_1234(12) <= '0';
    tmp_22_reg_1239(2 downto 0) <= "000";
    j_2_cast2_reg_1244(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, ap_CS_fsm_state2, tmp_fu_413_p2, ap_CS_fsm_state3, tmp_i_fu_447_p2, ap_CS_fsm_state8, exitcond_fu_752_p2, ap_CS_fsm_state9, tmp_3_fu_776_p2, tmp_11_fu_831_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_10_fu_888_p2, ap_CS_fsm_state16, tmp_20_fu_960_p2, ap_CS_fsm_state17, tmp_2_fu_871_p2, tmp_23_fu_1003_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_752_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_776_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_11_fu_831_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_2_fu_871_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_10_fu_888_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_20_fu_960_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_23_fu_1003_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16, tmp_20_fu_960_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_20_fu_960_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, tmp_20_fu_960_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_20_fu_960_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, tmp_4_fu_883_p1, tmp_32_fu_1051_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_address0 <= tmp_32_fu_1051_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            c_coeffs_address0 <= tmp_4_fu_883_p1(8 - 1 downto 0);
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state18, tmp_30_cast_cast_cas_fu_1056_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_d0 <= tmp_30_cast_cast_cas_fu_1056_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            c_coeffs_d0 <= ap_const_lv23_0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(ap_CS_fsm_state13, tmp_2_fu_871_p2, ap_CS_fsm_state18, tmp_27_fu_1026_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_27_fu_1026_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_2_fu_871_p2 = ap_const_lv1_0)))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_752_p2 <= "1" when (i_1_reg_303 = ap_const_lv3_5) else "0";

    h_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, tmp_38_cast_fu_797_p1, tmp_40_fu_866_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            h_vec_coeffs_address0 <= tmp_40_fu_866_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            h_vec_coeffs_address0 <= tmp_38_cast_fu_797_p1(11 - 1 downto 0);
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            h_vec_coeffs_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            h_vec_coeffs_d0 <= ap_const_lv1_0;
        else 
            h_vec_coeffs_d0 <= "X";
        end if; 
    end process;


    h_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state9, tmp_3_fu_776_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_3_fu_776_p2 = ap_const_lv1_0)))) then 
            h_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_453_p2 <= std_logic_vector(unsigned(i_i_reg_291) + unsigned(ap_const_lv8_1));
    i_5_fu_419_p2 <= std_logic_vector(unsigned(i_reg_279) + unsigned(ap_const_lv3_1));
    i_6_fu_877_p2 <= std_logic_vector(unsigned(i_2_reg_346) + unsigned(ap_const_lv9_1));
    i_7_fu_894_p2 <= std_logic_vector(unsigned(i_3_reg_357) + unsigned(ap_const_lv4_1));
    i_8_fu_758_p2 <= std_logic_vector(unsigned(i_1_reg_303) + unsigned(ap_const_lv3_1));
    i_9_fu_966_p2 <= std_logic_vector(unsigned(i_4_reg_381) + unsigned(ap_const_lv6_1));
    i_i_cast1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_291),10));
    j_2_cast2_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_392),8));
    j_3_fu_782_p2 <= std_logic_vector(unsigned(j1_reg_326) + unsigned(ap_const_lv9_1));
    j_4_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_1_reg_337));
    j_5_fu_1009_p2 <= std_logic_vector(unsigned(j_2_reg_392) + unsigned(ap_const_lv4_1));
    j_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_315),32));
    k_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sig_q1),32));
    mask_1_fu_1065_p2 <= std_logic_vector(shift_left(unsigned(mask_fu_130),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    p_shl_i_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_463_p3),10));
    p_shl_i_fu_463_p3 <= (tmp_5_fu_459_p1 & ap_const_lv2_0);

    sig_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state3, sig_addr_2_reg_1234, ap_CS_fsm_state17, sum5_i_cast_fu_490_p1, sum7_i_cast_fu_509_p1, sum1_i_cast_fu_570_p1, sum4_cast_fu_847_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sig_address0 <= sig_addr_2_reg_1234;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_address0 <= sum4_cast_fu_847_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_address0 <= sum1_i_cast_fu_570_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sig_address0 <= sum7_i_cast_fu_509_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sig_address0 <= sum5_i_cast_fu_490_p1(13 - 1 downto 0);
        else 
            sig_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sig_addr_1_reg_1175, ap_CS_fsm_state14, sum9_i_cast_fu_528_p1, sum_i_cast_fu_551_p1, sum6_cast_fu_918_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_address1 <= sum6_cast_fu_918_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sig_address1 <= sig_addr_1_reg_1175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_address1 <= sum_i_cast_fu_551_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sig_address1 <= sum9_i_cast_fu_528_p1(13 - 1 downto 0);
        else 
            sig_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sig_ce0 <= ap_const_logic_1;
        else 
            sig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            sig_ce1 <= ap_const_logic_1;
        else 
            sig_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    signs_1_fu_954_p2 <= (tmp_17_fu_948_p2 or signs_reg_369);
    sum1_i_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_i_fu_565_p2),64));
    sum1_i_fu_565_p2 <= std_logic_vector(unsigned(tmp_60_i_cast_fu_561_p1) + unsigned(tmp_cast_reg_1084));
    sum2_cast_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_814_p3),64));
        sum4_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum4_fu_841_p2),64));

    sum4_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv14_A00) + unsigned(tmp_38_fu_837_p1));
    sum5_i_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_i_fu_485_p2),64));
    sum5_i_fu_485_p2 <= std_logic_vector(unsigned(tmp_42_i_cast_fu_481_p1) + unsigned(tmp_cast_reg_1084));
    sum6_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_912_p2),64));
    sum6_fu_912_p2 <= std_logic_vector(signed(ap_const_lv12_A65) + signed(tmp_13_cast_fu_908_p1));
    sum7_i_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_i_fu_504_p2),64));
    sum7_i_fu_504_p2 <= std_logic_vector(unsigned(tmp_46_i_cast_fu_500_p1) + unsigned(tmp_cast_reg_1084));
    sum8_cast_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_976_p2),64));
    sum8_fu_976_p2 <= std_logic_vector(signed(ap_const_lv12_A65) + signed(tmp_21_cast_fu_972_p1));
    sum9_i_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_i_fu_523_p2),64));
    sum9_i_fu_523_p2 <= std_logic_vector(unsigned(tmp_48_i_cast_fu_519_p1) + unsigned(tmp_cast_reg_1084));
    sum_fu_814_p3 <= (ap_const_lv5_14 & tmp_5_cast_fu_810_p1);
    sum_i_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_546_p2),64));
    sum_i_fu_546_p2 <= std_logic_vector(unsigned(tmp_55_i_cast_fu_542_p1) + unsigned(tmp_cast_reg_1084));
    tmp_10_fu_888_p2 <= "1" when (i_3_reg_357 = ap_const_lv4_8) else "0";
    tmp_11_fu_831_p2 <= "1" when (unsigned(j_1_reg_337) < unsigned(k_fu_827_p1)) else "0";
    tmp_12_fu_693_p2 <= (tmp_6_fu_685_p3 or tmp_57_i_fu_677_p3);
    tmp_13_cast1_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_764_p3),12));
    tmp_13_cast_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_900_p3),12));
    tmp_13_fu_575_p4 <= ((i_reg_279 & tmp_5_reg_1101) & ap_const_lv1_0);
    tmp_14_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sig_q1),64));
    tmp_15_fu_936_p3 <= (tmp_37_fu_932_p1 & ap_const_lv3_0);
    tmp_16_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_936_p3),64));
    tmp_17_fu_948_p2 <= std_logic_vector(shift_left(unsigned(tmp_14_fu_928_p1),to_integer(unsigned('0' & tmp_16_fu_944_p1(31-1 downto 0)))));
    tmp_18_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_575_p4),64));
    tmp_19_fu_533_p1 <= sig_q1(4 - 1 downto 0);
    tmp_1_fu_425_p1 <= i_reg_279(2 - 1 downto 0);
    tmp_20_fu_960_p2 <= "1" when (i_4_reg_381 = ap_const_lv6_20) else "0";
    tmp_21_cast_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_381),12));
    tmp_21_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_i_fu_645_p4),8));
    tmp_22_fu_991_p3 <= (tmp_41_fu_987_p1 & ap_const_lv3_0);
    tmp_23_fu_1003_p2 <= "1" when (j_2_reg_392 = ap_const_lv4_8) else "0";
    tmp_24_fu_664_p3 <= (i_reg_279 & tmp_52_i_fu_658_p2);
    tmp_25_fu_1015_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & j_2_cast2_reg_1244(8-1 downto 0)))));
    tmp_26_fu_1020_p2 <= (tmp_25_fu_1015_p2 and sig_q0);
    tmp_27_fu_1026_p2 <= "1" when (tmp_26_fu_1020_p2 = ap_const_lv8_0) else "0";
    tmp_28_fu_1035_p2 <= (signs_reg_369 and mask_fu_130);
    tmp_29_fu_1041_p2 <= "0" when (tmp_28_fu_1035_p2 = ap_const_lv64_0) else "1";
    tmp_2_fu_871_p2 <= "1" when (i_2_reg_346 = ap_const_lv9_100) else "0";
    tmp_2_i_fu_589_p4 <= ((tmp_19_reg_1134 & reg_409) & reg_403);
    tmp_30_cast_cast_cas_fu_1056_p3 <= 
        ap_const_lv23_7FE000 when (tmp_29_fu_1041_p2(0) = '1') else 
        ap_const_lv23_1;
    tmp_30_fu_900_p3 <= (ap_const_lv2_2 & i_3_reg_357);
    tmp_31_fu_1047_p2 <= std_logic_vector(unsigned(tmp_22_reg_1239) + unsigned(j_2_cast2_reg_1244));
    tmp_32_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_1047_p2),64));
    tmp_33_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_664_p3),64));
    tmp_34_fu_612_p3 <= tmp_64_i_fu_602_p2(20 downto 20);
    tmp_35_fu_721_p3 <= tmp_67_i_fu_711_p2(20 downto 20);
    tmp_36_fu_792_p2 <= std_logic_vector(unsigned(tmp_13_cast1_reg_1162) + unsigned(tmp_7_cast_fu_788_p1));
    tmp_37_fu_932_p1 <= i_3_reg_357(3 - 1 downto 0);
    tmp_38_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_792_p2),64));
    tmp_38_fu_837_p1 <= j_1_reg_337(14 - 1 downto 0);
    tmp_39_fu_858_p3 <= (i_1_reg_303 & sig_q0);
    tmp_3_fu_776_p2 <= "1" when (j1_reg_326 = ap_const_lv9_100) else "0";
    tmp_40_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_858_p3),64));
    tmp_41_fu_987_p1 <= i_4_reg_381(5 - 1 downto 0);
    tmp_42_i_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_20_fu_475_p2),12));
    tmp_45_i_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(tmp_i_20_reg_1106));
    tmp_46_i_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_i_fu_495_p2),12));
    tmp_47_i_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(tmp_i_20_reg_1106));
    tmp_48_i_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_i_fu_514_p2),12));
    tmp_4_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_346),64));
    tmp_50_i_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_i_fu_589_p4),21));
    tmp_51_i_fu_645_p4 <= sig_load_6_reg_1129(7 downto 4);
    tmp_52_i_fu_658_p2 <= (tmp_7_fu_639_p2 or ap_const_lv8_1);
    tmp_54_i_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(tmp_i_20_reg_1106));
    tmp_55_i_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_i_fu_537_p2),12));
    tmp_57_i_fu_677_p3 <= (reg_403 & ap_const_lv4_0);
    tmp_59_i_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(tmp_i_20_reg_1106));
        tmp_5_cast_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_802_p3),7));

    tmp_5_fu_459_p1 <= i_i_reg_291(7 - 1 downto 0);
    tmp_60_i_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_i_fu_556_p2),12));
    tmp_63_i_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_i_fu_699_p3),21));
    tmp_63_i_fu_699_p3 <= (reg_409 & tmp_12_fu_693_p2);
        tmp_64_i_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_64_i_fu_602_p2),25));

    tmp_64_i_fu_602_p2 <= std_logic_vector(unsigned(ap_const_lv21_7FDFF) - unsigned(tmp_50_i_cast_fu_598_p1));
    tmp_65_i_cast_cast_fu_620_p3 <= 
        ap_const_lv25_7FE001 when (tmp_34_fu_612_p3(0) = '1') else 
        ap_const_lv25_0;
        tmp_66_i_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_66_i_fu_628_p2),32));

    tmp_66_i_fu_628_p2 <= std_logic_vector(unsigned(tmp_65_i_cast_cast_fu_620_p3) + unsigned(tmp_64_i_cast_fu_608_p1));
        tmp_67_i_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_i_fu_711_p2),25));

    tmp_67_i_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv21_7FDFF) - unsigned(tmp_63_i_cast_fu_707_p1));
    tmp_68_i_cast_cast_fu_729_p3 <= 
        ap_const_lv25_7FE001 when (tmp_35_fu_721_p3(0) = '1') else 
        ap_const_lv25_0;
        tmp_69_i_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_69_i_fu_737_p2),32));

    tmp_69_i_fu_737_p2 <= std_logic_vector(unsigned(tmp_68_i_cast_cast_fu_729_p3) + unsigned(tmp_67_i_cast_fu_717_p1));
    tmp_6_fu_685_p3 <= (ap_const_lv4_0 & tmp_21_fu_654_p1);
    tmp_7_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_326),12));
    tmp_7_fu_639_p2 <= std_logic_vector(shift_left(unsigned(i_i_reg_291),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_8_fu_764_p3 <= (i_1_reg_303 & ap_const_lv8_0);
    tmp_9_fu_429_p4 <= ((tmp_1_fu_425_p1 & tmp_1_fu_425_p1) & ap_const_lv7_0);
    tmp_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_429_p4),12));
    tmp_fu_413_p2 <= "1" when (i_reg_279 = ap_const_lv3_4) else "0";
    tmp_i_20_fu_475_p2 <= std_logic_vector(unsigned(i_i_cast1_fu_443_p1) + unsigned(p_shl_i_cast_fu_471_p1));
    tmp_i_fu_447_p2 <= "1" when (i_i_reg_291 = ap_const_lv8_80) else "0";
    tmp_s_fu_802_p3 <= (ap_const_lv3_4 & i_1_reg_303);

    z_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_18_fu_584_p1, tmp_33_fu_672_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            z_vec_coeffs_address0 <= tmp_33_fu_672_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_address0 <= tmp_18_fu_584_p1(10 - 1 downto 0);
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_66_i_cast_fu_634_p1, tmp_69_i_cast_fu_743_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            z_vec_coeffs_d0 <= tmp_69_i_cast_fu_743_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_d0 <= tmp_66_i_cast_fu_634_p1;
        else 
            z_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            z_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            z_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

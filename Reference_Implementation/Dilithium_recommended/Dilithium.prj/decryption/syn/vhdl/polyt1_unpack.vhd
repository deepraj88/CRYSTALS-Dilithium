-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyt1_unpack is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_coeffs_ce0 : OUT STD_LOGIC;
    r_coeffs_we0 : OUT STD_LOGIC;
    r_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    r_coeffs_ce1 : OUT STD_LOGIC;
    r_coeffs_we1 : OUT STD_LOGIC;
    r_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of polyt1_unpack is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_17_fu_293_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_17_reg_843 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_65_fu_299_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_reg_848 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_reg_853 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_315_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_864 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_reg_885 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_45_reg_900 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_53_reg_915 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum9_fu_692_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum9_reg_930 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_272 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum3_cast_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_cast_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_cast_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_cast_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_cast_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_cast_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_cast_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_cast_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_cast7_fu_311_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast9_fu_283_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_cast_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_fu_335_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_cast_fu_341_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum2_fu_345_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_66_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_359_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_372_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_fu_395_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_cast_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum3_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_cast_fu_419_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum4_fu_423_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_433_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_437_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_454_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_72_fu_476_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_fu_466_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_498_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_fu_520_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_62_cast_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum5_fu_529_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_fu_539_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_71_cast_fu_544_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum6_fu_548_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_fu_558_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_562_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_48_fu_574_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_579_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_78_fu_601_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_591_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_79_fu_623_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_fu_645_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_cast_fu_650_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum7_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_58_fu_664_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_cast_fu_669_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum8_fu_673_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_683_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_98_cast_fu_688_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_fu_697_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_701_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_718_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_84_fu_740_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_57_fu_730_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_59_fu_744_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_762_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_786_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_803_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_272 <= i_17_reg_843;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_272 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_17_reg_843 <= i_17_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    p_shl_reg_853(7 downto 3) <= p_shl_fu_303_p3(7 downto 3);
                tmp_65_reg_848 <= tmp_65_fu_299_p1;
                tmp_s_reg_864 <= tmp_s_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sum9_reg_930 <= sum9_fu_692_p2;
                tmp_53_reg_915 <= a_q1(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_37_reg_885 <= a_q1(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_45_reg_900 <= a_q1(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_87_reg_935 <= a_q1(7 downto 7);
            end if;
        end if;
    end process;
    p_shl_reg_853(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_287_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, sum_cast_fu_330_p1, sum3_cast_fu_409_p1, sum5_cast_fu_534_p1, sum7_cast_fu_659_p1, sum9_cast_fu_782_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= sum9_cast_fu_782_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address0 <= sum7_cast_fu_659_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= sum5_cast_fu_534_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address0 <= sum3_cast_fu_409_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address0 <= sum_cast_fu_330_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, sum2_cast_fu_350_p1, sum4_cast_fu_428_p1, sum6_cast_fu_553_p1, sum8_cast_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_address1 <= sum8_cast_fu_678_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address1 <= sum6_cast_fu_553_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_address1 <= sum4_cast_fu_428_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_address1 <= sum2_cast_fu_350_p1(11 - 1 downto 0);
        else 
            a_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_287_p2)
    begin
        if ((((tmp_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_287_p2)
    begin
        if (((tmp_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_17_fu_293_p2 <= std_logic_vector(unsigned(i_reg_272) + unsigned(ap_const_lv6_1));
    i_cast9_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_272),9));
    p_shl_cast7_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_303_p3),9));
    p_shl_fu_303_p3 <= (tmp_65_fu_299_p1 & ap_const_lv3_0);

    r_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_68_fu_380_p1, tmp_71_fu_461_p1, tmp_80_fu_630_p1, tmp_86_fu_769_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address0 <= tmp_86_fu_769_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address0 <= tmp_80_fu_630_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address0 <= tmp_71_fu_461_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_address0 <= tmp_68_fu_380_p1(11 - 1 downto 0);
        else 
            r_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_74_fu_505_p1, tmp_77_fu_586_p1, tmp_83_fu_725_p1, tmp_89_fu_810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_address1 <= tmp_89_fu_810_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_address1 <= tmp_83_fu_725_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_address1 <= tmp_77_fu_586_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_address1 <= tmp_74_fu_505_p1(11 - 1 downto 0);
        else 
            r_coeffs_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_ce0 <= ap_const_logic_1;
        else 
            r_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_ce1 <= ap_const_logic_1;
        else 
            r_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_36_fu_367_p1, tmp_48_cast_fu_444_p1, tmp_75_cast_fu_613_p1, tmp_93_cast_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d0 <= tmp_93_cast_fu_752_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d0 <= tmp_75_cast_fu_613_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d0 <= tmp_48_cast_fu_444_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            r_coeffs_d0 <= tmp_36_fu_367_p1;
        else 
            r_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_57_cast_fu_488_p1, tmp_66_cast_fu_569_p1, tmp_84_cast_fu_708_p1, tmp_101_cast_fu_793_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            r_coeffs_d1 <= tmp_101_cast_fu_793_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_coeffs_d1 <= tmp_84_cast_fu_708_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_coeffs_d1 <= tmp_66_cast_fu_569_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            r_coeffs_d1 <= tmp_57_cast_fu_488_p1;
        else 
            r_coeffs_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_coeffs_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_we0 <= ap_const_logic_1;
        else 
            r_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    r_coeffs_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            r_coeffs_we1 <= ap_const_logic_1;
        else 
            r_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_345_p2),64));
    sum2_fu_345_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_38_cast_fu_341_p1));
    sum3_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_404_p2),64));
    sum3_fu_404_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_44_cast_fu_400_p1));
    sum4_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_423_p2),64));
    sum4_fu_423_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_53_cast_fu_419_p1));
    sum5_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_529_p2),64));
    sum5_fu_529_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_62_cast_fu_525_p1));
    sum6_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_548_p2),64));
    sum6_fu_548_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_71_cast_fu_544_p1));
    sum7_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_654_p2),64));
    sum7_fu_654_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_80_cast_fu_650_p1));
    sum8_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_673_p2),64));
    sum8_fu_673_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_89_cast_fu_669_p1));
    sum9_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_reg_930),64));
    sum9_fu_692_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_98_cast_fu_688_p1));
    sum_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_325_p2),64));
    sum_fu_325_p2 <= std_logic_vector(unsigned(a_offset) + unsigned(tmp_36_cast_fu_321_p1));
    tmp_101_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_786_p3),32));
    tmp_35_fu_335_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp_s_fu_315_p2));
    tmp_36_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_315_p2),11));
    tmp_36_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_359_p3),32));
    tmp_38_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_335_p2),11));
    tmp_38_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp_s_reg_864));
    tmp_39_fu_437_p3 <= (tmp_69_fu_433_p1 & tmp_37_reg_885);
    tmp_40_fu_449_p2 <= (p_shl_reg_853 or ap_const_lv8_1);
    tmp_41_fu_466_p4 <= a_q0(7 downto 2);
    tmp_42_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv9_3) + unsigned(tmp_s_reg_864));
    tmp_43_fu_480_p3 <= (tmp_72_fu_476_p1 & tmp_41_fu_466_p4);
    tmp_44_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_395_p2),11));
    tmp_44_fu_493_p2 <= (p_shl_reg_853 or ap_const_lv8_2);
    tmp_46_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv9_4) + unsigned(tmp_s_reg_864));
    tmp_47_fu_562_p3 <= (tmp_75_fu_558_p1 & tmp_45_reg_900);
    tmp_48_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_437_p3),32));
    tmp_48_fu_574_p2 <= (p_shl_reg_853 or ap_const_lv8_3);
    tmp_49_fu_591_p4 <= a_q0(7 downto 4);
    tmp_50_fu_539_p2 <= std_logic_vector(unsigned(ap_const_lv9_5) + unsigned(tmp_s_reg_864));
    tmp_51_fu_605_p3 <= (tmp_78_fu_601_p1 & tmp_49_fu_591_p4);
    tmp_52_fu_618_p2 <= (p_shl_reg_853 or ap_const_lv8_4);
    tmp_53_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_414_p2),11));
    tmp_54_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv9_6) + unsigned(tmp_s_reg_864));
    tmp_55_fu_701_p3 <= (tmp_81_fu_697_p1 & tmp_53_reg_915);
    tmp_56_fu_713_p2 <= (p_shl_reg_853 or ap_const_lv8_5);
    tmp_57_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_480_p3),32));
    tmp_57_fu_730_p4 <= a_q0(7 downto 6);
    tmp_58_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv9_7) + unsigned(tmp_s_reg_864));
    tmp_59_fu_744_p3 <= (tmp_84_fu_740_p1 & tmp_57_fu_730_p4);
    tmp_60_fu_757_p2 <= (p_shl_reg_853 or ap_const_lv8_6);
    tmp_62_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_520_p2),11));
    tmp_62_fu_683_p2 <= std_logic_vector(unsigned(ap_const_lv9_8) + unsigned(tmp_s_reg_864));
    tmp_63_fu_786_p3 <= (a_q0 & tmp_87_reg_935);
    tmp_64_fu_798_p2 <= (p_shl_reg_853 or ap_const_lv8_7);
    tmp_65_fu_299_p1 <= i_reg_272(5 - 1 downto 0);
    tmp_66_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_562_p3),32));
    tmp_66_fu_355_p1 <= a_q1(1 - 1 downto 0);
    tmp_67_fu_372_p4 <= ((r_coeffs_offset & tmp_65_reg_848) & ap_const_lv3_0);
    tmp_68_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_372_p4),64));
    tmp_69_fu_433_p1 <= a_q0(2 - 1 downto 0);
    tmp_70_fu_454_p3 <= (r_coeffs_offset & tmp_40_fu_449_p2);
    tmp_71_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_539_p2),11));
    tmp_71_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_454_p3),64));
    tmp_72_fu_476_p1 <= a_q1(3 - 1 downto 0);
    tmp_73_fu_498_p3 <= (r_coeffs_offset & tmp_44_fu_493_p2);
    tmp_74_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_498_p3),64));
    tmp_75_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_605_p3),32));
    tmp_75_fu_558_p1 <= a_q0(4 - 1 downto 0);
    tmp_76_fu_579_p3 <= (r_coeffs_offset & tmp_48_fu_574_p2);
    tmp_77_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_579_p3),64));
    tmp_78_fu_601_p1 <= a_q1(5 - 1 downto 0);
    tmp_79_fu_623_p3 <= (r_coeffs_offset & tmp_52_fu_618_p2);
    tmp_80_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_645_p2),11));
    tmp_80_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_623_p3),64));
    tmp_81_fu_697_p1 <= a_q0(6 - 1 downto 0);
    tmp_82_fu_718_p3 <= (r_coeffs_offset & tmp_56_fu_713_p2);
    tmp_83_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_718_p3),64));
    tmp_84_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_701_p3),32));
    tmp_84_fu_740_p1 <= a_q1(7 - 1 downto 0);
    tmp_85_fu_762_p3 <= (r_coeffs_offset & tmp_60_fu_757_p2);
    tmp_86_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_762_p3),64));
    tmp_88_fu_803_p3 <= (r_coeffs_offset & tmp_64_fu_798_p2);
    tmp_89_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_664_p2),11));
    tmp_89_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_803_p3),64));
    tmp_93_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_744_p3),32));
    tmp_98_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_683_p2),11));
    tmp_9_fu_359_p3 <= (tmp_66_fu_355_p1 & a_q0);
    tmp_fu_287_p2 <= "1" when (i_reg_272 = ap_const_lv6_20) else "0";
    tmp_s_fu_315_p2 <= std_logic_vector(unsigned(p_shl_cast7_fu_311_p1) + unsigned(i_cast9_fu_283_p1));
end behav;

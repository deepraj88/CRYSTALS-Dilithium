// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _keccak_absorb_1_HH_
#define _keccak_absorb_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "keccak_absorb_1_t.h"

namespace ap_rtl {

struct keccak_absorb_1 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > s_address0;
    sc_out< sc_logic > s_ce0;
    sc_out< sc_logic > s_we0;
    sc_out< sc_lv<64> > s_d0;
    sc_in< sc_lv<64> > s_q0;
    sc_out< sc_lv<6> > m_address0;
    sc_out< sc_logic > m_ce0;
    sc_in< sc_lv<8> > m_q0;


    // Module declarations
    keccak_absorb_1(sc_module_name name);
    SC_HAS_PROCESS(keccak_absorb_1);

    ~keccak_absorb_1();

    sc_trace_file* mVcdFile;

    keccak_absorb_1_t* t_U;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_22_fu_221_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_23_fu_238_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_102_fu_249_p1;
    sc_signal< sc_lv<64> > tmp_102_reg_379;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<6> > tmp_104_fu_260_p2;
    sc_signal< sc_lv<6> > tmp_104_reg_387;
    sc_signal< sc_lv<1> > exitcond1_fu_254_p2;
    sc_signal< sc_lv<5> > i_24_fu_279_p2;
    sc_signal< sc_lv<5> > i_24_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > tmp_105_fu_285_p3;
    sc_signal< sc_lv<8> > tmp_105_reg_411;
    sc_signal< sc_lv<1> > exitcond2_fu_273_p2;
    sc_signal< sc_lv<4> > i_5_fu_299_p2;
    sc_signal< sc_lv<4> > i_5_reg_419;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > tmp_i3_fu_293_p2;
    sc_signal< sc_lv<5> > s_addr_1_reg_429;
    sc_signal< sc_lv<64> > r_fu_350_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > t_address0;
    sc_signal< sc_logic > t_ce0;
    sc_signal< sc_logic > t_we0;
    sc_signal< sc_lv<8> > t_d0;
    sc_signal< sc_lv<8> > t_q0;
    sc_signal< sc_lv<8> > t_address1;
    sc_signal< sc_logic > t_ce1;
    sc_signal< sc_logic > t_we1;
    sc_signal< sc_lv<8> > t_d1;
    sc_signal< sc_lv<8> > t_q1;
    sc_signal< sc_lv<5> > i_reg_146;
    sc_signal< sc_lv<1> > tmp_fu_215_p2;
    sc_signal< sc_lv<8> > i_2_reg_157;
    sc_signal< sc_lv<1> > exitcond_fu_232_p2;
    sc_signal< sc_lv<6> > i_3_reg_168;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<5> > i_4_reg_179;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<4> > i_i1_reg_191;
    sc_signal< sc_lv<64> > r_i2_reg_203;
    sc_signal< sc_lv<64> > tmp_s_fu_227_p1;
    sc_signal< sc_lv<64> > tmp_101_fu_244_p1;
    sc_signal< sc_lv<64> > sum_i5_cast_fu_314_p1;
    sc_signal< sc_lv<64> > tmp_106_fu_319_p1;
    sc_signal< sc_lv<64> > tmp_107_fu_356_p2;
    sc_signal< sc_lv<8> > tmp_i4_cast_fu_305_p1;
    sc_signal< sc_lv<8> > sum_i5_fu_309_p2;
    sc_signal< sc_lv<3> > tmp_115_fu_328_p1;
    sc_signal< sc_lv<6> > tmp_190_i9_fu_332_p3;
    sc_signal< sc_lv<64> > tmp_189_i8_fu_324_p1;
    sc_signal< sc_lv<64> > tmp_191_i_fu_340_p1;
    sc_signal< sc_lv<64> > tmp_192_i_fu_344_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_A7;
    static const sc_lv<64> ap_const_lv64_21;
    static const sc_lv<8> ap_const_lv8_1F;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_A8;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<6> ap_const_lv6_21;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<5> ap_const_lv5_15;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_254_p2();
    void thread_exitcond2_fu_273_p2();
    void thread_exitcond_fu_232_p2();
    void thread_i_22_fu_221_p2();
    void thread_i_23_fu_238_p2();
    void thread_i_24_fu_279_p2();
    void thread_i_5_fu_299_p2();
    void thread_m_address0();
    void thread_m_ce0();
    void thread_r_fu_350_p2();
    void thread_s_address0();
    void thread_s_ce0();
    void thread_s_d0();
    void thread_s_we0();
    void thread_sum_i5_cast_fu_314_p1();
    void thread_sum_i5_fu_309_p2();
    void thread_t_address0();
    void thread_t_address1();
    void thread_t_ce0();
    void thread_t_ce1();
    void thread_t_d0();
    void thread_t_d1();
    void thread_t_we0();
    void thread_t_we1();
    void thread_tmp_101_fu_244_p1();
    void thread_tmp_102_fu_249_p1();
    void thread_tmp_104_fu_260_p2();
    void thread_tmp_105_fu_285_p3();
    void thread_tmp_106_fu_319_p1();
    void thread_tmp_107_fu_356_p2();
    void thread_tmp_115_fu_328_p1();
    void thread_tmp_189_i8_fu_324_p1();
    void thread_tmp_190_i9_fu_332_p3();
    void thread_tmp_191_i_fu_340_p1();
    void thread_tmp_192_i_fu_344_p2();
    void thread_tmp_fu_215_p2();
    void thread_tmp_i3_fu_293_p2();
    void thread_tmp_i4_cast_fu_305_p1();
    void thread_tmp_s_fu_227_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

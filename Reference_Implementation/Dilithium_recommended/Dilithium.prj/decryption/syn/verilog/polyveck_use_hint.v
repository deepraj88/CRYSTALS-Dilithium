// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyveck_use_hint (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_vec_coeffs_address0,
        w_vec_coeffs_ce0,
        w_vec_coeffs_we0,
        w_vec_coeffs_d0,
        u_vec_coeffs_address0,
        u_vec_coeffs_ce0,
        u_vec_coeffs_q0,
        h_vec_coeffs_address0,
        h_vec_coeffs_ce0,
        h_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] w_vec_coeffs_address0;
output   w_vec_coeffs_ce0;
output   w_vec_coeffs_we0;
output  [5:0] w_vec_coeffs_d0;
output  [10:0] u_vec_coeffs_address0;
output   u_vec_coeffs_ce0;
input  [31:0] u_vec_coeffs_q0;
output  [10:0] h_vec_coeffs_address0;
output   h_vec_coeffs_ce0;
input  [0:0] h_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg w_vec_coeffs_ce0;
reg w_vec_coeffs_we0;
reg u_vec_coeffs_ce0;
reg h_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_14_fu_149_p2;
reg   [2:0] i_14_reg_446;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_63_cast_fu_163_p1;
reg   [11:0] tmp_63_cast_reg_451;
wire   [0:0] tmp_fu_143_p2;
wire   [8:0] j_6_fu_173_p2;
reg   [8:0] j_6_reg_459;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_64_cast_fu_188_p1;
reg   [63:0] tmp_64_cast_reg_464;
wire   [0:0] tmp_s_fu_167_p2;
reg   [31:0] u_vec_coeffs_load_reg_475;
wire    ap_CS_fsm_state4;
wire  signed [23:0] t_9_fu_255_p2;
reg  signed [23:0] t_9_reg_480;
wire   [3:0] a1_fu_333_p2;
reg   [3:0] a1_reg_486;
wire    ap_CS_fsm_state5;
reg   [9:0] tmp_250_i_i_reg_494;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_1_i_fu_363_p2;
reg   [0:0] tmp_1_i_reg_504;
reg   [2:0] i_reg_121;
reg   [8:0] j_reg_132;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_56_fu_155_p3;
wire   [11:0] tmp_34_cast_fu_179_p1;
wire   [11:0] tmp_57_fu_183_p2;
wire   [18:0] t_fu_193_p1;
wire   [12:0] tmp_58_fu_201_p4;
wire   [21:0] tmp_i_i_fu_211_p3;
wire   [22:0] tmp_i_i_cast_fu_219_p1;
wire   [22:0] tmp4_fu_223_p2;
wire  signed [23:0] tmp4_cast_fu_229_p1;
wire   [23:0] t_cast_fu_197_p1;
wire   [23:0] t_8_fu_233_p2;
wire   [0:0] tmp_59_fu_239_p3;
wire   [23:0] tmp_248_i_i_cast_cas_fu_247_p3;
wire   [31:0] t_1_i_i_fu_264_p2;
wire  signed [31:0] t_11_cast_fu_261_p1;
wire   [31:0] a_assign_4_fu_269_p2;
wire   [12:0] tmp_60_fu_281_p4;
wire   [31:0] u_fu_275_p2;
wire   [0:0] tmp_61_fu_295_p3;
wire   [0:0] tmp5_fu_303_p2;
wire   [13:0] tmp5_cast_fu_309_p1;
wire   [13:0] tmp_249_i_i_cast_fu_291_p1;
wire   [3:0] tmp_29_fu_313_p4;
wire   [3:0] tmp_30_fu_323_p1;
wire   [13:0] a_assign_5_fu_327_p2;
wire   [23:0] tmp_251_i_i_fu_352_p2;
wire   [23:0] tmp_250_i_i_cast_fu_349_p1;
wire   [23:0] a0_fu_357_p2;
wire   [4:0] a_assign_7_cast_fu_372_p1;
wire   [0:0] tmp_2_i_fu_375_p2;
wire   [4:0] tmp_3_i_fu_380_p2;
wire   [4:0] tmp_4_i_fu_386_p3;
wire   [0:0] tmp_5_i_fu_398_p2;
wire   [4:0] tmp_6_i_fu_403_p2;
wire   [4:0] tmp_7_i_fu_409_p3;
wire   [0:0] sel_tmp1_fu_421_p2;
wire   [5:0] tmp_4_i_cast_fu_394_p1;
wire  signed [5:0] tmp_7_i_cast_fu_417_p1;
wire   [5:0] sel_tmp2_fu_426_p3;
wire   [5:0] a_assign_7_cast6_fu_369_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_121 <= i_14_reg_446;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_132 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_132 <= j_6_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a1_reg_486 <= a1_fu_333_p2;
        tmp_250_i_i_reg_494 <= {{a_assign_5_fu_327_p2[13:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_14_reg_446 <= i_14_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_6_reg_459 <= j_6_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_9_reg_480 <= t_9_fu_255_p2;
        u_vec_coeffs_load_reg_475 <= u_vec_coeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_1_i_reg_504 <= tmp_1_i_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_63_cast_reg_451[10 : 8] <= tmp_63_cast_fu_163_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_64_cast_reg_464[11 : 0] <= tmp_64_cast_fu_188_p1[11 : 0];
    end
end

always @ (*) begin
    if ((((tmp_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_vec_coeffs_ce0 = 1'b1;
    end else begin
        h_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        u_vec_coeffs_ce0 = 1'b1;
    end else begin
        u_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_vec_coeffs_ce0 = 1'b1;
    end else begin
        w_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_vec_coeffs_we0 = 1'b1;
    end else begin
        w_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_s_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a0_fu_357_p2 = (tmp_251_i_i_fu_352_p2 - tmp_250_i_i_cast_fu_349_p1);

assign a1_fu_333_p2 = (tmp_29_fu_313_p4 + tmp_30_fu_323_p1);

assign a_assign_4_fu_269_p2 = ($signed(t_1_i_i_fu_264_p2) - $signed(t_11_cast_fu_261_p1));

assign a_assign_5_fu_327_p2 = (tmp5_cast_fu_309_p1 + tmp_249_i_i_cast_fu_291_p1);

assign a_assign_7_cast6_fu_369_p1 = a1_reg_486;

assign a_assign_7_cast_fu_372_p1 = a1_reg_486;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign h_vec_coeffs_address0 = tmp_64_cast_reg_464;

assign i_14_fu_149_p2 = (i_reg_121 + 3'd1);

assign j_6_fu_173_p2 = (j_reg_132 + 9'd1);

assign sel_tmp1_fu_421_p2 = (tmp_1_i_reg_504 & h_vec_coeffs_q0);

assign sel_tmp2_fu_426_p3 = ((sel_tmp1_fu_421_p2[0:0] === 1'b1) ? tmp_4_i_cast_fu_394_p1 : tmp_7_i_cast_fu_417_p1);

assign t_11_cast_fu_261_p1 = t_9_reg_480;

assign t_1_i_i_fu_264_p2 = (32'd261887 + u_vec_coeffs_load_reg_475);

assign t_8_fu_233_p2 = ($signed(tmp4_cast_fu_229_p1) + $signed(t_cast_fu_197_p1));

assign t_9_fu_255_p2 = (tmp_248_i_i_cast_cas_fu_247_p3 + t_8_fu_233_p2);

assign t_cast_fu_197_p1 = t_fu_193_p1;

assign t_fu_193_p1 = u_vec_coeffs_q0[18:0];

assign tmp4_cast_fu_229_p1 = $signed(tmp4_fu_223_p2);

assign tmp4_fu_223_p2 = ($signed(23'd8126719) + $signed(tmp_i_i_cast_fu_219_p1));

assign tmp5_cast_fu_309_p1 = tmp5_fu_303_p2;

assign tmp5_fu_303_p2 = (tmp_61_fu_295_p3 ^ 1'd1);

assign tmp_1_i_fu_363_p2 = ((a0_fu_357_p2 > 24'd8380417) ? 1'b1 : 1'b0);

assign tmp_248_i_i_cast_cas_fu_247_p3 = ((tmp_59_fu_239_p3[0:0] === 1'b1) ? 24'd523776 : 24'd0);

assign tmp_249_i_i_cast_fu_291_p1 = tmp_60_fu_281_p4;

assign tmp_250_i_i_cast_fu_349_p1 = tmp_250_i_i_reg_494;

assign tmp_251_i_i_fu_352_p2 = ($signed(24'd8118530) + $signed(t_9_reg_480));

assign tmp_29_fu_313_p4 = {{a_assign_4_fu_269_p2[22:19]}};

assign tmp_2_i_fu_375_p2 = ((a1_reg_486 == 4'd15) ? 1'b1 : 1'b0);

assign tmp_30_fu_323_p1 = tmp5_fu_303_p2;

assign tmp_34_cast_fu_179_p1 = j_reg_132;

assign tmp_3_i_fu_380_p2 = (5'd1 + a_assign_7_cast_fu_372_p1);

assign tmp_4_i_cast_fu_394_p1 = tmp_4_i_fu_386_p3;

assign tmp_4_i_fu_386_p3 = ((tmp_2_i_fu_375_p2[0:0] === 1'b1) ? 5'd0 : tmp_3_i_fu_380_p2);

assign tmp_56_fu_155_p3 = {{i_reg_121}, {8'd0}};

assign tmp_57_fu_183_p2 = (tmp_34_cast_fu_179_p1 + tmp_63_cast_reg_451);

assign tmp_58_fu_201_p4 = {{u_vec_coeffs_q0[31:19]}};

assign tmp_59_fu_239_p3 = t_8_fu_233_p2[32'd23];

assign tmp_5_i_fu_398_p2 = ((a1_reg_486 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_60_fu_281_p4 = {{a_assign_4_fu_269_p2[31:19]}};

assign tmp_61_fu_295_p3 = u_fu_275_p2[32'd31];

assign tmp_63_cast_fu_163_p1 = tmp_56_fu_155_p3;

assign tmp_64_cast_fu_188_p1 = tmp_57_fu_183_p2;

assign tmp_6_i_fu_403_p2 = ($signed(5'd31) + $signed(a_assign_7_cast_fu_372_p1));

assign tmp_7_i_cast_fu_417_p1 = $signed(tmp_7_i_fu_409_p3);

assign tmp_7_i_fu_409_p3 = ((tmp_5_i_fu_398_p2[0:0] === 1'b1) ? 5'd15 : tmp_6_i_fu_403_p2);

assign tmp_fu_143_p2 = ((i_reg_121 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_i_cast_fu_219_p1 = tmp_i_i_fu_211_p3;

assign tmp_i_i_fu_211_p3 = {{tmp_58_fu_201_p4}, {9'd0}};

assign tmp_s_fu_167_p2 = ((j_reg_132 == 9'd256) ? 1'b1 : 1'b0);

assign u_fu_275_p2 = ($signed(32'd4294967295) + $signed(a_assign_4_fu_269_p2));

assign u_vec_coeffs_address0 = tmp_64_cast_fu_188_p1;

assign w_vec_coeffs_address0 = tmp_64_cast_reg_464;

assign w_vec_coeffs_d0 = ((h_vec_coeffs_q0[0:0] === 1'b1) ? sel_tmp2_fu_426_p3 : a_assign_7_cast6_fu_369_p1);

always @ (posedge ap_clk) begin
    tmp_63_cast_reg_451[7:0] <= 8'b00000000;
    tmp_63_cast_reg_451[11] <= 1'b0;
    tmp_64_cast_reg_464[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //polyveck_use_hint

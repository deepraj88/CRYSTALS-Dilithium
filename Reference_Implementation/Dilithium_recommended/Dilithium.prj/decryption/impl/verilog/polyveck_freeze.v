// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyveck_freeze (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_we0,
        v_vec_coeffs_d0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
output   v_vec_coeffs_we0;
output  [31:0] v_vec_coeffs_d0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] v_vec_coeffs_address0;
reg v_vec_coeffs_ce0;
reg v_vec_coeffs_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_15_fu_89_p2;
reg   [2:0] i_15_reg_219;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_68_cast_fu_103_p1;
reg   [11:0] tmp_68_cast_reg_224;
wire   [0:0] tmp_fu_83_p2;
wire   [8:0] i_16_fu_113_p2;
reg   [8:0] i_16_reg_232;
wire    ap_CS_fsm_state3;
reg   [10:0] v_vec_coeffs_addr_reg_237;
wire   [0:0] tmp_i_fu_107_p2;
wire   [31:0] a_assign_9_fu_189_p2;
reg   [31:0] a_assign_9_reg_242;
wire    ap_CS_fsm_state4;
reg   [2:0] i_reg_61;
reg   [8:0] i_i_reg_72;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_69_cast_fu_128_p1;
wire   [10:0] tmp_s_fu_95_p3;
wire   [11:0] tmp_i_cast_fu_119_p1;
wire   [11:0] tmp_61_fu_123_p2;
wire   [22:0] t_fu_133_p1;
wire   [8:0] tmp_62_fu_141_p4;
wire   [23:0] t_cast_fu_137_p1;
wire   [23:0] a_assign_8_cast_fu_151_p1;
wire   [23:0] tmp_41_i_i_i_fu_165_p2;
wire   [21:0] tmp_i_i_i_fu_155_p4;
wire   [21:0] tmp_63_fu_175_p2;
wire   [31:0] tmp12_fu_181_p3;
wire  signed [31:0] tmp_41_i_i_i_cast_fu_171_p1;
wire   [0:0] tmp_64_fu_195_p3;
wire   [31:0] tmp_i_i_cast_cast_fu_202_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_72 <= i_16_reg_232;
    end else if (((tmp_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_reg_72 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_61 <= i_15_reg_219;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_61 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_assign_9_reg_242 <= a_assign_9_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_15_reg_219 <= i_15_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_16_reg_232 <= i_16_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_83_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_68_cast_reg_224[10 : 8] <= tmp_68_cast_fu_103_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_107_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_vec_coeffs_addr_reg_237 <= tmp_69_cast_fu_128_p1;
    end
end

always @ (*) begin
    if ((((tmp_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_vec_coeffs_address0 = v_vec_coeffs_addr_reg_237;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        v_vec_coeffs_address0 = tmp_69_cast_fu_128_p1;
    end else begin
        v_vec_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        v_vec_coeffs_we0 = 1'b1;
    end else begin
        v_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_83_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_i_fu_107_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_8_cast_fu_151_p1 = tmp_62_fu_141_p4;

assign a_assign_9_fu_189_p2 = ($signed(tmp12_fu_181_p3) + $signed(tmp_41_i_i_i_cast_fu_171_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_15_fu_89_p2 = (i_reg_61 + 3'd1);

assign i_16_fu_113_p2 = (i_i_reg_72 + 9'd1);

assign t_cast_fu_137_p1 = t_fu_133_p1;

assign t_fu_133_p1 = v_vec_coeffs_q0[22:0];

assign tmp12_fu_181_p3 = {{10'd1022}, {tmp_63_fu_175_p2}};

assign tmp_41_i_i_i_cast_fu_171_p1 = $signed(tmp_41_i_i_i_fu_165_p2);

assign tmp_41_i_i_i_fu_165_p2 = (t_cast_fu_137_p1 - a_assign_8_cast_fu_151_p1);

assign tmp_61_fu_123_p2 = (tmp_i_cast_fu_119_p1 + tmp_68_cast_reg_224);

assign tmp_62_fu_141_p4 = {{v_vec_coeffs_q0[31:23]}};

assign tmp_63_fu_175_p2 = (tmp_i_i_i_fu_155_p4 | 22'd8191);

assign tmp_64_fu_195_p3 = a_assign_9_reg_242[32'd31];

assign tmp_68_cast_fu_103_p1 = tmp_s_fu_95_p3;

assign tmp_69_cast_fu_128_p1 = tmp_61_fu_123_p2;

assign tmp_fu_83_p2 = ((i_reg_61 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_cast_fu_119_p1 = i_i_reg_72;

assign tmp_i_fu_107_p2 = ((i_i_reg_72 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_i_i_cast_cast_fu_202_p3 = ((tmp_64_fu_195_p3[0:0] === 1'b1) ? 32'd8380417 : 32'd0);

assign tmp_i_i_i_fu_155_p4 = {{v_vec_coeffs_q0[31:10]}};

assign tmp_s_fu_95_p3 = {{i_reg_61}, {8'd0}};

assign v_vec_coeffs_d0 = (a_assign_9_reg_242 + tmp_i_i_cast_cast_fu_202_p3);

always @ (posedge ap_clk) begin
    tmp_68_cast_reg_224[7:0] <= 8'b00000000;
    tmp_68_cast_reg_224[11] <= 1'b0;
end

endmodule //polyveck_freeze

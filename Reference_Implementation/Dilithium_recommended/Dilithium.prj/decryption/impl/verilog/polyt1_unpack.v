// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyt1_unpack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_coeffs_address0,
        r_coeffs_ce0,
        r_coeffs_we0,
        r_coeffs_d0,
        r_coeffs_address1,
        r_coeffs_ce1,
        r_coeffs_we1,
        r_coeffs_d1,
        r_coeffs_offset,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        a_offset
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] r_coeffs_address0;
output   r_coeffs_ce0;
output   r_coeffs_we0;
output  [31:0] r_coeffs_d0;
output  [10:0] r_coeffs_address1;
output   r_coeffs_ce1;
output   r_coeffs_we1;
output  [31:0] r_coeffs_d1;
input  [2:0] r_coeffs_offset;
output  [10:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [10:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
input  [10:0] a_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] r_coeffs_address0;
reg r_coeffs_ce0;
reg r_coeffs_we0;
reg[31:0] r_coeffs_d0;
reg[10:0] r_coeffs_address1;
reg r_coeffs_ce1;
reg r_coeffs_we1;
reg[31:0] r_coeffs_d1;
reg[10:0] a_address0;
reg a_ce0;
reg[10:0] a_address1;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_17_fu_293_p2;
reg   [5:0] i_17_reg_843;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_65_fu_299_p1;
reg   [4:0] tmp_65_reg_848;
wire   [0:0] tmp_fu_287_p2;
wire   [7:0] p_shl_fu_303_p3;
reg   [7:0] p_shl_reg_853;
wire   [8:0] tmp_s_fu_315_p2;
reg   [8:0] tmp_s_reg_864;
reg   [6:0] tmp_37_reg_885;
wire    ap_CS_fsm_state3;
reg   [4:0] tmp_45_reg_900;
wire    ap_CS_fsm_state4;
reg   [2:0] tmp_53_reg_915;
wire    ap_CS_fsm_state5;
wire   [10:0] sum9_fu_692_p2;
reg   [10:0] sum9_reg_930;
reg   [0:0] tmp_87_reg_935;
wire    ap_CS_fsm_state6;
reg   [5:0] i_reg_272;
wire    ap_CS_fsm_state7;
wire   [63:0] sum_cast_fu_330_p1;
wire   [63:0] sum2_cast_fu_350_p1;
wire   [63:0] tmp_68_fu_380_p1;
wire   [63:0] sum3_cast_fu_409_p1;
wire   [63:0] sum4_cast_fu_428_p1;
wire   [63:0] tmp_71_fu_461_p1;
wire   [63:0] tmp_74_fu_505_p1;
wire   [63:0] sum5_cast_fu_534_p1;
wire   [63:0] sum6_cast_fu_553_p1;
wire   [63:0] tmp_77_fu_586_p1;
wire   [63:0] tmp_80_fu_630_p1;
wire   [63:0] sum7_cast_fu_659_p1;
wire   [63:0] sum8_cast_fu_678_p1;
wire   [63:0] tmp_83_fu_725_p1;
wire   [63:0] tmp_86_fu_769_p1;
wire   [63:0] sum9_cast_fu_782_p1;
wire   [63:0] tmp_89_fu_810_p1;
wire   [31:0] tmp_36_fu_367_p1;
wire   [31:0] tmp_48_cast_fu_444_p1;
wire   [31:0] tmp_57_cast_fu_488_p1;
wire   [31:0] tmp_66_cast_fu_569_p1;
wire   [31:0] tmp_75_cast_fu_613_p1;
wire   [31:0] tmp_84_cast_fu_708_p1;
wire   [31:0] tmp_93_cast_fu_752_p1;
wire   [31:0] tmp_101_cast_fu_793_p1;
wire   [8:0] p_shl_cast7_fu_311_p1;
wire   [8:0] i_cast9_fu_283_p1;
wire   [10:0] tmp_36_cast_fu_321_p1;
wire   [10:0] sum_fu_325_p2;
wire   [8:0] tmp_35_fu_335_p2;
wire   [10:0] tmp_38_cast_fu_341_p1;
wire   [10:0] sum2_fu_345_p2;
wire   [0:0] tmp_66_fu_355_p1;
wire   [8:0] tmp_9_fu_359_p3;
wire   [10:0] tmp_67_fu_372_p4;
wire   [8:0] tmp_38_fu_395_p2;
wire   [10:0] tmp_44_cast_fu_400_p1;
wire   [10:0] sum3_fu_404_p2;
wire   [8:0] tmp_42_fu_414_p2;
wire   [10:0] tmp_53_cast_fu_419_p1;
wire   [10:0] sum4_fu_423_p2;
wire   [1:0] tmp_69_fu_433_p1;
wire   [8:0] tmp_39_fu_437_p3;
wire   [7:0] tmp_40_fu_449_p2;
wire   [10:0] tmp_70_fu_454_p3;
wire   [2:0] tmp_72_fu_476_p1;
wire   [5:0] tmp_41_fu_466_p4;
wire   [8:0] tmp_43_fu_480_p3;
wire   [7:0] tmp_44_fu_493_p2;
wire   [10:0] tmp_73_fu_498_p3;
wire   [8:0] tmp_46_fu_520_p2;
wire   [10:0] tmp_62_cast_fu_525_p1;
wire   [10:0] sum5_fu_529_p2;
wire   [8:0] tmp_50_fu_539_p2;
wire   [10:0] tmp_71_cast_fu_544_p1;
wire   [10:0] sum6_fu_548_p2;
wire   [3:0] tmp_75_fu_558_p1;
wire   [8:0] tmp_47_fu_562_p3;
wire   [7:0] tmp_48_fu_574_p2;
wire   [10:0] tmp_76_fu_579_p3;
wire   [4:0] tmp_78_fu_601_p1;
wire   [3:0] tmp_49_fu_591_p4;
wire   [8:0] tmp_51_fu_605_p3;
wire   [7:0] tmp_52_fu_618_p2;
wire   [10:0] tmp_79_fu_623_p3;
wire   [8:0] tmp_54_fu_645_p2;
wire   [10:0] tmp_80_cast_fu_650_p1;
wire   [10:0] sum7_fu_654_p2;
wire   [8:0] tmp_58_fu_664_p2;
wire   [10:0] tmp_89_cast_fu_669_p1;
wire   [10:0] sum8_fu_673_p2;
wire   [8:0] tmp_62_fu_683_p2;
wire   [10:0] tmp_98_cast_fu_688_p1;
wire   [5:0] tmp_81_fu_697_p1;
wire   [8:0] tmp_55_fu_701_p3;
wire   [7:0] tmp_56_fu_713_p2;
wire   [10:0] tmp_82_fu_718_p3;
wire   [6:0] tmp_84_fu_740_p1;
wire   [1:0] tmp_57_fu_730_p4;
wire   [8:0] tmp_59_fu_744_p3;
wire   [7:0] tmp_60_fu_757_p2;
wire   [10:0] tmp_85_fu_762_p3;
wire   [8:0] tmp_63_fu_786_p3;
wire   [7:0] tmp_64_fu_798_p2;
wire   [10:0] tmp_88_fu_803_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_272 <= i_17_reg_843;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_272 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_17_reg_843 <= i_17_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_shl_reg_853[7 : 3] <= p_shl_fu_303_p3[7 : 3];
        tmp_65_reg_848 <= tmp_65_fu_299_p1;
        tmp_s_reg_864 <= tmp_s_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sum9_reg_930 <= sum9_fu_692_p2;
        tmp_53_reg_915 <= {{a_q1[7:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_37_reg_885 <= {{a_q1[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_45_reg_900 <= {{a_q1[7:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_87_reg_935 <= a_q1[32'd7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = sum9_cast_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = sum7_cast_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = sum5_cast_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = sum3_cast_fu_409_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address0 = sum_cast_fu_330_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address1 = sum8_cast_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = sum6_cast_fu_553_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = sum4_cast_fu_428_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_address1 = sum2_cast_fu_350_p1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address0 = tmp_86_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address0 = tmp_80_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address0 = tmp_71_fu_461_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_address0 = tmp_68_fu_380_p1;
    end else begin
        r_coeffs_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_address1 = tmp_89_fu_810_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_address1 = tmp_83_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_address1 = tmp_77_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_address1 = tmp_74_fu_505_p1;
    end else begin
        r_coeffs_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_ce0 = 1'b1;
    end else begin
        r_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_ce1 = 1'b1;
    end else begin
        r_coeffs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d0 = tmp_93_cast_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d0 = tmp_75_cast_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d0 = tmp_48_cast_fu_444_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        r_coeffs_d0 = tmp_36_fu_367_p1;
    end else begin
        r_coeffs_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_coeffs_d1 = tmp_101_cast_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        r_coeffs_d1 = tmp_84_cast_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        r_coeffs_d1 = tmp_66_cast_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        r_coeffs_d1 = tmp_57_cast_fu_488_p1;
    end else begin
        r_coeffs_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_we0 = 1'b1;
    end else begin
        r_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        r_coeffs_we1 = 1'b1;
    end else begin
        r_coeffs_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_17_fu_293_p2 = (i_reg_272 + 6'd1);

assign i_cast9_fu_283_p1 = i_reg_272;

assign p_shl_cast7_fu_311_p1 = p_shl_fu_303_p3;

assign p_shl_fu_303_p3 = {{tmp_65_fu_299_p1}, {3'd0}};

assign sum2_cast_fu_350_p1 = sum2_fu_345_p2;

assign sum2_fu_345_p2 = (a_offset + tmp_38_cast_fu_341_p1);

assign sum3_cast_fu_409_p1 = sum3_fu_404_p2;

assign sum3_fu_404_p2 = (a_offset + tmp_44_cast_fu_400_p1);

assign sum4_cast_fu_428_p1 = sum4_fu_423_p2;

assign sum4_fu_423_p2 = (a_offset + tmp_53_cast_fu_419_p1);

assign sum5_cast_fu_534_p1 = sum5_fu_529_p2;

assign sum5_fu_529_p2 = (a_offset + tmp_62_cast_fu_525_p1);

assign sum6_cast_fu_553_p1 = sum6_fu_548_p2;

assign sum6_fu_548_p2 = (a_offset + tmp_71_cast_fu_544_p1);

assign sum7_cast_fu_659_p1 = sum7_fu_654_p2;

assign sum7_fu_654_p2 = (a_offset + tmp_80_cast_fu_650_p1);

assign sum8_cast_fu_678_p1 = sum8_fu_673_p2;

assign sum8_fu_673_p2 = (a_offset + tmp_89_cast_fu_669_p1);

assign sum9_cast_fu_782_p1 = sum9_reg_930;

assign sum9_fu_692_p2 = (a_offset + tmp_98_cast_fu_688_p1);

assign sum_cast_fu_330_p1 = sum_fu_325_p2;

assign sum_fu_325_p2 = (a_offset + tmp_36_cast_fu_321_p1);

assign tmp_101_cast_fu_793_p1 = tmp_63_fu_786_p3;

assign tmp_35_fu_335_p2 = (9'd1 + tmp_s_fu_315_p2);

assign tmp_36_cast_fu_321_p1 = tmp_s_fu_315_p2;

assign tmp_36_fu_367_p1 = tmp_9_fu_359_p3;

assign tmp_38_cast_fu_341_p1 = tmp_35_fu_335_p2;

assign tmp_38_fu_395_p2 = (9'd2 + tmp_s_reg_864);

assign tmp_39_fu_437_p3 = {{tmp_69_fu_433_p1}, {tmp_37_reg_885}};

assign tmp_40_fu_449_p2 = (p_shl_reg_853 | 8'd1);

assign tmp_41_fu_466_p4 = {{a_q0[7:2]}};

assign tmp_42_fu_414_p2 = (9'd3 + tmp_s_reg_864);

assign tmp_43_fu_480_p3 = {{tmp_72_fu_476_p1}, {tmp_41_fu_466_p4}};

assign tmp_44_cast_fu_400_p1 = tmp_38_fu_395_p2;

assign tmp_44_fu_493_p2 = (p_shl_reg_853 | 8'd2);

assign tmp_46_fu_520_p2 = (9'd4 + tmp_s_reg_864);

assign tmp_47_fu_562_p3 = {{tmp_75_fu_558_p1}, {tmp_45_reg_900}};

assign tmp_48_cast_fu_444_p1 = tmp_39_fu_437_p3;

assign tmp_48_fu_574_p2 = (p_shl_reg_853 | 8'd3);

assign tmp_49_fu_591_p4 = {{a_q0[7:4]}};

assign tmp_50_fu_539_p2 = (9'd5 + tmp_s_reg_864);

assign tmp_51_fu_605_p3 = {{tmp_78_fu_601_p1}, {tmp_49_fu_591_p4}};

assign tmp_52_fu_618_p2 = (p_shl_reg_853 | 8'd4);

assign tmp_53_cast_fu_419_p1 = tmp_42_fu_414_p2;

assign tmp_54_fu_645_p2 = (9'd6 + tmp_s_reg_864);

assign tmp_55_fu_701_p3 = {{tmp_81_fu_697_p1}, {tmp_53_reg_915}};

assign tmp_56_fu_713_p2 = (p_shl_reg_853 | 8'd5);

assign tmp_57_cast_fu_488_p1 = tmp_43_fu_480_p3;

assign tmp_57_fu_730_p4 = {{a_q0[7:6]}};

assign tmp_58_fu_664_p2 = (9'd7 + tmp_s_reg_864);

assign tmp_59_fu_744_p3 = {{tmp_84_fu_740_p1}, {tmp_57_fu_730_p4}};

assign tmp_60_fu_757_p2 = (p_shl_reg_853 | 8'd6);

assign tmp_62_cast_fu_525_p1 = tmp_46_fu_520_p2;

assign tmp_62_fu_683_p2 = (9'd8 + tmp_s_reg_864);

assign tmp_63_fu_786_p3 = {{a_q0}, {tmp_87_reg_935}};

assign tmp_64_fu_798_p2 = (p_shl_reg_853 | 8'd7);

assign tmp_65_fu_299_p1 = i_reg_272[4:0];

assign tmp_66_cast_fu_569_p1 = tmp_47_fu_562_p3;

assign tmp_66_fu_355_p1 = a_q1[0:0];

assign tmp_67_fu_372_p4 = {{{r_coeffs_offset}, {tmp_65_reg_848}}, {3'd0}};

assign tmp_68_fu_380_p1 = tmp_67_fu_372_p4;

assign tmp_69_fu_433_p1 = a_q0[1:0];

assign tmp_70_fu_454_p3 = {{r_coeffs_offset}, {tmp_40_fu_449_p2}};

assign tmp_71_cast_fu_544_p1 = tmp_50_fu_539_p2;

assign tmp_71_fu_461_p1 = tmp_70_fu_454_p3;

assign tmp_72_fu_476_p1 = a_q1[2:0];

assign tmp_73_fu_498_p3 = {{r_coeffs_offset}, {tmp_44_fu_493_p2}};

assign tmp_74_fu_505_p1 = tmp_73_fu_498_p3;

assign tmp_75_cast_fu_613_p1 = tmp_51_fu_605_p3;

assign tmp_75_fu_558_p1 = a_q0[3:0];

assign tmp_76_fu_579_p3 = {{r_coeffs_offset}, {tmp_48_fu_574_p2}};

assign tmp_77_fu_586_p1 = tmp_76_fu_579_p3;

assign tmp_78_fu_601_p1 = a_q1[4:0];

assign tmp_79_fu_623_p3 = {{r_coeffs_offset}, {tmp_52_fu_618_p2}};

assign tmp_80_cast_fu_650_p1 = tmp_54_fu_645_p2;

assign tmp_80_fu_630_p1 = tmp_79_fu_623_p3;

assign tmp_81_fu_697_p1 = a_q0[5:0];

assign tmp_82_fu_718_p3 = {{r_coeffs_offset}, {tmp_56_fu_713_p2}};

assign tmp_83_fu_725_p1 = tmp_82_fu_718_p3;

assign tmp_84_cast_fu_708_p1 = tmp_55_fu_701_p3;

assign tmp_84_fu_740_p1 = a_q1[6:0];

assign tmp_85_fu_762_p3 = {{r_coeffs_offset}, {tmp_60_fu_757_p2}};

assign tmp_86_fu_769_p1 = tmp_85_fu_762_p3;

assign tmp_88_fu_803_p3 = {{r_coeffs_offset}, {tmp_64_fu_798_p2}};

assign tmp_89_cast_fu_669_p1 = tmp_58_fu_664_p2;

assign tmp_89_fu_810_p1 = tmp_88_fu_803_p3;

assign tmp_93_cast_fu_752_p1 = tmp_59_fu_744_p3;

assign tmp_98_cast_fu_688_p1 = tmp_62_fu_683_p2;

assign tmp_9_fu_359_p3 = {{tmp_66_fu_355_p1}, {a_q0}};

assign tmp_fu_287_p2 = ((i_reg_272 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_s_fu_315_p2 = (p_shl_cast7_fu_311_p1 + i_cast9_fu_283_p1);

always @ (posedge ap_clk) begin
    p_shl_reg_853[2:0] <= 3'b000;
end

endmodule //polyt1_unpack

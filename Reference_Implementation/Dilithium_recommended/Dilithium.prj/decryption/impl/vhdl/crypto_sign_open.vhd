-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign_open is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_we0 : OUT STD_LOGIC;
    m_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    mlen_ce0 : OUT STD_LOGIC;
    mlen_we0 : OUT STD_LOGIC;
    mlen_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mlen_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sm_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sm_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sm_ce1 : OUT STD_LOGIC;
    sm_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    smlen : IN STD_LOGIC_VECTOR (63 downto 0);
    pk_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pk_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    pk_ce1 : OUT STD_LOGIC;
    pk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign_open is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign_open,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.738250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=58,HLS_SYN_DSP=72,HLS_SYN_FF=14783,HLS_SYN_LUT=63980,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv13_4CD : STD_LOGIC_VECTOR (12 downto 0) := "0010011001101";
    constant ap_const_lv13_A5D : STD_LOGIC_VECTOR (12 downto 0) := "0101001011101";
    constant ap_const_lv64_5C0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010111000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv64_A8D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000101010001101";
    constant ap_const_lv64_FFFFFFFFFFFFF573 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111010101110011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_7FCED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001111111110011101101";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_5C0 : STD_LOGIC_VECTOR (10 downto 0) := "10111000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv12_4CD : STD_LOGIC_VECTOR (11 downto 0) := "010011001101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv14_A8D : STD_LOGIC_VECTOR (13 downto 0) := "00101010001101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv12_A5D : STD_LOGIC_VECTOR (11 downto 0) := "101001011101";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FC7FDFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111100011111111101111111111111";
    constant ap_const_lv55_7FE001 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000011111111110000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFC002 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111111111100000000000010";
    constant ap_const_lv13_A8D : STD_LOGIC_VECTOR (12 downto 0) := "0101010001101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mlen_addr_reg_1523 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_880_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_reg_1534 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_56_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_56_reg_1539 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_33_fu_897_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_33_reg_1552 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum5_i_fu_913_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum5_i_reg_1557 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_i_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_926_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_34_reg_1565 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_157_cast_fu_940_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_157_cast_reg_1570 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i5_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_956_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_9_reg_1581 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_i_i_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_load_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ret_fu_1035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_11_fu_1053_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_cast_fu_1064_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_2_cast_reg_1612 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_10_fu_1074_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_10_reg_1620 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_153_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_35_fu_1100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_35_reg_1633 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sum_cast_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_reg_1638 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_156_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_36_fu_1123_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_36_reg_1651 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_i_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inlen_assign_fu_1149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_assign_reg_1661 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_37_fu_1162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_38_fu_1174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_38_reg_1677 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_39_fu_1186_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_39_reg_1685 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_159_fu_1192_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_159_reg_1690 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_160_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_160_reg_1695 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_161_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_reg_1705 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_40_fu_1220_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_40_reg_1712 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_168_cast_fu_1234_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_168_cast_reg_1717 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i9_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_1244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_12_reg_1725 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal t1_vec_coeffs_addr_reg_1730 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i2_fu_1238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_41_fu_1277_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_41_reg_1738 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal tmp_172_cast_fu_1291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_172_cast_reg_1743 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_42_fu_1301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_42_reg_1751 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_44_fu_1313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_44_reg_1759 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_176_cast_fu_1333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_cast_reg_1764 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chat_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal chat_coeffs_load_reg_1779 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal t1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_vec_coeffs_load_1_reg_1784 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_1344_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_reg_1789 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_169_fu_1350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_169_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_27_fu_1354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_27_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal t_28_fu_1362_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_28_reg_1804 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal i_43_fu_1393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_43_reg_1812 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal tmp_175_cast_fu_1407_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_175_cast_reg_1817 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i2_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_13_fu_1417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_13_reg_1825 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp1_vec_coeffs_addr_reg_1830 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i4_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_i_i_fu_1444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_144_i_i_reg_1840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_45_fu_1456_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_45_reg_1848 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_6_cast_fu_1466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast_reg_1853 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal i_46_fu_1476_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_46_reg_1861 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_171_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_32_fu_1503_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal output_assign_2_ce0 : STD_LOGIC;
    signal output_assign_2_we0 : STD_LOGIC;
    signal s_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_1_ce0 : STD_LOGIC;
    signal s_1_we0 : STD_LOGIC;
    signal s_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_1_ce1 : STD_LOGIC;
    signal s_1_we1 : STD_LOGIC;
    signal s_1_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_assign_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_assign_ce0 : STD_LOGIC;
    signal output_assign_we0 : STD_LOGIC;
    signal output_assign_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rho_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rho_ce0 : STD_LOGIC;
    signal rho_we0 : STD_LOGIC;
    signal rho_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal chat_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal chat_coeffs_ce0 : STD_LOGIC;
    signal chat_coeffs_we0 : STD_LOGIC;
    signal chat_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mat_vec_coeffs_ce0 : STD_LOGIC;
    signal mat_vec_coeffs_we0 : STD_LOGIC;
    signal mat_vec_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce0 : STD_LOGIC;
    signal z_vec_coeffs_we0 : STD_LOGIC;
    signal z_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal t1_vec_coeffs_ce0 : STD_LOGIC;
    signal t1_vec_coeffs_we0 : STD_LOGIC;
    signal t1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_vec_coeffs_ce1 : STD_LOGIC;
    signal t1_vec_coeffs_we1 : STD_LOGIC;
    signal h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_vec_coeffs_ce0 : STD_LOGIC;
    signal h_vec_coeffs_we0 : STD_LOGIC;
    signal h_vec_coeffs_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_vec_coeffs_ce0 : STD_LOGIC;
    signal tmp1_vec_coeffs_we0 : STD_LOGIC;
    signal tmp1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_vec_coeffs_ce1 : STD_LOGIC;
    signal tmp1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_vec_coeffs_ce0 : STD_LOGIC;
    signal tmp2_vec_coeffs_we0 : STD_LOGIC;
    signal tmp2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_keccak_absorb_fu_757_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_757_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_757_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_757_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_757_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_757_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_757_m_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_keccak_absorb_fu_757_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_757_m_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_keccak_absorb_fu_757_mlen : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_expand_mat_fu_771_ap_start : STD_LOGIC;
    signal grp_expand_mat_fu_771_ap_done : STD_LOGIC;
    signal grp_expand_mat_fu_771_ap_idle : STD_LOGIC;
    signal grp_expand_mat_fu_771_ap_ready : STD_LOGIC;
    signal grp_expand_mat_fu_771_mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_expand_mat_fu_771_mat_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_expand_mat_fu_771_mat_vec_coeffs_we0 : STD_LOGIC;
    signal grp_expand_mat_fu_771_mat_vec_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_expand_mat_fu_771_rho_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_expand_mat_fu_771_rho_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_h_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_h_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_h_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_h_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_779_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_779_s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_unpack_sig_fu_787_ap_start : STD_LOGIC;
    signal grp_unpack_sig_fu_787_ap_done : STD_LOGIC;
    signal grp_unpack_sig_fu_787_ap_idle : STD_LOGIC;
    signal grp_unpack_sig_fu_787_ap_ready : STD_LOGIC;
    signal grp_unpack_sig_fu_787_z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sig_fu_787_z_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_z_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_z_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sig_fu_787_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_unpack_sig_fu_787_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_h_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_h_vec_coeffs_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_unpack_sig_fu_787_c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sig_fu_787_c_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_c_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_c_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_unpack_sig_fu_787_sig_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_unpack_sig_fu_787_sig_ce0 : STD_LOGIC;
    signal grp_unpack_sig_fu_787_sig_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_unpack_sig_fu_787_sig_ce1 : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_ap_start : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_ap_done : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_ap_idle : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_ap_ready : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_p_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_invntt_frominvmont_fu_796_p_ce0 : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_p_we0 : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_796_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_frominvmont_fu_796_p_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_invntt_frominvmont_fu_796_p_ce1 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_ap_start : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_ap_done : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_ap_idle : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_ap_ready : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_w_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyvecl_pointwise_a_fu_805_w_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_w_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_w_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_ntt_fu_814_ap_start : STD_LOGIC;
    signal grp_ntt_fu_814_ap_done : STD_LOGIC;
    signal grp_ntt_fu_814_ap_idle : STD_LOGIC;
    signal grp_ntt_fu_814_ap_ready : STD_LOGIC;
    signal grp_ntt_fu_814_p_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_ntt_fu_814_p_ce0 : STD_LOGIC;
    signal grp_ntt_fu_814_p_we0 : STD_LOGIC;
    signal grp_ntt_fu_814_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_1_fu_823_ap_start : STD_LOGIC;
    signal grp_ntt_1_fu_823_ap_done : STD_LOGIC;
    signal grp_ntt_1_fu_823_ap_idle : STD_LOGIC;
    signal grp_ntt_1_fu_823_ap_ready : STD_LOGIC;
    signal grp_ntt_1_fu_823_p_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_1_fu_823_p_ce0 : STD_LOGIC;
    signal grp_ntt_1_fu_823_p_we0 : STD_LOGIC;
    signal grp_ntt_1_fu_823_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_2_fu_832_ap_start : STD_LOGIC;
    signal grp_ntt_2_fu_832_ap_done : STD_LOGIC;
    signal grp_ntt_2_fu_832_ap_idle : STD_LOGIC;
    signal grp_ntt_2_fu_832_ap_ready : STD_LOGIC;
    signal grp_ntt_2_fu_832_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_2_fu_832_p_ce0 : STD_LOGIC;
    signal grp_ntt_2_fu_832_p_we0 : STD_LOGIC;
    signal grp_ntt_2_fu_832_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyt1_unpack_fu_839_ap_start : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_ap_done : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_ap_idle : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_ap_ready : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_r_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyt1_unpack_fu_839_r_coeffs_ce0 : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_r_coeffs_we0 : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_r_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyt1_unpack_fu_839_r_coeffs_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyt1_unpack_fu_839_r_coeffs_ce1 : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_r_coeffs_we1 : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_r_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyt1_unpack_fu_839_a_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyt1_unpack_fu_839_a_ce0 : STD_LOGIC;
    signal grp_polyt1_unpack_fu_839_a_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyt1_unpack_fu_839_a_ce1 : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_ap_start : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_ap_done : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_ap_idle : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_ap_ready : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_w_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_use_hint_fu_849_w_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_w_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_w_vec_coeffs_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_polyveck_use_hint_fu_849_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_use_hint_fu_849_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_use_hint_fu_849_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_use_hint_fu_849_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_ap_start : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_ap_done : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_ap_idle : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_ap_ready : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_freeze_fu_856_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_freeze_fu_856_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_468 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_i_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_i3_reg_491 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ret_i_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i_reg_514 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_160_i_i_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_i_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_538 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_151_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_549 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_3_reg_560 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i4_reg_571 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_i5_reg_583 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond_i1_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i6_reg_594 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal i_4_reg_606 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_i8_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_157_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i7_reg_629 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_i_i1_reg_640 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_i8_reg_651 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_5_reg_663 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i1_reg_674 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal tmp_166_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i9_reg_685 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i2_reg_696 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_i2_reg_707 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal i_6_reg_719 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_reg_730 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_absorb_fu_757_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_expand_mat_fu_771_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_squeezeblocks_2_fu_779_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_unpack_sig_fu_787_ap_start_reg : STD_LOGIC := '0';
    signal grp_invntt_frominvmont_fu_796_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i4_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_polyvecl_pointwise_a_fu_805_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_fu_814_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_1_fu_823_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_2_fu_832_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_polyt1_unpack_fu_839_ap_start_reg : STD_LOGIC := '0';
    signal grp_polyveck_use_hint_fu_849_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_polyveck_freeze_fu_856_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal tmp_159_cast_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast1_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_1144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_169_cast_fu_1259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_71_fu_1319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_177_cast_fu_1432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_1488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_1493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_867_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal extLd_fu_1209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_164_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_fu_903_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_fu_932_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_fu_962_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_154_fu_966_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_fu_976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_149_fu_981_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_i_i_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_25_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_26_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_fu_1015_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_1025_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_92_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum4_fu_1080_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_155_fu_1090_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_fu_1106_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i6_cast_fu_1134_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_i_fu_1138_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_162_fu_1226_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i2_cast_fu_1250_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_163_fu_1254_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_165_fu_1283_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i9_cast_fu_1324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_168_fu_1328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_fu_1344_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_1344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_28_fu_1362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_38_cast_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_29_fu_1371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_167_fu_1399_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i4_cast_fu_1423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_170_fu_1427_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_143_i_i_fu_1438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_cast1_fu_1462_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum1_fu_1482_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal a_assign_fu_1344_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_fu_1344_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_28_fu_1362_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component keccak_absorb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        mlen : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component expand_mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        mat_vec_coeffs_ce0 : OUT STD_LOGIC;
        mat_vec_coeffs_we0 : OUT STD_LOGIC;
        mat_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        rho_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        rho_ce0 : OUT STD_LOGIC;
        rho_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keccak_squeezeblocks_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component unpack_sig IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        z_vec_coeffs_ce0 : OUT STD_LOGIC;
        z_vec_coeffs_we0 : OUT STD_LOGIC;
        z_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_we0 : OUT STD_LOGIC;
        h_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_coeffs_ce0 : OUT STD_LOGIC;
        c_coeffs_we0 : OUT STD_LOGIC;
        c_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_ce0 : OUT STD_LOGIC;
        sig_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sig_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        sig_ce1 : OUT STD_LOGIC;
        sig_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component invntt_frominvmont IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce1 : OUT STD_LOGIC;
        p_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component polyvecl_pointwise_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w_coeffs_ce0 : OUT STD_LOGIC;
        w_coeffs_we0 : OUT STD_LOGIC;
        w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ntt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyt1_unpack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_coeffs_ce0 : OUT STD_LOGIC;
        r_coeffs_we0 : OUT STD_LOGIC;
        r_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        r_coeffs_ce1 : OUT STD_LOGIC;
        r_coeffs_we1 : OUT STD_LOGIC;
        r_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        r_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component polyveck_use_hint IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w_vec_coeffs_ce0 : OUT STD_LOGIC;
        w_vec_coeffs_we0 : OUT STD_LOGIC;
        w_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component polyveck_freeze IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_open_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_open_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component crypto_sign_open_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_open_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_open_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component polyvecl_pointwisdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_open_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component crypto_sign_open_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_open_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_open_ocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component crypto_sign_open_pcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component crypto_sign_open_qcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_open_rcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    output_assign_2_U : component crypto_sign_open_fYi
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_keccak_squeezeblocks_2_fu_779_h_address0,
        ce0 => output_assign_2_ce0,
        we0 => output_assign_2_we0,
        d0 => grp_keccak_squeezeblocks_2_fu_779_h_d0);

    s_1_U : component crypto_sign_open_g8j
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_1_address0,
        ce0 => s_1_ce0,
        we0 => s_1_we0,
        d0 => s_1_d0,
        q0 => s_1_q0,
        address1 => s_1_address1,
        ce1 => s_1_ce1,
        we1 => s_1_we1,
        d1 => s_1_d1,
        q1 => s_1_q1);

    output_assign_U : component crypto_sign_open_hbi
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_assign_address0,
        ce0 => output_assign_ce0,
        we0 => output_assign_we0,
        d0 => grp_keccak_squeezeblocks_2_fu_779_h_d0,
        q0 => output_assign_q0);

    s_U : component crypto_sign_open_g8j
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => s_d1,
        q1 => s_q1);

    rho_U : component crypto_sign_open_ibs
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rho_address0,
        ce0 => rho_ce0,
        we0 => rho_we0,
        d0 => pk_q0,
        q0 => rho_q0);

    c_coeffs_U : component crypto_sign_open_jbC
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => grp_unpack_sig_fu_787_c_coeffs_d0,
        q0 => c_coeffs_q0);

    chat_coeffs_U : component polyvecl_pointwisdEe
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => chat_coeffs_address0,
        ce0 => chat_coeffs_ce0,
        we0 => chat_coeffs_we0,
        d0 => chat_coeffs_d0,
        q0 => chat_coeffs_q0);

    mat_vec_coeffs_U : component crypto_sign_open_lbW
    generic map (
        DataWidth => 23,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_vec_coeffs_address0,
        ce0 => mat_vec_coeffs_ce0,
        we0 => mat_vec_coeffs_we0,
        d0 => grp_expand_mat_fu_771_mat_vec_coeffs_d0,
        q0 => mat_vec_coeffs_q0);

    z_vec_coeffs_U : component crypto_sign_open_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_vec_coeffs_address0,
        ce0 => z_vec_coeffs_ce0,
        we0 => z_vec_coeffs_we0,
        d0 => z_vec_coeffs_d0,
        q0 => z_vec_coeffs_q0);

    t1_vec_coeffs_U : component crypto_sign_open_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t1_vec_coeffs_address0,
        ce0 => t1_vec_coeffs_ce0,
        we0 => t1_vec_coeffs_we0,
        d0 => t1_vec_coeffs_d0,
        q0 => t1_vec_coeffs_q0,
        address1 => grp_polyt1_unpack_fu_839_r_coeffs_address1,
        ce1 => t1_vec_coeffs_ce1,
        we1 => t1_vec_coeffs_we1,
        d1 => grp_polyt1_unpack_fu_839_r_coeffs_d1);

    w1_vec_coeffs_U : component crypto_sign_open_ocq
    generic map (
        DataWidth => 6,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_address0,
        ce0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_ce0,
        we0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_we0,
        d0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_d0);

    h_vec_coeffs_U : component crypto_sign_open_pcA
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_vec_coeffs_address0,
        ce0 => h_vec_coeffs_ce0,
        we0 => h_vec_coeffs_we0,
        d0 => grp_unpack_sig_fu_787_h_vec_coeffs_d0,
        q0 => h_vec_coeffs_q0);

    tmp1_vec_coeffs_U : component crypto_sign_open_qcK
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp1_vec_coeffs_address0,
        ce0 => tmp1_vec_coeffs_ce0,
        we0 => tmp1_vec_coeffs_we0,
        d0 => tmp1_vec_coeffs_d0,
        q0 => tmp1_vec_coeffs_q0,
        address1 => grp_invntt_frominvmont_fu_796_p_address1,
        ce1 => tmp1_vec_coeffs_ce1,
        q1 => tmp1_vec_coeffs_q1);

    tmp2_vec_coeffs_U : component crypto_sign_open_rcU
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp2_vec_coeffs_address0,
        ce0 => tmp2_vec_coeffs_ce0,
        we0 => tmp2_vec_coeffs_we0,
        d0 => tmp2_vec_coeffs_d0,
        q0 => tmp2_vec_coeffs_q0);

    grp_keccak_absorb_fu_757 : component keccak_absorb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_fu_757_ap_start,
        ap_done => grp_keccak_absorb_fu_757_ap_done,
        ap_idle => grp_keccak_absorb_fu_757_ap_idle,
        ap_ready => grp_keccak_absorb_fu_757_ap_ready,
        s_address0 => grp_keccak_absorb_fu_757_s_address0,
        s_ce0 => grp_keccak_absorb_fu_757_s_ce0,
        s_we0 => grp_keccak_absorb_fu_757_s_we0,
        s_d0 => grp_keccak_absorb_fu_757_s_d0,
        s_q0 => grp_keccak_absorb_fu_757_s_q0,
        s_address1 => grp_keccak_absorb_fu_757_s_address1,
        s_ce1 => grp_keccak_absorb_fu_757_s_ce1,
        s_we1 => grp_keccak_absorb_fu_757_s_we1,
        s_d1 => grp_keccak_absorb_fu_757_s_d1,
        s_q1 => grp_keccak_absorb_fu_757_s_q1,
        m_address0 => grp_keccak_absorb_fu_757_m_address0,
        m_ce0 => grp_keccak_absorb_fu_757_m_ce0,
        m_q0 => m_q0,
        m_offset => grp_keccak_absorb_fu_757_m_offset,
        mlen => grp_keccak_absorb_fu_757_mlen);

    grp_expand_mat_fu_771 : component expand_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_expand_mat_fu_771_ap_start,
        ap_done => grp_expand_mat_fu_771_ap_done,
        ap_idle => grp_expand_mat_fu_771_ap_idle,
        ap_ready => grp_expand_mat_fu_771_ap_ready,
        mat_vec_coeffs_address0 => grp_expand_mat_fu_771_mat_vec_coeffs_address0,
        mat_vec_coeffs_ce0 => grp_expand_mat_fu_771_mat_vec_coeffs_ce0,
        mat_vec_coeffs_we0 => grp_expand_mat_fu_771_mat_vec_coeffs_we0,
        mat_vec_coeffs_d0 => grp_expand_mat_fu_771_mat_vec_coeffs_d0,
        rho_address0 => grp_expand_mat_fu_771_rho_address0,
        rho_ce0 => grp_expand_mat_fu_771_rho_ce0,
        rho_q0 => rho_q0);

    grp_keccak_squeezeblocks_2_fu_779 : component keccak_squeezeblocks_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_2_fu_779_ap_start,
        ap_done => grp_keccak_squeezeblocks_2_fu_779_ap_done,
        ap_idle => grp_keccak_squeezeblocks_2_fu_779_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_2_fu_779_ap_ready,
        h_address0 => grp_keccak_squeezeblocks_2_fu_779_h_address0,
        h_ce0 => grp_keccak_squeezeblocks_2_fu_779_h_ce0,
        h_we0 => grp_keccak_squeezeblocks_2_fu_779_h_we0,
        h_d0 => grp_keccak_squeezeblocks_2_fu_779_h_d0,
        s_address0 => grp_keccak_squeezeblocks_2_fu_779_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_2_fu_779_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_2_fu_779_s_we0,
        s_d0 => grp_keccak_squeezeblocks_2_fu_779_s_d0,
        s_q0 => grp_keccak_squeezeblocks_2_fu_779_s_q0,
        s_address1 => grp_keccak_squeezeblocks_2_fu_779_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_2_fu_779_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_2_fu_779_s_we1,
        s_d1 => grp_keccak_squeezeblocks_2_fu_779_s_d1,
        s_q1 => grp_keccak_squeezeblocks_2_fu_779_s_q1);

    grp_unpack_sig_fu_787 : component unpack_sig
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unpack_sig_fu_787_ap_start,
        ap_done => grp_unpack_sig_fu_787_ap_done,
        ap_idle => grp_unpack_sig_fu_787_ap_idle,
        ap_ready => grp_unpack_sig_fu_787_ap_ready,
        z_vec_coeffs_address0 => grp_unpack_sig_fu_787_z_vec_coeffs_address0,
        z_vec_coeffs_ce0 => grp_unpack_sig_fu_787_z_vec_coeffs_ce0,
        z_vec_coeffs_we0 => grp_unpack_sig_fu_787_z_vec_coeffs_we0,
        z_vec_coeffs_d0 => grp_unpack_sig_fu_787_z_vec_coeffs_d0,
        h_vec_coeffs_address0 => grp_unpack_sig_fu_787_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_unpack_sig_fu_787_h_vec_coeffs_ce0,
        h_vec_coeffs_we0 => grp_unpack_sig_fu_787_h_vec_coeffs_we0,
        h_vec_coeffs_d0 => grp_unpack_sig_fu_787_h_vec_coeffs_d0,
        c_coeffs_address0 => grp_unpack_sig_fu_787_c_coeffs_address0,
        c_coeffs_ce0 => grp_unpack_sig_fu_787_c_coeffs_ce0,
        c_coeffs_we0 => grp_unpack_sig_fu_787_c_coeffs_we0,
        c_coeffs_d0 => grp_unpack_sig_fu_787_c_coeffs_d0,
        sig_address0 => grp_unpack_sig_fu_787_sig_address0,
        sig_ce0 => grp_unpack_sig_fu_787_sig_ce0,
        sig_q0 => sm_q0,
        sig_address1 => grp_unpack_sig_fu_787_sig_address1,
        sig_ce1 => grp_unpack_sig_fu_787_sig_ce1,
        sig_q1 => sm_q1);

    grp_invntt_frominvmont_fu_796 : component invntt_frominvmont
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invntt_frominvmont_fu_796_ap_start,
        ap_done => grp_invntt_frominvmont_fu_796_ap_done,
        ap_idle => grp_invntt_frominvmont_fu_796_ap_idle,
        ap_ready => grp_invntt_frominvmont_fu_796_ap_ready,
        p_address0 => grp_invntt_frominvmont_fu_796_p_address0,
        p_ce0 => grp_invntt_frominvmont_fu_796_p_ce0,
        p_we0 => grp_invntt_frominvmont_fu_796_p_we0,
        p_d0 => grp_invntt_frominvmont_fu_796_p_d0,
        p_q0 => tmp1_vec_coeffs_q0,
        p_address1 => grp_invntt_frominvmont_fu_796_p_address1,
        p_ce1 => grp_invntt_frominvmont_fu_796_p_ce1,
        p_q1 => tmp1_vec_coeffs_q1,
        p_offset => i_i2_reg_707);

    grp_polyvecl_pointwise_a_fu_805 : component polyvecl_pointwise_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_pointwise_a_fu_805_ap_start,
        ap_done => grp_polyvecl_pointwise_a_fu_805_ap_done,
        ap_idle => grp_polyvecl_pointwise_a_fu_805_ap_idle,
        ap_ready => grp_polyvecl_pointwise_a_fu_805_ap_ready,
        w_coeffs_address0 => grp_polyvecl_pointwise_a_fu_805_w_coeffs_address0,
        w_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_805_w_coeffs_ce0,
        w_coeffs_we0 => grp_polyvecl_pointwise_a_fu_805_w_coeffs_we0,
        w_coeffs_d0 => grp_polyvecl_pointwise_a_fu_805_w_coeffs_d0,
        w_coeffs_q0 => tmp1_vec_coeffs_q0,
        w_coeffs_offset => i_4_reg_606,
        u_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => mat_vec_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => z_vec_coeffs_q0);

    grp_ntt_fu_814 : component ntt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_fu_814_ap_start,
        ap_done => grp_ntt_fu_814_ap_done,
        ap_idle => grp_ntt_fu_814_ap_idle,
        ap_ready => grp_ntt_fu_814_ap_ready,
        p_address0 => grp_ntt_fu_814_p_address0,
        p_ce0 => grp_ntt_fu_814_p_ce0,
        p_we0 => grp_ntt_fu_814_p_we0,
        p_d0 => grp_ntt_fu_814_p_d0,
        p_q0 => t1_vec_coeffs_q0,
        p_offset => i_i8_reg_651);

    grp_ntt_1_fu_823 : component ntt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_1_fu_823_ap_start,
        ap_done => grp_ntt_1_fu_823_ap_done,
        ap_idle => grp_ntt_1_fu_823_ap_idle,
        ap_ready => grp_ntt_1_fu_823_ap_ready,
        p_address0 => grp_ntt_1_fu_823_p_address0,
        p_ce0 => grp_ntt_1_fu_823_p_ce0,
        p_we0 => grp_ntt_1_fu_823_p_we0,
        p_d0 => grp_ntt_1_fu_823_p_d0,
        p_q0 => z_vec_coeffs_q0,
        p_offset => i_i6_reg_594);

    grp_ntt_2_fu_832 : component ntt_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_2_fu_832_ap_start,
        ap_done => grp_ntt_2_fu_832_ap_done,
        ap_idle => grp_ntt_2_fu_832_ap_idle,
        ap_ready => grp_ntt_2_fu_832_ap_ready,
        p_address0 => grp_ntt_2_fu_832_p_address0,
        p_ce0 => grp_ntt_2_fu_832_p_ce0,
        p_we0 => grp_ntt_2_fu_832_p_we0,
        p_d0 => grp_ntt_2_fu_832_p_d0,
        p_q0 => chat_coeffs_q0);

    grp_polyt1_unpack_fu_839 : component polyt1_unpack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyt1_unpack_fu_839_ap_start,
        ap_done => grp_polyt1_unpack_fu_839_ap_done,
        ap_idle => grp_polyt1_unpack_fu_839_ap_idle,
        ap_ready => grp_polyt1_unpack_fu_839_ap_ready,
        r_coeffs_address0 => grp_polyt1_unpack_fu_839_r_coeffs_address0,
        r_coeffs_ce0 => grp_polyt1_unpack_fu_839_r_coeffs_ce0,
        r_coeffs_we0 => grp_polyt1_unpack_fu_839_r_coeffs_we0,
        r_coeffs_d0 => grp_polyt1_unpack_fu_839_r_coeffs_d0,
        r_coeffs_address1 => grp_polyt1_unpack_fu_839_r_coeffs_address1,
        r_coeffs_ce1 => grp_polyt1_unpack_fu_839_r_coeffs_ce1,
        r_coeffs_we1 => grp_polyt1_unpack_fu_839_r_coeffs_we1,
        r_coeffs_d1 => grp_polyt1_unpack_fu_839_r_coeffs_d1,
        r_coeffs_offset => i_1_i_reg_479,
        a_address0 => grp_polyt1_unpack_fu_839_a_address0,
        a_ce0 => grp_polyt1_unpack_fu_839_a_ce0,
        a_q0 => pk_q0,
        a_address1 => grp_polyt1_unpack_fu_839_a_address1,
        a_ce1 => grp_polyt1_unpack_fu_839_a_ce1,
        a_q1 => pk_q1,
        a_offset => sum5_i_reg_1557);

    grp_polyveck_use_hint_fu_849 : component polyveck_use_hint
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_use_hint_fu_849_ap_start,
        ap_done => grp_polyveck_use_hint_fu_849_ap_done,
        ap_idle => grp_polyveck_use_hint_fu_849_ap_idle,
        ap_ready => grp_polyveck_use_hint_fu_849_ap_ready,
        w_vec_coeffs_address0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_address0,
        w_vec_coeffs_ce0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_ce0,
        w_vec_coeffs_we0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_we0,
        w_vec_coeffs_d0 => grp_polyveck_use_hint_fu_849_w_vec_coeffs_d0,
        u_vec_coeffs_address0 => grp_polyveck_use_hint_fu_849_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyveck_use_hint_fu_849_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => tmp1_vec_coeffs_q0,
        h_vec_coeffs_address0 => grp_polyveck_use_hint_fu_849_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_polyveck_use_hint_fu_849_h_vec_coeffs_ce0,
        h_vec_coeffs_q0 => h_vec_coeffs_q0);

    grp_polyveck_freeze_fu_856 : component polyveck_freeze
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_freeze_fu_856_ap_start,
        ap_done => grp_polyveck_freeze_fu_856_ap_done,
        ap_idle => grp_polyveck_freeze_fu_856_ap_idle,
        ap_ready => grp_polyveck_freeze_fu_856_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_freeze_fu_856_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_freeze_fu_856_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_freeze_fu_856_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_freeze_fu_856_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => tmp1_vec_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_expand_mat_fu_771_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_expand_mat_fu_771_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i1_fu_1156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    grp_expand_mat_fu_771_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expand_mat_fu_771_ap_ready = ap_const_logic_1)) then 
                    grp_expand_mat_fu_771_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_invntt_frominvmont_fu_796_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invntt_frominvmont_fu_796_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (tmp_i4_fu_1450_p2 = ap_const_lv1_0))) then 
                    grp_invntt_frominvmont_fu_796_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invntt_frominvmont_fu_796_ap_ready = ap_const_logic_1)) then 
                    grp_invntt_frominvmont_fu_796_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_fu_757_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_fu_757_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_156_fu_1094_p2 = ap_const_lv1_0)))) then 
                    grp_keccak_absorb_fu_757_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_fu_757_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_fu_757_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_2_fu_779_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_2_fu_779_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_keccak_squeezeblocks_2_fu_779_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_2_fu_779_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_2_fu_779_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_1_fu_823_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_1_fu_823_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (tmp_i8_fu_1168_p2 = ap_const_lv1_0))) then 
                    grp_ntt_1_fu_823_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_1_fu_823_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_1_fu_823_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_2_fu_832_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_2_fu_832_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_ntt_2_fu_832_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_2_fu_832_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_2_fu_832_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_fu_814_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_fu_814_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_i1_fu_1271_p2 = ap_const_lv1_0))) then 
                    grp_ntt_fu_814_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_fu_814_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_fu_814_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyt1_unpack_fu_839_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyt1_unpack_fu_839_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_33_i_fu_891_p2 = ap_const_lv1_0))) then 
                    grp_polyt1_unpack_fu_839_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyt1_unpack_fu_839_ap_ready = ap_const_logic_1)) then 
                    grp_polyt1_unpack_fu_839_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_freeze_fu_856_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_freeze_fu_856_ap_start_reg <= ap_const_logic_0;
            else
                if ((((tmp_i4_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54)) or ((tmp_i2_fu_1387_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
                    grp_polyveck_freeze_fu_856_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_freeze_fu_856_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_freeze_fu_856_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_use_hint_fu_849_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_use_hint_fu_849_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_polyveck_use_hint_fu_849_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_use_hint_fu_849_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_use_hint_fu_849_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_pointwise_a_fu_805_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_pointwise_a_fu_805_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (tmp_157_fu_1180_p2 = ap_const_lv1_0))) then 
                    grp_polyvecl_pointwise_a_fu_805_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_pointwise_a_fu_805_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_pointwise_a_fu_805_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unpack_sig_fu_787_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unpack_sig_fu_787_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_33_i_fu_891_p2 = ap_const_lv1_1))) then 
                    grp_unpack_sig_fu_787_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unpack_sig_fu_787_ap_ready = ap_const_logic_1)) then 
                    grp_unpack_sig_fu_787_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_874_p2 = ap_const_lv1_1))) then 
                i_1_i_reg_479 <= ap_const_lv3_0;
            elsif (((grp_polyt1_unpack_fu_839_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_i_reg_479 <= i_33_reg_1552;
            end if; 
        end if;
    end process;

    i_1_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_1048_p2 = ap_const_lv1_0))) then 
                i_1_reg_538 <= i_11_fu_1053_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_1) and (tmp_151_fu_944_p2 = ap_const_lv1_0))) then 
                i_1_reg_538 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_2_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_151_fu_944_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_1))) then 
                i_2_reg_549 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_2_reg_549 <= i_10_reg_1620;
            end if; 
        end if;
    end process;

    i_3_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_153_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_3_reg_560 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_560 <= i_35_reg_1633;
            end if; 
        end if;
    end process;

    i_4_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i8_fu_1168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_4_reg_606 <= ap_const_lv3_0;
            elsif (((grp_polyvecl_pointwise_a_fu_805_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_4_reg_606 <= i_39_reg_1685;
            end if; 
        end if;
    end process;

    i_5_reg_663_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i1_fu_1271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                i_5_reg_663 <= ap_const_lv3_0;
            elsif (((tmp_i3_fu_1307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_5_reg_663 <= i_42_reg_1751;
            end if; 
        end if;
    end process;

    i_6_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                i_6_reg_719 <= i_46_reg_1861;
            elsif (((grp_polyveck_use_hint_fu_849_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                i_6_reg_719 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_i1_reg_674_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_166_fu_1295_p2 = ap_const_lv1_0))) then 
                i_i1_reg_674 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                i_i1_reg_674 <= i_44_reg_1759;
            end if; 
        end if;
    end process;

    i_i2_reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_invntt_frominvmont_fu_796_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                i_i2_reg_707 <= i_45_reg_1848;
            elsif (((grp_polyveck_freeze_fu_856_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                i_i2_reg_707 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i3_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i3_reg_491 <= i_34_reg_1565;
            elsif (((grp_unpack_sig_fu_787_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_i3_reg_491 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i4_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_i4_reg_571 <= i_36_reg_1651;
            elsif (((grp_keccak_squeezeblocks_2_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_i4_reg_571 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i5_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond_i1_fu_1156_p2 = ap_const_lv1_0))) then 
                i_i5_reg_583 <= i_37_fu_1162_p2;
            elsif (((grp_keccak_squeezeblocks_2_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_i5_reg_583 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_i6_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_ntt_1_fu_823_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i_i6_reg_594 <= i_38_reg_1677;
            elsif (((grp_expand_mat_fu_771_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_i6_reg_594 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i7_reg_629_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i2_fu_1238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_i7_reg_629 <= i_40_reg_1712;
            elsif (((grp_ntt_2_fu_832_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_i7_reg_629 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i8_reg_651_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i9_fu_1214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_i8_reg_651 <= ap_const_lv3_0;
            elsif (((grp_ntt_fu_814_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                i_i8_reg_651 <= i_41_reg_1738;
            end if; 
        end if;
    end process;

    i_i9_reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_166_fu_1295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_i9_reg_685 <= ap_const_lv3_0;
            elsif (((tmp_i_i4_fu_1411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i_i9_reg_685 <= i_43_reg_1812;
            end if; 
        end if;
    end process;

    i_i_i1_reg_640_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_i_i1_reg_640 <= i_12_reg_1725;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i9_fu_1214_p2 = ap_const_lv1_0))) then 
                i_i_i1_reg_640 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i2_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_i_i2_reg_696 <= i_13_reg_1825;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (tmp_i2_fu_1387_p2 = ap_const_lv1_0))) then 
                i_i_i2_reg_696 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_160_i_i_fu_1009_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_i_i_reg_514 <= i_9_reg_1581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_0))) then 
                i_i_i_reg_514 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_468 <= i_8_reg_1534;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0))) then 
                i_i_reg_468 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_730_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (exitcond1_fu_1498_p2 = ap_const_lv1_0))) then 
                i_reg_730 <= i_32_fu_1503_p2;
            elsif (((ap_start = ap_const_logic_1) and (tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_730 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    p_0_i_i_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_160_i_i_fu_1009_p2 = ap_const_lv1_0))) then 
                p_0_i_i_reg_525 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_i_i_fu_950_p2 = ap_const_lv1_1))) then 
                p_0_i_i_reg_525 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    p_0_reg_741_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond1_fu_1498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((exitcond_fu_1048_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                p_0_reg_741 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (tmp_171_fu_1470_p2 = ap_const_lv1_0))) then 
                p_0_reg_741 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    ret_i_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ret_i_reg_502 <= ret_fu_1035_p3;
            elsif (((grp_unpack_sig_fu_787_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ret_i_reg_502 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_158_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_157_fu_1180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                tmp_158_reg_618 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state34) and (tmp_161_reg_1705 = ap_const_lv1_0))) then 
                tmp_158_reg_618 <= tmp_159_reg_1690;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                a_assign_reg_1789 <= a_assign_fu_1344_p2;
                tmp_169_reg_1794 <= tmp_169_fu_1350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                chat_coeffs_load_reg_1779 <= chat_coeffs_q0;
                t1_vec_coeffs_load_1_reg_1784 <= t1_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_10_reg_1620 <= i_10_fu_1074_p2;
                    i_2_cast_reg_1612(10 downto 0) <= i_2_cast_fu_1064_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                i_12_reg_1725 <= i_12_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                i_13_reg_1825 <= i_13_fu_1417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_33_reg_1552 <= i_33_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_34_reg_1565 <= i_34_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_35_reg_1633 <= i_35_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_36_reg_1651 <= i_36_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                i_38_reg_1677 <= i_38_fu_1174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_39_reg_1685 <= i_39_fu_1186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                i_40_reg_1712 <= i_40_fu_1220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                i_41_reg_1738 <= i_41_fu_1277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_42_reg_1751 <= i_42_fu_1301_p2;
                    tmp_172_cast_reg_1743(10 downto 8) <= tmp_172_cast_fu_1291_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                i_43_reg_1812 <= i_43_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                i_44_reg_1759 <= i_44_fu_1313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_45_reg_1848 <= i_45_fu_1456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                i_46_reg_1861 <= i_46_fu_1476_p2;
                    i_6_cast_reg_1853(11 downto 0) <= i_6_cast_fu_1466_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_1534 <= i_8_fu_880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_9_reg_1581 <= i_9_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                inlen_assign_reg_1661 <= inlen_assign_fu_1149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_33_i_fu_891_p2 = ap_const_lv1_0))) then
                    sum5_i_reg_1557(10 downto 5) <= sum5_i_fu_913_p2(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_156_fu_1094_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    sum_cast_reg_1638(13 downto 0) <= sum_cast_fu_1112_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_i_i2_fu_1238_p2 = ap_const_lv1_0))) then
                t1_vec_coeffs_addr_reg_1730 <= tmp_169_cast_fu_1259_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                t_27_reg_1799 <= t_27_fu_1354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                t_28_reg_1804 <= t_28_fu_1362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (tmp_i_i4_fu_1411_p2 = ap_const_lv1_0))) then
                tmp1_vec_coeffs_addr_reg_1830 <= tmp_177_cast_fu_1432_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_144_i_i_reg_1840 <= tmp_144_i_i_fu_1444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_0))) then
                    tmp_157_cast_reg_1570(10 downto 8) <= tmp_157_cast_fu_940_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_159_reg_1690 <= tmp_159_fu_1192_p2;
                    tmp_160_reg_1695(7 downto 0) <= tmp_160_fu_1198_p1(7 downto 0);
                tmp_161_reg_1705 <= tmp_161_fu_1203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (tmp_i9_fu_1214_p2 = ap_const_lv1_0))) then
                    tmp_168_cast_reg_1717(10 downto 8) <= tmp_168_cast_fu_1234_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (tmp_i2_fu_1387_p2 = ap_const_lv1_0))) then
                    tmp_175_cast_reg_1817(10 downto 8) <= tmp_175_cast_fu_1407_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_i3_fu_1307_p2 = ap_const_lv1_0))) then
                    tmp_176_cast_reg_1764(11 downto 0) <= tmp_176_cast_fu_1333_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_874_p2 = ap_const_lv1_0))) then
                    tmp_i_56_reg_1539(5 downto 0) <= tmp_i_56_fu_886_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                z_vec_coeffs_load_reg_1591 <= z_vec_coeffs_q0;
            end if;
        end if;
    end process;
    tmp_i_56_reg_1539(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    sum5_i_reg_1557(4 downto 0) <= "00000";
    tmp_157_cast_reg_1570(7 downto 0) <= "00000000";
    tmp_157_cast_reg_1570(11) <= '0';
    i_2_cast_reg_1612(11) <= '0';
    sum_cast_reg_1638(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    tmp_160_reg_1695(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_168_cast_reg_1717(7 downto 0) <= "00000000";
    tmp_168_cast_reg_1717(11) <= '0';
    tmp_172_cast_reg_1743(7 downto 0) <= "00000000";
    tmp_172_cast_reg_1743(11) <= '0';
    tmp_176_cast_reg_1764(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_175_cast_reg_1817(7 downto 0) <= "00000000";
    tmp_175_cast_reg_1817(11) <= '0';
    i_6_cast_reg_1853(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_i_fu_874_p2, ap_CS_fsm_state4, tmp_33_i_fu_891_p2, ap_CS_fsm_state7, tmp_i5_fu_920_p2, ap_CS_fsm_state8, tmp_i_i_fu_950_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, tmp_153_fu_1068_p2, ap_CS_fsm_state16, tmp_156_fu_1094_p2, ap_CS_fsm_state21, exitcond_i_fu_1117_p2, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state31, tmp_161_reg_1705, ap_CS_fsm_state37, tmp_i9_fu_1214_p2, ap_CS_fsm_state38, tmp_i_i2_fu_1238_p2, ap_CS_fsm_state40, ap_CS_fsm_state42, ap_CS_fsm_state43, tmp_i3_fu_1307_p2, ap_CS_fsm_state49, tmp_i2_fu_1387_p2, ap_CS_fsm_state50, tmp_i_i4_fu_1411_p2, ap_CS_fsm_state54, ap_CS_fsm_state60, tmp_171_fu_1470_p2, ap_CS_fsm_state62, grp_keccak_absorb_fu_757_ap_done, grp_expand_mat_fu_771_ap_done, grp_keccak_squeezeblocks_2_fu_779_ap_done, grp_unpack_sig_fu_787_ap_done, grp_invntt_frominvmont_fu_796_ap_done, grp_polyvecl_pointwise_a_fu_805_ap_done, grp_ntt_fu_814_ap_done, grp_ntt_1_fu_823_ap_done, grp_ntt_2_fu_832_ap_done, grp_polyt1_unpack_fu_839_ap_done, grp_polyveck_use_hint_fu_849_ap_done, grp_polyveck_freeze_fu_856_ap_done, tmp_fu_861_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, tmp_160_i_i_fu_1009_p2, tmp_151_fu_944_p2, exitcond_fu_1048_p2, ap_CS_fsm_state20, ap_CS_fsm_state26, exitcond_i1_fu_1156_p2, ap_CS_fsm_state28, ap_CS_fsm_state30, ap_CS_fsm_state32, tmp_i8_fu_1168_p2, ap_CS_fsm_state34, tmp_157_fu_1180_p2, ap_CS_fsm_state36, ap_CS_fsm_state41, tmp_i1_fu_1271_p2, tmp_166_fu_1295_p2, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state58, exitcond1_fu_1498_p2, ap_CS_fsm_state18, ap_CS_fsm_state24, tmp_i4_fu_1450_p2, ap_CS_fsm_state56)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_874_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_33_i_fu_891_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_polyt1_unpack_fu_839_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_unpack_sig_fu_787_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((tmp_151_fu_944_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_1) and (tmp_151_fu_944_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_i_i_fu_950_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_160_i_i_fu_1009_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state12 => 
                if (((exitcond_fu_1048_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((tmp_153_fu_1068_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_156_fu_1094_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((grp_keccak_absorb_fu_757_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_keccak_squeezeblocks_2_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((exitcond_i_fu_1117_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((grp_keccak_absorb_fu_757_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_keccak_squeezeblocks_2_fu_779_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((exitcond_i1_fu_1156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((grp_expand_mat_fu_771_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((tmp_i8_fu_1168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((grp_ntt_1_fu_823_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((tmp_157_fu_1180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((grp_polyvecl_pointwise_a_fu_805_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((tmp_161_reg_1705 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_ntt_2_fu_832_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((tmp_i9_fu_1214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                if (((tmp_i_i2_fu_1238_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state40 => 
                if (((tmp_i1_fu_1271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((grp_ntt_fu_814_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((tmp_166_fu_1295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((tmp_i3_fu_1307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (tmp_i2_fu_1387_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state50 => 
                if (((tmp_i_i4_fu_1411_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state53 => 
                if (((grp_polyveck_freeze_fu_856_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((tmp_i4_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                if (((grp_invntt_frominvmont_fu_796_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((grp_polyveck_freeze_fu_856_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_polyveck_use_hint_fu_849_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (tmp_171_fu_1470_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state62 => 
                if (((exitcond1_fu_1498_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_fu_1344_p0 <= a_assign_fu_1344_p00(32 - 1 downto 0);
    a_assign_fu_1344_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_vec_coeffs_load_1_reg_1784),64));
    a_assign_fu_1344_p1 <= a_assign_fu_1344_p10(32 - 1 downto 0);
    a_assign_fu_1344_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chat_coeffs_load_reg_1779),64));
    a_assign_fu_1344_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_1344_p0) * unsigned(a_assign_fu_1344_p1), 64));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_FFFFFFFF when (p_0_reg_741(0) = '1') else 
        ap_const_lv32_0;

    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state33, tmp_160_fu_1198_p1, grp_unpack_sig_fu_787_c_coeffs_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            c_coeffs_address0 <= tmp_160_fu_1198_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_coeffs_address0 <= grp_unpack_sig_fu_787_c_coeffs_address0;
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state33, grp_unpack_sig_fu_787_c_coeffs_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_coeffs_ce0 <= grp_unpack_sig_fu_787_c_coeffs_ce0;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(grp_unpack_sig_fu_787_c_coeffs_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            c_coeffs_we0 <= grp_unpack_sig_fu_787_c_coeffs_we0;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    chat_coeffs_address0_assign_proc : process(tmp_160_reg_1695, ap_CS_fsm_state43, grp_ntt_2_fu_832_p_address0, ap_CS_fsm_state34, ap_CS_fsm_state36, tmp_i9_71_fu_1319_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            chat_coeffs_address0 <= tmp_i9_71_fu_1319_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            chat_coeffs_address0 <= tmp_160_reg_1695(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            chat_coeffs_address0 <= grp_ntt_2_fu_832_p_address0;
        else 
            chat_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    chat_coeffs_ce0_assign_proc : process(ap_CS_fsm_state43, grp_ntt_2_fu_832_p_ce0, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            chat_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            chat_coeffs_ce0 <= grp_ntt_2_fu_832_p_ce0;
        else 
            chat_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    chat_coeffs_d0_assign_proc : process(grp_ntt_2_fu_832_p_d0, ap_CS_fsm_state34, ap_CS_fsm_state36, extLd_fu_1209_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            chat_coeffs_d0 <= extLd_fu_1209_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            chat_coeffs_d0 <= grp_ntt_2_fu_832_p_d0;
        else 
            chat_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    chat_coeffs_we0_assign_proc : process(grp_ntt_2_fu_832_p_we0, ap_CS_fsm_state34, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            chat_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            chat_coeffs_we0 <= grp_ntt_2_fu_832_p_we0;
        else 
            chat_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1498_p2 <= "1" when (i_cast_fu_1493_p1 = smlen) else "0";
    exitcond_fu_1048_p2 <= "1" when (i_1_cast_fu_1043_p1 = smlen) else "0";
    exitcond_i1_fu_1156_p2 <= "1" when (i_i5_reg_583 = ap_const_lv6_30) else "0";
    exitcond_i_fu_1117_p2 <= "1" when (i_i4_reg_571 = ap_const_lv6_30) else "0";
    extLd_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_coeffs_q0),32));
    grp_expand_mat_fu_771_ap_start <= grp_expand_mat_fu_771_ap_start_reg;
    grp_invntt_frominvmont_fu_796_ap_start <= grp_invntt_frominvmont_fu_796_ap_start_reg;
    grp_keccak_absorb_fu_757_ap_start <= grp_keccak_absorb_fu_757_ap_start_reg;

    grp_keccak_absorb_fu_757_m_offset_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_keccak_absorb_fu_757_m_offset <= ap_const_lv13_A5D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_keccak_absorb_fu_757_m_offset <= ap_const_lv13_4CD;
        else 
            grp_keccak_absorb_fu_757_m_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_absorb_fu_757_mlen_assign_proc : process(inlen_assign_reg_1661, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_keccak_absorb_fu_757_mlen <= inlen_assign_reg_1661;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_keccak_absorb_fu_757_mlen <= ap_const_lv64_5C0;
        else 
            grp_keccak_absorb_fu_757_mlen <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_absorb_fu_757_s_q0_assign_proc : process(s_1_q0, s_q0, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_keccak_absorb_fu_757_s_q0 <= s_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_keccak_absorb_fu_757_s_q0 <= s_q0;
        else 
            grp_keccak_absorb_fu_757_s_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_absorb_fu_757_s_q1_assign_proc : process(s_1_q1, s_q1, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_keccak_absorb_fu_757_s_q1 <= s_1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_keccak_absorb_fu_757_s_q1 <= s_q1;
        else 
            grp_keccak_absorb_fu_757_s_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_keccak_squeezeblocks_2_fu_779_ap_start <= grp_keccak_squeezeblocks_2_fu_779_ap_start_reg;

    grp_keccak_squeezeblocks_2_fu_779_s_q0_assign_proc : process(s_1_q0, s_q0, ap_CS_fsm_state20, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_keccak_squeezeblocks_2_fu_779_s_q0 <= s_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_keccak_squeezeblocks_2_fu_779_s_q0 <= s_q0;
        else 
            grp_keccak_squeezeblocks_2_fu_779_s_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_keccak_squeezeblocks_2_fu_779_s_q1_assign_proc : process(s_1_q1, s_q1, ap_CS_fsm_state20, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_keccak_squeezeblocks_2_fu_779_s_q1 <= s_1_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_keccak_squeezeblocks_2_fu_779_s_q1 <= s_q1;
        else 
            grp_keccak_squeezeblocks_2_fu_779_s_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_ntt_1_fu_823_ap_start <= grp_ntt_1_fu_823_ap_start_reg;
    grp_ntt_2_fu_832_ap_start <= grp_ntt_2_fu_832_ap_start_reg;
    grp_ntt_fu_814_ap_start <= grp_ntt_fu_814_ap_start_reg;
    grp_polyt1_unpack_fu_839_ap_start <= grp_polyt1_unpack_fu_839_ap_start_reg;
    grp_polyveck_freeze_fu_856_ap_start <= grp_polyveck_freeze_fu_856_ap_start_reg;
    grp_polyveck_use_hint_fu_849_ap_start <= grp_polyveck_use_hint_fu_849_ap_start_reg;
    grp_polyvecl_pointwise_a_fu_805_ap_start <= grp_polyvecl_pointwise_a_fu_805_ap_start_reg;
    grp_unpack_sig_fu_787_ap_start <= grp_unpack_sig_fu_787_ap_start_reg;

    h_vec_coeffs_address0_assign_proc : process(grp_unpack_sig_fu_787_h_vec_coeffs_address0, grp_polyveck_use_hint_fu_849_h_vec_coeffs_address0, ap_CS_fsm_state6, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            h_vec_coeffs_address0 <= grp_polyveck_use_hint_fu_849_h_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_vec_coeffs_address0 <= grp_unpack_sig_fu_787_h_vec_coeffs_address0;
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(grp_unpack_sig_fu_787_h_vec_coeffs_ce0, grp_polyveck_use_hint_fu_849_h_vec_coeffs_ce0, ap_CS_fsm_state6, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            h_vec_coeffs_ce0 <= grp_polyveck_use_hint_fu_849_h_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_vec_coeffs_ce0 <= grp_unpack_sig_fu_787_h_vec_coeffs_ce0;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_we0_assign_proc : process(grp_unpack_sig_fu_787_h_vec_coeffs_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_vec_coeffs_we0 <= grp_unpack_sig_fu_787_h_vec_coeffs_we0;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_1074_p2 <= std_logic_vector(unsigned(i_2_reg_549) + unsigned(ap_const_lv11_1));
    i_11_fu_1053_p2 <= std_logic_vector(unsigned(i_1_reg_538) + unsigned(ap_const_lv12_1));
    i_12_fu_1244_p2 <= std_logic_vector(unsigned(i_i_i1_reg_640) + unsigned(ap_const_lv9_1));
    i_13_fu_1417_p2 <= std_logic_vector(unsigned(i_i_i2_reg_696) + unsigned(ap_const_lv9_1));
    i_1_cast_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_538),64));
    i_2_cast1_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_549),64));
    i_2_cast_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_549),12));
    i_32_fu_1503_p2 <= std_logic_vector(unsigned(i_reg_730) + unsigned(ap_const_lv12_1));
    i_33_fu_897_p2 <= std_logic_vector(unsigned(i_1_i_reg_479) + unsigned(ap_const_lv3_1));
    i_34_fu_926_p2 <= std_logic_vector(unsigned(i_i3_reg_491) + unsigned(ap_const_lv3_1));
    i_35_fu_1100_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_3_reg_560));
    i_36_fu_1123_p2 <= std_logic_vector(unsigned(i_i4_reg_571) + unsigned(ap_const_lv6_1));
    i_37_fu_1162_p2 <= std_logic_vector(unsigned(i_i5_reg_583) + unsigned(ap_const_lv6_1));
    i_38_fu_1174_p2 <= std_logic_vector(unsigned(i_i6_reg_594) + unsigned(ap_const_lv3_1));
    i_39_fu_1186_p2 <= std_logic_vector(unsigned(i_4_reg_606) + unsigned(ap_const_lv3_1));
    i_40_fu_1220_p2 <= std_logic_vector(unsigned(i_i7_reg_629) + unsigned(ap_const_lv3_1));
    i_41_fu_1277_p2 <= std_logic_vector(unsigned(i_i8_reg_651) + unsigned(ap_const_lv3_1));
    i_42_fu_1301_p2 <= std_logic_vector(unsigned(i_5_reg_663) + unsigned(ap_const_lv3_1));
    i_43_fu_1393_p2 <= std_logic_vector(unsigned(i_i9_reg_685) + unsigned(ap_const_lv3_1));
    i_44_fu_1313_p2 <= std_logic_vector(unsigned(i_i1_reg_674) + unsigned(ap_const_lv9_1));
    i_45_fu_1456_p2 <= std_logic_vector(unsigned(i_i2_reg_707) + unsigned(ap_const_lv3_1));
    i_46_fu_1476_p2 <= std_logic_vector(unsigned(i_6_reg_719) + unsigned(ap_const_lv12_1));
    i_6_cast1_fu_1462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_719),13));
    i_6_cast_fu_1466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_719),64));
    i_8_fu_880_p2 <= std_logic_vector(unsigned(i_i_reg_468) + unsigned(ap_const_lv6_1));
    i_9_fu_956_p2 <= std_logic_vector(unsigned(i_i_i_reg_514) + unsigned(ap_const_lv9_1));
    i_cast_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_730),64));
    inlen_assign_fu_1149_p2 <= std_logic_vector(unsigned(mlen_q0) + unsigned(ap_const_lv64_30));

    m_address0_assign_proc : process(ap_CS_fsm_state12, sum_cast_reg_1638, i_6_cast_reg_1853, ap_CS_fsm_state62, grp_keccak_absorb_fu_757_m_address0, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state61, ap_CS_fsm_state18, ap_CS_fsm_state24, i_1_cast_fu_1043_p1, sum4_cast_fu_1085_p1, sum_i_cast_fu_1144_p1, i_cast_fu_1493_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            m_address0 <= i_cast_fu_1493_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            m_address0 <= i_6_cast_reg_1853(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            m_address0 <= sum_i_cast_fu_1144_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address0 <= sum_cast_reg_1638(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            m_address0 <= sum4_cast_fu_1085_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            m_address0 <= i_1_cast_fu_1043_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_address0 <= grp_keccak_absorb_fu_757_m_address0;
        else 
            m_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state62, grp_keccak_absorb_fu_757_m_ce0, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state61, ap_CS_fsm_state18, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            m_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            m_ce0 <= grp_keccak_absorb_fu_757_m_ce0;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_d0_assign_proc : process(sm_q0, pk_q0, ap_CS_fsm_state12, ap_CS_fsm_state62, output_assign_q0, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            m_d0 <= output_assign_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            m_d0 <= sm_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            m_d0 <= pk_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_d0 <= ap_const_lv8_0;
        else 
            m_d0 <= "XXXXXXXX";
        end if; 
    end process;


    m_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state62, exitcond_fu_1048_p2, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state61, exitcond1_fu_1498_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state61) or ((ap_const_logic_1 = ap_CS_fsm_state62) and (exitcond1_fu_1498_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_1048_p2 = ap_const_lv1_0)))) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_address0_assign_proc : process(grp_expand_mat_fu_771_mat_vec_coeffs_address0, grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_address0, ap_CS_fsm_state28, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            mat_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            mat_vec_coeffs_address0 <= grp_expand_mat_fu_771_mat_vec_coeffs_address0;
        else 
            mat_vec_coeffs_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mat_vec_coeffs_ce0_assign_proc : process(grp_expand_mat_fu_771_mat_vec_coeffs_ce0, grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_ce0, ap_CS_fsm_state28, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            mat_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_805_u_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            mat_vec_coeffs_ce0 <= grp_expand_mat_fu_771_mat_vec_coeffs_ce0;
        else 
            mat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_we0_assign_proc : process(grp_expand_mat_fu_771_mat_vec_coeffs_we0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            mat_vec_coeffs_we0 <= grp_expand_mat_fu_771_mat_vec_coeffs_we0;
        else 
            mat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_addr_reg_1523 <= ap_const_lv64_0(1 - 1 downto 0);

    mlen_address0_assign_proc : process(ap_CS_fsm_state1, mlen_addr_reg_1523, ap_CS_fsm_state7, ap_CS_fsm_state21, tmp_fu_861_p2, ap_CS_fsm_state15, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            mlen_address0 <= mlen_addr_reg_1523;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0)) or ((tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mlen_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            mlen_address0 <= "X";
        end if; 
    end process;


    mlen_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state21, tmp_fu_861_p2, ap_CS_fsm_state15, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mlen_ce0 <= ap_const_logic_1;
        else 
            mlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mlen_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_fu_861_p2, tmp_s_fu_867_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mlen_d0 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0))) then 
            mlen_d0 <= tmp_s_fu_867_p2;
        else 
            mlen_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mlen_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_i5_fu_920_p2, tmp_fu_861_p2, tmp_151_fu_944_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_861_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (tmp_fu_861_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_i5_fu_920_p2 = ap_const_lv1_1) and (tmp_151_fu_944_p2 = ap_const_lv1_0)))) then 
            mlen_we0 <= ap_const_logic_1;
        else 
            mlen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_2_ce0_assign_proc : process(grp_keccak_squeezeblocks_2_fu_779_h_ce0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_assign_2_ce0 <= grp_keccak_squeezeblocks_2_fu_779_h_ce0;
        else 
            output_assign_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_2_we0_assign_proc : process(grp_keccak_squeezeblocks_2_fu_779_h_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_assign_2_we0 <= grp_keccak_squeezeblocks_2_fu_779_h_we0;
        else 
            output_assign_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_address0_assign_proc : process(ap_CS_fsm_state21, grp_keccak_squeezeblocks_2_fu_779_h_address0, ap_CS_fsm_state20, tmp_i6_fu_1129_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_assign_address0 <= tmp_i6_fu_1129_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_assign_address0 <= grp_keccak_squeezeblocks_2_fu_779_h_address0;
        else 
            output_assign_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_assign_ce0_assign_proc : process(ap_CS_fsm_state21, grp_keccak_squeezeblocks_2_fu_779_h_ce0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_assign_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_assign_ce0 <= grp_keccak_squeezeblocks_2_fu_779_h_ce0;
        else 
            output_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_we0_assign_proc : process(grp_keccak_squeezeblocks_2_fu_779_h_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_assign_we0 <= grp_keccak_squeezeblocks_2_fu_779_h_we0;
        else 
            output_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_address0_assign_proc : process(ap_CS_fsm_state2, tmp_i_56_fu_886_p1, ap_CS_fsm_state13, grp_polyt1_unpack_fu_839_a_address0, ap_CS_fsm_state5, i_2_cast1_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_address0 <= i_2_cast1_fu_1059_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pk_address0 <= tmp_i_56_fu_886_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_address0 <= grp_polyt1_unpack_fu_839_a_address0;
        else 
            pk_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    pk_address1 <= grp_polyt1_unpack_fu_839_a_address1;

    pk_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, grp_polyt1_unpack_fu_839_a_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pk_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_ce0 <= grp_polyt1_unpack_fu_839_a_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_ce1_assign_proc : process(grp_polyt1_unpack_fu_839_a_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pk_ce1 <= grp_polyt1_unpack_fu_839_a_ce1;
        else 
            pk_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_1035_p3 <= (tmp_93_fu_1025_p4 & tmp_92_fu_1019_p2);

    rho_address0_assign_proc : process(tmp_i_56_reg_1539, grp_expand_mat_fu_771_rho_address0, ap_CS_fsm_state3, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rho_address0 <= tmp_i_56_reg_1539(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rho_address0 <= grp_expand_mat_fu_771_rho_address0;
        else 
            rho_address0 <= "XXXXX";
        end if; 
    end process;


    rho_ce0_assign_proc : process(grp_expand_mat_fu_771_rho_ce0, ap_CS_fsm_state3, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rho_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            rho_ce0 <= grp_expand_mat_fu_771_rho_ce0;
        else 
            rho_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rho_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rho_we0 <= ap_const_logic_1;
        else 
            rho_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_address0_assign_proc : process(grp_keccak_absorb_fu_757_s_address0, grp_keccak_squeezeblocks_2_fu_779_s_address0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_address0 <= grp_keccak_squeezeblocks_2_fu_779_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_address0 <= grp_keccak_absorb_fu_757_s_address0;
        else 
            s_1_address0 <= "XXXXX";
        end if; 
    end process;


    s_1_address1_assign_proc : process(grp_keccak_absorb_fu_757_s_address1, grp_keccak_squeezeblocks_2_fu_779_s_address1, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_address1 <= grp_keccak_squeezeblocks_2_fu_779_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_address1 <= grp_keccak_absorb_fu_757_s_address1;
        else 
            s_1_address1 <= "XXXXX";
        end if; 
    end process;


    s_1_ce0_assign_proc : process(grp_keccak_absorb_fu_757_s_ce0, grp_keccak_squeezeblocks_2_fu_779_s_ce0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_ce0 <= grp_keccak_squeezeblocks_2_fu_779_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_ce0 <= grp_keccak_absorb_fu_757_s_ce0;
        else 
            s_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_ce1_assign_proc : process(grp_keccak_absorb_fu_757_s_ce1, grp_keccak_squeezeblocks_2_fu_779_s_ce1, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_ce1 <= grp_keccak_squeezeblocks_2_fu_779_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_ce1 <= grp_keccak_absorb_fu_757_s_ce1;
        else 
            s_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_d0_assign_proc : process(grp_keccak_absorb_fu_757_s_d0, grp_keccak_squeezeblocks_2_fu_779_s_d0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_d0 <= grp_keccak_squeezeblocks_2_fu_779_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_d0 <= grp_keccak_absorb_fu_757_s_d0;
        else 
            s_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_1_d1_assign_proc : process(grp_keccak_absorb_fu_757_s_d1, grp_keccak_squeezeblocks_2_fu_779_s_d1, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_d1 <= grp_keccak_squeezeblocks_2_fu_779_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_d1 <= grp_keccak_absorb_fu_757_s_d1;
        else 
            s_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_1_we0_assign_proc : process(grp_keccak_absorb_fu_757_s_we0, grp_keccak_squeezeblocks_2_fu_779_s_we0, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_we0 <= grp_keccak_squeezeblocks_2_fu_779_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_we0 <= grp_keccak_absorb_fu_757_s_we0;
        else 
            s_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_1_we1_assign_proc : process(grp_keccak_absorb_fu_757_s_we1, grp_keccak_squeezeblocks_2_fu_779_s_we1, ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            s_1_we1 <= grp_keccak_squeezeblocks_2_fu_779_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            s_1_we1 <= grp_keccak_absorb_fu_757_s_we1;
        else 
            s_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_address0_assign_proc : process(grp_keccak_absorb_fu_757_s_address0, grp_keccak_squeezeblocks_2_fu_779_s_address0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_address0 <= grp_keccak_squeezeblocks_2_fu_779_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_address0 <= grp_keccak_absorb_fu_757_s_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_address1_assign_proc : process(grp_keccak_absorb_fu_757_s_address1, grp_keccak_squeezeblocks_2_fu_779_s_address1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_address1 <= grp_keccak_squeezeblocks_2_fu_779_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_address1 <= grp_keccak_absorb_fu_757_s_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(grp_keccak_absorb_fu_757_s_ce0, grp_keccak_squeezeblocks_2_fu_779_s_ce0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_ce0 <= grp_keccak_squeezeblocks_2_fu_779_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_ce0 <= grp_keccak_absorb_fu_757_s_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_keccak_absorb_fu_757_s_ce1, grp_keccak_squeezeblocks_2_fu_779_s_ce1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_ce1 <= grp_keccak_squeezeblocks_2_fu_779_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_ce1 <= grp_keccak_absorb_fu_757_s_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(grp_keccak_absorb_fu_757_s_d0, grp_keccak_squeezeblocks_2_fu_779_s_d0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_d0 <= grp_keccak_squeezeblocks_2_fu_779_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_d0 <= grp_keccak_absorb_fu_757_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(grp_keccak_absorb_fu_757_s_d1, grp_keccak_squeezeblocks_2_fu_779_s_d1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_d1 <= grp_keccak_squeezeblocks_2_fu_779_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_d1 <= grp_keccak_absorb_fu_757_s_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(grp_keccak_absorb_fu_757_s_we0, grp_keccak_squeezeblocks_2_fu_779_s_we0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_we0 <= grp_keccak_squeezeblocks_2_fu_779_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_we0 <= grp_keccak_absorb_fu_757_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_keccak_absorb_fu_757_s_we1, grp_keccak_squeezeblocks_2_fu_779_s_we1, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            s_we1 <= grp_keccak_squeezeblocks_2_fu_779_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_we1 <= grp_keccak_absorb_fu_757_s_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sm_address0_assign_proc : process(ap_CS_fsm_state16, sum_cast_fu_1112_p1, ap_CS_fsm_state60, grp_unpack_sig_fu_787_sig_address0, ap_CS_fsm_state6, sum1_cast_fu_1488_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            sm_address0 <= sum1_cast_fu_1488_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sm_address0 <= sum_cast_fu_1112_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_address0 <= grp_unpack_sig_fu_787_sig_address0;
        else 
            sm_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    sm_address1 <= grp_unpack_sig_fu_787_sig_address1;

    sm_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state60, grp_unpack_sig_fu_787_sig_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            sm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_ce0 <= grp_unpack_sig_fu_787_sig_ce0;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_ce1_assign_proc : process(grp_unpack_sig_fu_787_sig_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sm_ce1 <= grp_unpack_sig_fu_787_sig_ce1;
        else 
            sm_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_cast_fu_1488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_1482_p2),64));
    sum1_fu_1482_p2 <= std_logic_vector(unsigned(i_6_cast1_fu_1462_p1) + unsigned(ap_const_lv13_A8D));
    sum4_cast_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_1080_p2),64));
    sum4_fu_1080_p2 <= std_logic_vector(unsigned(i_2_cast_reg_1612) + unsigned(ap_const_lv12_4CD));
    sum5_i_fu_913_p2 <= std_logic_vector(unsigned(tmp_35_i_fu_903_p4) + unsigned(ap_const_lv11_20));
    sum_cast_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1106_p2),64));
    sum_fu_1106_p2 <= std_logic_vector(unsigned(tmp_155_fu_1090_p1) + unsigned(ap_const_lv14_A8D));
    sum_i_cast_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_1138_p2),64));
    sum_i_fu_1138_p2 <= std_logic_vector(unsigned(tmp_i6_cast_fu_1134_p1) + unsigned(ap_const_lv12_A5D));

    t1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state38, t1_vec_coeffs_addr_reg_1730, ap_CS_fsm_state43, tmp_176_cast_fu_1333_p1, grp_ntt_fu_814_p_address0, grp_polyt1_unpack_fu_839_r_coeffs_address0, ap_CS_fsm_state5, ap_CS_fsm_state39, ap_CS_fsm_state41, tmp_169_cast_fu_1259_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            t1_vec_coeffs_address0 <= tmp_176_cast_fu_1333_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t1_vec_coeffs_address0 <= t1_vec_coeffs_addr_reg_1730;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            t1_vec_coeffs_address0 <= tmp_169_cast_fu_1259_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_address0 <= grp_polyt1_unpack_fu_839_r_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t1_vec_coeffs_address0 <= grp_ntt_fu_814_p_address0;
        else 
            t1_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    t1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state43, grp_ntt_fu_814_p_ce0, grp_polyt1_unpack_fu_839_r_coeffs_ce0, ap_CS_fsm_state5, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            t1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_ce0 <= grp_polyt1_unpack_fu_839_r_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t1_vec_coeffs_ce0 <= grp_ntt_fu_814_p_ce0;
        else 
            t1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t1_vec_coeffs_ce1_assign_proc : process(grp_polyt1_unpack_fu_839_r_coeffs_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_ce1 <= grp_polyt1_unpack_fu_839_r_coeffs_ce1;
        else 
            t1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t1_vec_coeffs_d0_assign_proc : process(grp_ntt_fu_814_p_d0, grp_polyt1_unpack_fu_839_r_coeffs_d0, ap_CS_fsm_state5, ap_CS_fsm_state39, ap_CS_fsm_state41, tmp_164_fu_1264_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t1_vec_coeffs_d0 <= tmp_164_fu_1264_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_d0 <= grp_polyt1_unpack_fu_839_r_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t1_vec_coeffs_d0 <= grp_ntt_fu_814_p_d0;
        else 
            t1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t1_vec_coeffs_we0_assign_proc : process(grp_ntt_fu_814_p_we0, grp_polyt1_unpack_fu_839_r_coeffs_we0, ap_CS_fsm_state5, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            t1_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_we0 <= grp_polyt1_unpack_fu_839_r_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            t1_vec_coeffs_we0 <= grp_ntt_fu_814_p_we0;
        else 
            t1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t1_vec_coeffs_we1_assign_proc : process(grp_polyt1_unpack_fu_839_r_coeffs_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t1_vec_coeffs_we1 <= grp_polyt1_unpack_fu_839_r_coeffs_we1;
        else 
            t1_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    t_25_fu_997_p2 <= (tmp_159_i_i_fu_989_p3 xor t_fu_976_p2);
    t_26_fu_1003_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(t_25_fu_997_p2));
    t_27_fu_1354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_169_reg_1794))), 32));
    t_28_fu_1362_p1 <= t_28_fu_1362_p10(32 - 1 downto 0);
    t_28_fu_1362_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_27_reg_1799),55));
    t_28_fu_1362_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_28_fu_1362_p1), 55));
    t_29_fu_1371_p2 <= std_logic_vector(unsigned(t_38_cast_fu_1368_p1) + unsigned(a_assign_reg_1789));
    t_38_cast_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_28_reg_1804),64));
    t_fu_976_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(z_vec_coeffs_load_reg_1591));

    tmp1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state50, tmp1_vec_coeffs_addr_reg_1830, grp_invntt_frominvmont_fu_796_p_address0, grp_polyvecl_pointwise_a_fu_805_w_coeffs_address0, grp_polyveck_use_hint_fu_849_u_vec_coeffs_address0, grp_polyveck_freeze_fu_856_v_vec_coeffs_address0, ap_CS_fsm_state32, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state56, tmp_177_cast_fu_1432_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            tmp1_vec_coeffs_address0 <= tmp1_vec_coeffs_addr_reg_1830;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            tmp1_vec_coeffs_address0 <= tmp_177_cast_fu_1432_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            tmp1_vec_coeffs_address0 <= grp_polyveck_freeze_fu_856_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            tmp1_vec_coeffs_address0 <= grp_polyveck_use_hint_fu_849_u_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp1_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_805_w_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            tmp1_vec_coeffs_address0 <= grp_invntt_frominvmont_fu_796_p_address0;
        else 
            tmp1_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    tmp1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state50, grp_invntt_frominvmont_fu_796_p_ce0, grp_polyvecl_pointwise_a_fu_805_w_coeffs_ce0, grp_polyveck_use_hint_fu_849_u_vec_coeffs_ce0, grp_polyveck_freeze_fu_856_v_vec_coeffs_ce0, ap_CS_fsm_state32, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state58, ap_CS_fsm_state56)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            tmp1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            tmp1_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_856_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            tmp1_vec_coeffs_ce0 <= grp_polyveck_use_hint_fu_849_u_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp1_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_805_w_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            tmp1_vec_coeffs_ce0 <= grp_invntt_frominvmont_fu_796_p_ce0;
        else 
            tmp1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp1_vec_coeffs_ce1_assign_proc : process(grp_invntt_frominvmont_fu_796_p_ce1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            tmp1_vec_coeffs_ce1 <= grp_invntt_frominvmont_fu_796_p_ce1;
        else 
            tmp1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tmp1_vec_coeffs_d0_assign_proc : process(tmp_144_i_i_reg_1840, grp_invntt_frominvmont_fu_796_p_d0, grp_polyvecl_pointwise_a_fu_805_w_coeffs_d0, grp_polyveck_freeze_fu_856_v_vec_coeffs_d0, ap_CS_fsm_state32, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            tmp1_vec_coeffs_d0 <= tmp_144_i_i_reg_1840;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            tmp1_vec_coeffs_d0 <= grp_polyveck_freeze_fu_856_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp1_vec_coeffs_d0 <= grp_polyvecl_pointwise_a_fu_805_w_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            tmp1_vec_coeffs_d0 <= grp_invntt_frominvmont_fu_796_p_d0;
        else 
            tmp1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp1_vec_coeffs_we0_assign_proc : process(grp_invntt_frominvmont_fu_796_p_we0, grp_polyvecl_pointwise_a_fu_805_w_coeffs_we0, grp_polyveck_freeze_fu_856_v_vec_coeffs_we0, ap_CS_fsm_state32, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state55, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            tmp1_vec_coeffs_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state56))) then 
            tmp1_vec_coeffs_we0 <= grp_polyveck_freeze_fu_856_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp1_vec_coeffs_we0 <= grp_polyvecl_pointwise_a_fu_805_w_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            tmp1_vec_coeffs_we0 <= grp_invntt_frominvmont_fu_796_p_we0;
        else 
            tmp1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp2_vec_coeffs_address0_assign_proc : process(tmp_176_cast_reg_1764, ap_CS_fsm_state50, ap_CS_fsm_state48, tmp_177_cast_fu_1432_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            tmp2_vec_coeffs_address0 <= tmp_177_cast_fu_1432_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            tmp2_vec_coeffs_address0 <= tmp_176_cast_reg_1764(11 - 1 downto 0);
        else 
            tmp2_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    tmp2_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            tmp2_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            tmp2_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_vec_coeffs_d0 <= t_29_fu_1371_p2(63 downto 32);

    tmp2_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            tmp2_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            tmp2_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_143_i_i_fu_1438_p2 <= std_logic_vector(unsigned(tmp1_vec_coeffs_q0) + unsigned(ap_const_lv32_FFC002));
    tmp_144_i_i_fu_1444_p2 <= std_logic_vector(unsigned(tmp_143_i_i_fu_1438_p2) - unsigned(tmp2_vec_coeffs_q0));
    tmp_149_fu_981_p3 <= t_fu_976_p2(31 downto 31);
    tmp_150_fu_1015_p1 <= ret_i_reg_502(1 - 1 downto 0);
    tmp_151_fu_944_p2 <= "1" when (ret_i_reg_502 = ap_const_lv32_0) else "0";
    tmp_152_fu_932_p3 <= (i_i3_reg_491 & ap_const_lv8_0);
    tmp_153_fu_1068_p2 <= "1" when (i_2_reg_549 = ap_const_lv11_5C0) else "0";
    tmp_154_fu_966_p2 <= std_logic_vector(unsigned(tmp_157_cast_reg_1570) + unsigned(tmp_i_i_cast_fu_962_p1));
    tmp_155_fu_1090_p1 <= i_3_reg_560(14 - 1 downto 0);
    tmp_156_fu_1094_p2 <= "1" when (unsigned(i_3_reg_560) < unsigned(mlen_q0)) else "0";
    tmp_157_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_fu_932_p3),12));
    tmp_157_fu_1180_p2 <= "1" when (i_4_reg_606 = ap_const_lv3_5) else "0";
    tmp_159_cast_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_966_p2),64));
    tmp_159_fu_1192_p2 <= std_logic_vector(unsigned(tmp_158_reg_618) + unsigned(ap_const_lv8_1));
    tmp_159_i_i_fu_989_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_149_fu_981_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_160_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_reg_618),64));
    tmp_160_i_i_fu_1009_p2 <= "1" when (unsigned(t_26_fu_1003_p2) < unsigned(ap_const_lv32_7FCED)) else "0";
    tmp_161_fu_1203_p2 <= "1" when (tmp_158_reg_618 = ap_const_lv8_FF) else "0";
    tmp_162_fu_1226_p3 <= (i_i7_reg_629 & ap_const_lv8_0);
    tmp_163_fu_1254_p2 <= std_logic_vector(unsigned(tmp_168_cast_reg_1717) + unsigned(tmp_i_i2_cast_fu_1250_p1));
    tmp_164_fu_1264_p2 <= std_logic_vector(shift_left(unsigned(t1_vec_coeffs_q0),to_integer(unsigned('0' & ap_const_lv32_E(31-1 downto 0)))));
    tmp_165_fu_1283_p3 <= (i_5_reg_663 & ap_const_lv8_0);
    tmp_166_fu_1295_p2 <= "1" when (i_5_reg_663 = ap_const_lv3_5) else "0";
    tmp_167_fu_1399_p3 <= (i_i9_reg_685 & ap_const_lv8_0);
    tmp_168_cast_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_fu_1226_p3),12));
    tmp_168_fu_1328_p2 <= std_logic_vector(unsigned(tmp_i9_cast_fu_1324_p1) + unsigned(tmp_172_cast_reg_1743));
    tmp_169_cast_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_163_fu_1254_p2),64));
    tmp_169_fu_1350_p1 <= a_assign_fu_1344_p2(32 - 1 downto 0);
    tmp_170_fu_1427_p2 <= std_logic_vector(unsigned(tmp_175_cast_reg_1817) + unsigned(tmp_i_i4_cast_fu_1423_p1));
    tmp_171_fu_1470_p2 <= "1" when (unsigned(i_6_cast_fu_1466_p1) < unsigned(mlen_q0)) else "0";
    tmp_172_cast_fu_1291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_165_fu_1283_p3),12));
    tmp_175_cast_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_1399_p3),12));
    tmp_176_cast_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_1328_p2),64));
    tmp_177_cast_fu_1432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_170_fu_1427_p2),64));
    tmp_33_i_fu_891_p2 <= "1" when (i_1_i_reg_479 = ap_const_lv3_5) else "0";
    tmp_35_i_fu_903_p4 <= ((i_1_i_reg_479 & i_1_i_reg_479) & ap_const_lv5_0);
    tmp_92_fu_1019_p2 <= (tmp_150_fu_1015_p1 or p_0_i_i_reg_525);
    tmp_93_fu_1025_p4 <= ret_i_reg_502(31 downto 1);
    tmp_fu_861_p2 <= "1" when (unsigned(smlen) < unsigned(ap_const_lv64_A8D)) else "0";
    tmp_i1_fu_1271_p2 <= "1" when (i_i8_reg_651 = ap_const_lv3_5) else "0";
    tmp_i2_fu_1387_p2 <= "1" when (i_i9_reg_685 = ap_const_lv3_5) else "0";
    tmp_i3_fu_1307_p2 <= "1" when (i_i1_reg_674 = ap_const_lv9_100) else "0";
    tmp_i4_fu_1450_p2 <= "1" when (i_i2_reg_707 = ap_const_lv3_5) else "0";
    tmp_i5_fu_920_p2 <= "1" when (i_i3_reg_491 = ap_const_lv3_4) else "0";
    tmp_i6_cast_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_571),12));
    tmp_i6_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i4_reg_571),64));
    tmp_i8_fu_1168_p2 <= "1" when (i_i6_reg_594 = ap_const_lv3_4) else "0";
    tmp_i9_71_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_674),64));
    tmp_i9_cast_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_674),12));
    tmp_i9_fu_1214_p2 <= "1" when (i_i7_reg_629 = ap_const_lv3_5) else "0";
    tmp_i_56_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_468),64));
    tmp_i_fu_874_p2 <= "1" when (i_i_reg_468 = ap_const_lv6_20) else "0";
    tmp_i_i2_cast_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i1_reg_640),12));
    tmp_i_i2_fu_1238_p2 <= "1" when (i_i_i1_reg_640 = ap_const_lv9_100) else "0";
    tmp_i_i4_cast_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i2_reg_696),12));
    tmp_i_i4_fu_1411_p2 <= "1" when (i_i_i2_reg_696 = ap_const_lv9_100) else "0";
    tmp_i_i_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_514),12));
    tmp_i_i_fu_950_p2 <= "1" when (i_i_i_reg_514 = ap_const_lv9_100) else "0";
    tmp_s_fu_867_p2 <= std_logic_vector(unsigned(smlen) + unsigned(ap_const_lv64_FFFFFFFFFFFFF573));

    z_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state8, grp_unpack_sig_fu_787_z_vec_coeffs_address0, grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_address0, grp_ntt_1_fu_823_p_address0, ap_CS_fsm_state6, ap_CS_fsm_state30, ap_CS_fsm_state32, tmp_159_cast_fu_971_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_vec_coeffs_address0 <= tmp_159_cast_fu_971_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z_vec_coeffs_address0 <= grp_ntt_1_fu_823_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            z_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_address0 <= grp_unpack_sig_fu_787_z_vec_coeffs_address0;
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state8, grp_unpack_sig_fu_787_z_vec_coeffs_ce0, grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_ce0, grp_ntt_1_fu_823_p_ce0, ap_CS_fsm_state6, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z_vec_coeffs_ce0 <= grp_ntt_1_fu_823_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            z_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_805_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_ce0 <= grp_unpack_sig_fu_787_z_vec_coeffs_ce0;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_d0_assign_proc : process(grp_unpack_sig_fu_787_z_vec_coeffs_d0, grp_ntt_1_fu_823_p_d0, ap_CS_fsm_state6, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z_vec_coeffs_d0 <= grp_ntt_1_fu_823_p_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_d0 <= grp_unpack_sig_fu_787_z_vec_coeffs_d0;
        else 
            z_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_we0_assign_proc : process(grp_unpack_sig_fu_787_z_vec_coeffs_we0, grp_ntt_1_fu_823_p_we0, ap_CS_fsm_state6, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            z_vec_coeffs_we0 <= grp_ntt_1_fu_823_p_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            z_vec_coeffs_we0 <= grp_unpack_sig_fu_787_z_vec_coeffs_we0;
        else 
            z_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

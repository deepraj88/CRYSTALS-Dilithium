-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity expand_mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    mat_vec_coeffs_ce0 : OUT STD_LOGIC;
    mat_vec_coeffs_we0 : OUT STD_LOGIC;
    mat_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    rho_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rho_ce0 : OUT STD_LOGIC;
    rho_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of expand_mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv23_7FE001 : STD_LOGIC_VECTOR (22 downto 0) := "11111111110000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_30_fu_246_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_30_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_31_fu_263_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_31_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_143_cast_fu_277_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_143_cast_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_10_fu_287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_10_reg_449 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_144_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_144_reg_454 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_cast_fu_321_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_148_cast_reg_459 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_keccak_squeezeblocks_3_fu_226_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_141_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_assign_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_assign_load_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal pos_3_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_3_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal inbuf_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal inbuf_ce0 : STD_LOGIC;
    signal inbuf_we0 : STD_LOGIC;
    signal inbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_assign_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_assign_ce0 : STD_LOGIC;
    signal output_assign_we0 : STD_LOGIC;
    signal output_assign_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_assign_ce1 : STD_LOGIC;
    signal output_assign_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_h_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_h_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_h_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_3_fu_226_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_1_fu_234_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_1_fu_234_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_234_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_1_fu_234_m_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_keccak_absorb_1_fu_234_m_ce0 : STD_LOGIC;
    signal i_reg_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_179 : STD_LOGIC_VECTOR (2 downto 0);
    signal pos_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ctr_reg_202 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ctr_be_phi_fu_218_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctr_1_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_149_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_keccak_squeezeblocks_3_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_keccak_absorb_1_fu_234_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_145_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_147_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_155_cast_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_201_cast_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_373_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_142_fu_269_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_140_fu_293_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_143_fu_297_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_145_cast_fu_312_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal pos_1_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_2_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_148_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_154_cast_fu_396_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_150_fu_400_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component keccak_squeezeblocks_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expand_mat_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component expand_mat_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component expand_mat_outputcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    s_U : component expand_mat_s
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => grp_keccak_squeezeblocks_3_fu_226_s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => grp_keccak_squeezeblocks_3_fu_226_s_d1,
        q1 => s_q1);

    inbuf_U : component expand_mat_inbuf
    generic map (
        DataWidth => 8,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inbuf_address0,
        ce0 => inbuf_ce0,
        we0 => inbuf_we0,
        d0 => inbuf_d0,
        q0 => inbuf_q0);

    output_assign_U : component expand_mat_outputcud
    generic map (
        DataWidth => 8,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_assign_address0,
        ce0 => output_assign_ce0,
        we0 => output_assign_we0,
        d0 => grp_keccak_squeezeblocks_3_fu_226_h_d0,
        q0 => output_assign_q0,
        address1 => output_assign_address1,
        ce1 => output_assign_ce1,
        q1 => output_assign_q1);

    grp_keccak_squeezeblocks_3_fu_226 : component keccak_squeezeblocks_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_3_fu_226_ap_start,
        ap_done => grp_keccak_squeezeblocks_3_fu_226_ap_done,
        ap_idle => grp_keccak_squeezeblocks_3_fu_226_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_3_fu_226_ap_ready,
        h_address0 => grp_keccak_squeezeblocks_3_fu_226_h_address0,
        h_ce0 => grp_keccak_squeezeblocks_3_fu_226_h_ce0,
        h_we0 => grp_keccak_squeezeblocks_3_fu_226_h_we0,
        h_d0 => grp_keccak_squeezeblocks_3_fu_226_h_d0,
        s_address0 => grp_keccak_squeezeblocks_3_fu_226_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_3_fu_226_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_3_fu_226_s_we0,
        s_d0 => grp_keccak_squeezeblocks_3_fu_226_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_keccak_squeezeblocks_3_fu_226_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_3_fu_226_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_3_fu_226_s_we1,
        s_d1 => grp_keccak_squeezeblocks_3_fu_226_s_d1,
        s_q1 => s_q1);

    grp_keccak_absorb_1_fu_234 : component keccak_absorb_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_1_fu_234_ap_start,
        ap_done => grp_keccak_absorb_1_fu_234_ap_done,
        ap_idle => grp_keccak_absorb_1_fu_234_ap_idle,
        ap_ready => grp_keccak_absorb_1_fu_234_ap_ready,
        s_address0 => grp_keccak_absorb_1_fu_234_s_address0,
        s_ce0 => grp_keccak_absorb_1_fu_234_s_ce0,
        s_we0 => grp_keccak_absorb_1_fu_234_s_we0,
        s_d0 => grp_keccak_absorb_1_fu_234_s_d0,
        s_q0 => s_q0,
        m_address0 => grp_keccak_absorb_1_fu_234_m_address0,
        m_ce0 => grp_keccak_absorb_1_fu_234_m_ce0,
        m_q0 => inbuf_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_keccak_absorb_1_fu_234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_1_fu_234_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_keccak_absorb_1_fu_234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_1_fu_234_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_1_fu_234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_3_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_3_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctr_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ctr_reg_202 <= ap_phi_mux_ctr_be_phi_fu_218_p4;
            elsif (((grp_keccak_squeezeblocks_3_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                ctr_reg_202 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_167 <= i_31_reg_436;
            elsif (((tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_167 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_156 <= i_30_reg_413;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_156 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_141_fu_328_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_reg_179 <= j_10_reg_449;
            elsif (((exitcond1_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_179 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    pos_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                pos_reg_190 <= pos_3_reg_482;
            elsif (((grp_keccak_squeezeblocks_3_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                pos_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_30_reg_413 <= i_30_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_31_reg_436 <= i_31_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_10_reg_449 <= j_10_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                output_assign_load_reg_472 <= output_assign_q0;
                pos_3_reg_482 <= pos_3_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_143_cast_reg_441(4 downto 2) <= tmp_143_cast_fu_277_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_144_reg_454 <= tmp_144_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_keccak_squeezeblocks_3_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_148_cast_reg_459(13 downto 8) <= tmp_148_cast_fu_321_p3(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_418(5 downto 0) <= tmp_s_fu_252_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_418(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_143_cast_reg_441(1 downto 0) <= "00";
    tmp_143_cast_reg_441(5) <= '0';
    tmp_148_cast_reg_459(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_240_p2, ap_CS_fsm_state4, exitcond1_fu_257_p2, ap_CS_fsm_state5, exitcond_fu_281_p2, ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_ap_done, ap_CS_fsm_state10, tmp_141_fu_328_p3, grp_keccak_absorb_1_fu_234_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond1_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_keccak_absorb_1_fu_234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_keccak_squeezeblocks_3_fu_226_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((tmp_141_fu_328_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond1_fu_257_p2)
    begin
        if ((((exitcond1_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ctr_be_phi_fu_218_p4_assign_proc : process(ap_CS_fsm_state12, ctr_reg_202, ctr_1_fu_389_p2, tmp_149_fu_383_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((tmp_149_fu_383_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_ctr_be_phi_fu_218_p4 <= ctr_reg_202;
            elsif ((tmp_149_fu_383_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_ctr_be_phi_fu_218_p4 <= ctr_1_fu_389_p2;
            else 
                ap_phi_mux_ctr_be_phi_fu_218_p4 <= "XXXXXXXXX";
            end if;
        else 
            ap_phi_mux_ctr_be_phi_fu_218_p4 <= "XXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_257_p2)
    begin
        if (((exitcond1_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctr_1_fu_389_p2 <= std_logic_vector(unsigned(ctr_reg_202) + unsigned(ap_const_lv9_1));
    exitcond1_fu_257_p2 <= "1" when (i_1_reg_167 = ap_const_lv3_5) else "0";
    exitcond_fu_281_p2 <= "1" when (j_reg_179 = ap_const_lv3_4) else "0";
    grp_keccak_absorb_1_fu_234_ap_start <= grp_keccak_absorb_1_fu_234_ap_start_reg;
    grp_keccak_squeezeblocks_3_fu_226_ap_start <= grp_keccak_squeezeblocks_3_fu_226_ap_start_reg;
    i_30_fu_246_p2 <= std_logic_vector(unsigned(i_reg_156) + unsigned(ap_const_lv6_1));
    i_31_fu_263_p2 <= std_logic_vector(unsigned(i_1_reg_167) + unsigned(ap_const_lv3_1));

    inbuf_address0_assign_proc : process(tmp_s_reg_418, ap_CS_fsm_state5, grp_keccak_absorb_1_fu_234_m_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inbuf_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inbuf_address0 <= tmp_s_reg_418(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inbuf_address0 <= grp_keccak_absorb_1_fu_234_m_address0;
        else 
            inbuf_address0 <= "XXXXXX";
        end if; 
    end process;


    inbuf_ce0_assign_proc : process(ap_CS_fsm_state5, grp_keccak_absorb_1_fu_234_m_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inbuf_ce0 <= grp_keccak_absorb_1_fu_234_m_ce0;
        else 
            inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inbuf_d0_assign_proc : process(rho_q0, ap_CS_fsm_state5, ap_CS_fsm_state3, tmp_201_cast_fu_307_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inbuf_d0 <= tmp_201_cast_fu_307_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inbuf_d0 <= rho_q0;
        else 
            inbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    inbuf_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_fu_281_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((exitcond_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            inbuf_we0 <= ap_const_logic_1;
        else 
            inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    j_10_fu_287_p2 <= std_logic_vector(unsigned(j_reg_179) + unsigned(ap_const_lv3_1));
    mat_vec_coeffs_address0 <= tmp_155_cast_fu_405_p1(13 - 1 downto 0);

    mat_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            mat_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            mat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mat_vec_coeffs_d0 <= tmp_21_fu_373_p4;

    mat_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state12, tmp_149_fu_383_p2)
    begin
        if (((tmp_149_fu_383_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            mat_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            mat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_keccak_squeezeblocks_3_fu_226_h_address0, tmp_145_fu_336_p1, tmp_146_fu_353_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_assign_address0 <= tmp_146_fu_353_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_assign_address0 <= tmp_145_fu_336_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_assign_address0 <= grp_keccak_squeezeblocks_3_fu_226_h_address0;
        else 
            output_assign_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    output_assign_address1 <= tmp_147_fu_364_p1(10 - 1 downto 0);

    output_assign_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, grp_keccak_squeezeblocks_3_fu_226_h_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_assign_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_assign_ce0 <= grp_keccak_squeezeblocks_3_fu_226_h_ce0;
        else 
            output_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_ce1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_assign_ce1 <= ap_const_logic_1;
        else 
            output_assign_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_we0_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_h_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_assign_we0 <= grp_keccak_squeezeblocks_3_fu_226_h_we0;
        else 
            output_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pos_1_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(pos_reg_190));
    pos_2_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(pos_reg_190));
    pos_3_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(pos_reg_190));
    rho_address0 <= tmp_s_fu_252_p1(5 - 1 downto 0);

    rho_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            rho_ce0 <= ap_const_logic_1;
        else 
            rho_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_address0_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_address0, grp_keccak_absorb_1_fu_234_s_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= grp_keccak_absorb_1_fu_234_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_address0 <= grp_keccak_squeezeblocks_3_fu_226_s_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_ce0, grp_keccak_absorb_1_fu_234_s_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_ce0 <= grp_keccak_absorb_1_fu_234_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_ce0 <= grp_keccak_squeezeblocks_3_fu_226_s_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_ce1 <= grp_keccak_squeezeblocks_3_fu_226_s_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_d0, grp_keccak_absorb_1_fu_234_s_d0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= grp_keccak_absorb_1_fu_234_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_d0 <= grp_keccak_squeezeblocks_3_fu_226_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_we0, grp_keccak_absorb_1_fu_234_s_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_we0 <= grp_keccak_absorb_1_fu_234_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_we0 <= grp_keccak_squeezeblocks_3_fu_226_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state9, grp_keccak_squeezeblocks_3_fu_226_s_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_we1 <= grp_keccak_squeezeblocks_3_fu_226_s_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_140_fu_293_p1 <= j_reg_179(2 - 1 downto 0);
    tmp_141_fu_328_p3 <= ctr_reg_202(8 downto 8);
    tmp_142_fu_269_p3 <= (i_1_reg_167 & ap_const_lv2_0);
    tmp_143_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_269_p3),6));
    tmp_143_fu_297_p4 <= ((tmp_140_fu_293_p1 & ap_const_lv1_0) & i_1_reg_167);
    tmp_144_fu_316_p2 <= std_logic_vector(unsigned(tmp_143_cast_reg_441) + unsigned(tmp_145_cast_fu_312_p1));
    tmp_145_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_179),6));
    tmp_145_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_reg_190),64));
    tmp_146_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_1_fu_341_p2),64));
    tmp_147_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_2_fu_347_p2),64));
    tmp_148_cast_fu_321_p3 <= (tmp_144_reg_454 & ap_const_lv8_0);
    tmp_148_fu_369_p1 <= output_assign_q1(7 - 1 downto 0);
    tmp_149_fu_383_p2 <= "1" when (unsigned(tmp_21_fu_373_p4) < unsigned(ap_const_lv23_7FE001)) else "0";
    tmp_150_fu_400_p2 <= std_logic_vector(unsigned(tmp_148_cast_reg_459) + unsigned(tmp_154_cast_fu_396_p1));
    tmp_154_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ctr_reg_202),14));
    tmp_155_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_400_p2),64));
    tmp_201_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_297_p4),8));
    tmp_21_fu_373_p4 <= ((tmp_148_fu_369_p1 & output_assign_q0) & output_assign_load_reg_472);
    tmp_fu_240_p2 <= "1" when (i_reg_156 = ap_const_lv6_20) else "0";
    tmp_s_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
end behav;

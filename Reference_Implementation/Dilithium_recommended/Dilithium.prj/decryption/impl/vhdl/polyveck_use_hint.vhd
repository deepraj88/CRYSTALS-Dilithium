-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyveck_use_hint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    w_vec_coeffs_ce0 : OUT STD_LOGIC;
    w_vec_coeffs_we0 : OUT STD_LOGIC;
    w_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    u_vec_coeffs_ce0 : OUT STD_LOGIC;
    u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    h_vec_coeffs_ce0 : OUT STD_LOGIC;
    h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of polyveck_use_hint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_7C00FF : STD_LOGIC_VECTOR (22 downto 0) := "11111000000000011111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_7FE00 : STD_LOGIC_VECTOR (23 downto 0) := "000001111111111000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_3FEFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000111111111011111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv24_7BE102 : STD_LOGIC_VECTOR (23 downto 0) := "011110111110000100000010";
    constant ap_const_lv24_7FE001 : STD_LOGIC_VECTOR (23 downto 0) := "011111111110000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_14_fu_149_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_14_reg_446 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_63_cast_fu_163_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_cast_reg_451 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_173_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_6_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_64_cast_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_vec_coeffs_load_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_9_fu_255_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_9_reg_480 : STD_LOGIC_VECTOR (23 downto 0);
    signal a1_fu_333_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal a1_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_250_i_i_reg_494 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_i_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_121 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_132 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_56_fu_155_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_cast_fu_179_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_fu_183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_fu_193_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_58_fu_201_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_i_fu_211_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i_i_cast_fu_219_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp4_fu_223_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp4_cast_fu_229_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_cast_fu_197_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_8_fu_233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_59_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_248_i_i_cast_cas_fu_247_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_1_i_i_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_11_cast_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_4_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_281_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_cast_fu_309_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_249_i_i_cast_fu_291_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_313_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_fu_323_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_assign_5_fu_327_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_251_i_i_fu_352_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_250_i_i_cast_fu_349_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a0_fu_357_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_7_cast_fu_372_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_i_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_380_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_i_fu_386_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_i_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_i_fu_409_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_cast_fu_394_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_i_cast_fu_417_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp2_fu_426_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_assign_7_cast6_fu_369_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_121 <= i_14_reg_446;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_121 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_132 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_132 <= j_6_reg_459;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                a1_reg_486 <= a1_fu_333_p2;
                tmp_250_i_i_reg_494 <= a_assign_5_fu_327_p2(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_14_reg_446 <= i_14_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_6_reg_459 <= j_6_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_9_reg_480 <= t_9_fu_255_p2;
                u_vec_coeffs_load_reg_475 <= u_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_1_i_reg_504 <= tmp_1_i_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_63_cast_reg_451(10 downto 8) <= tmp_63_cast_fu_163_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_64_cast_reg_464(11 downto 0) <= tmp_64_cast_fu_188_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_63_cast_reg_451(7 downto 0) <= "00000000";
    tmp_63_cast_reg_451(11) <= '0';
    tmp_64_cast_reg_464(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_143_p2, ap_CS_fsm_state3, tmp_s_fu_167_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a0_fu_357_p2 <= std_logic_vector(unsigned(tmp_251_i_i_fu_352_p2) - unsigned(tmp_250_i_i_cast_fu_349_p1));
    a1_fu_333_p2 <= std_logic_vector(unsigned(tmp_29_fu_313_p4) + unsigned(tmp_30_fu_323_p1));
    a_assign_4_fu_269_p2 <= std_logic_vector(unsigned(t_1_i_i_fu_264_p2) - unsigned(t_11_cast_fu_261_p1));
    a_assign_5_fu_327_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_309_p1) + unsigned(tmp_249_i_i_cast_fu_291_p1));
    a_assign_7_cast6_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_reg_486),6));
    a_assign_7_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_reg_486),5));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_143_p2)
    begin
        if ((((tmp_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_143_p2)
    begin
        if (((tmp_fu_143_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    h_vec_coeffs_address0 <= tmp_64_cast_reg_464(11 - 1 downto 0);

    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_14_fu_149_p2 <= std_logic_vector(unsigned(i_reg_121) + unsigned(ap_const_lv3_1));
    j_6_fu_173_p2 <= std_logic_vector(unsigned(j_reg_132) + unsigned(ap_const_lv9_1));
    sel_tmp1_fu_421_p2 <= (tmp_1_i_reg_504 and h_vec_coeffs_q0);
    sel_tmp2_fu_426_p3 <= 
        tmp_4_i_cast_fu_394_p1 when (sel_tmp1_fu_421_p2(0) = '1') else 
        tmp_7_i_cast_fu_417_p1;
        t_11_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_9_reg_480),32));

    t_1_i_i_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FEFF) + unsigned(u_vec_coeffs_load_reg_475));
    t_8_fu_233_p2 <= std_logic_vector(signed(tmp4_cast_fu_229_p1) + signed(t_cast_fu_197_p1));
    t_9_fu_255_p2 <= std_logic_vector(unsigned(tmp_248_i_i_cast_cas_fu_247_p3) + unsigned(t_8_fu_233_p2));
    t_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_193_p1),24));
    t_fu_193_p1 <= u_vec_coeffs_q0(19 - 1 downto 0);
        tmp4_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_223_p2),24));

    tmp4_fu_223_p2 <= std_logic_vector(signed(ap_const_lv23_7C00FF) + signed(tmp_i_i_cast_fu_219_p1));
    tmp5_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_303_p2),14));
    tmp5_fu_303_p2 <= (tmp_61_fu_295_p3 xor ap_const_lv1_1);
    tmp_1_i_fu_363_p2 <= "1" when (unsigned(a0_fu_357_p2) > unsigned(ap_const_lv24_7FE001)) else "0";
    tmp_248_i_i_cast_cas_fu_247_p3 <= 
        ap_const_lv24_7FE00 when (tmp_59_fu_239_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_249_i_i_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_281_p4),14));
    tmp_250_i_i_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_250_i_i_reg_494),24));
    tmp_251_i_i_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv24_7BE102) + unsigned(t_9_reg_480));
    tmp_29_fu_313_p4 <= a_assign_4_fu_269_p2(22 downto 19);
    tmp_2_i_fu_375_p2 <= "1" when (a1_reg_486 = ap_const_lv4_F) else "0";
    tmp_30_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_303_p2),4));
    tmp_34_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_132),12));
    tmp_3_i_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(a_assign_7_cast_fu_372_p1));
    tmp_4_i_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_fu_386_p3),6));
    tmp_4_i_fu_386_p3 <= 
        ap_const_lv5_0 when (tmp_2_i_fu_375_p2(0) = '1') else 
        tmp_3_i_fu_380_p2;
    tmp_56_fu_155_p3 <= (i_reg_121 & ap_const_lv8_0);
    tmp_57_fu_183_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_179_p1) + unsigned(tmp_63_cast_reg_451));
    tmp_58_fu_201_p4 <= u_vec_coeffs_q0(31 downto 19);
    tmp_59_fu_239_p3 <= t_8_fu_233_p2(23 downto 23);
    tmp_5_i_fu_398_p2 <= "1" when (a1_reg_486 = ap_const_lv4_0) else "0";
    tmp_60_fu_281_p4 <= a_assign_4_fu_269_p2(31 downto 19);
    tmp_61_fu_295_p3 <= u_fu_275_p2(31 downto 31);
    tmp_63_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_155_p3),12));
    tmp_64_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_183_p2),64));
    tmp_6_i_fu_403_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(a_assign_7_cast_fu_372_p1));
        tmp_7_i_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_i_fu_409_p3),6));

    tmp_7_i_fu_409_p3 <= 
        ap_const_lv5_F when (tmp_5_i_fu_398_p2(0) = '1') else 
        tmp_6_i_fu_403_p2;
    tmp_fu_143_p2 <= "1" when (i_reg_121 = ap_const_lv3_5) else "0";
    tmp_i_i_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_211_p3),23));
    tmp_i_i_fu_211_p3 <= (tmp_58_fu_201_p4 & ap_const_lv9_0);
    tmp_s_fu_167_p2 <= "1" when (j_reg_132 = ap_const_lv9_100) else "0";
    u_fu_275_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_assign_4_fu_269_p2));
    u_vec_coeffs_address0 <= tmp_64_cast_fu_188_p1(11 - 1 downto 0);

    u_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            u_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            u_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_vec_coeffs_address0 <= tmp_64_cast_reg_464(11 - 1 downto 0);

    w_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            w_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_vec_coeffs_d0 <= 
        sel_tmp2_fu_426_p3 when (h_vec_coeffs_q0(0) = '1') else 
        a_assign_7_cast6_fu_369_p1;

    w_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            w_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            w_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

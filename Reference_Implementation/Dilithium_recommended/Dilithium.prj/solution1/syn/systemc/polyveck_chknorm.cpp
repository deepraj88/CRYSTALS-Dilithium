// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "polyveck_chknorm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic polyveck_chknorm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic polyveck_chknorm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> polyveck_chknorm::ap_ST_fsm_state1 = "1";
const sc_lv<5> polyveck_chknorm::ap_ST_fsm_state2 = "10";
const sc_lv<5> polyveck_chknorm::ap_ST_fsm_state3 = "100";
const sc_lv<5> polyveck_chknorm::ap_ST_fsm_state4 = "1000";
const sc_lv<5> polyveck_chknorm::ap_ST_fsm_state5 = "10000";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_1 = "1";
const sc_lv<1> polyveck_chknorm::ap_const_lv1_0 = "0";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_2 = "10";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_3 = "11";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_4 = "100";
const sc_lv<1> polyveck_chknorm::ap_const_lv1_1 = "1";
const sc_lv<3> polyveck_chknorm::ap_const_lv3_0 = "000";
const sc_lv<9> polyveck_chknorm::ap_const_lv9_0 = "000000000";
const sc_lv<3> polyveck_chknorm::ap_const_lv3_5 = "101";
const sc_lv<3> polyveck_chknorm::ap_const_lv3_1 = "1";
const sc_lv<8> polyveck_chknorm::ap_const_lv8_0 = "00000000";
const sc_lv<9> polyveck_chknorm::ap_const_lv9_100 = "100000000";
const sc_lv<9> polyveck_chknorm::ap_const_lv9_1 = "1";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_3FF000 = "1111111111000000000000";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_1F = "11111";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> polyveck_chknorm::ap_const_lv32_3FDED = "111111110111101101";
const bool polyveck_chknorm::ap_const_boolean_1 = true;

polyveck_chknorm::polyveck_chknorm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_111_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_p_0_i_phi_fu_103_p4);
    sensitive << ( tmp_i_reg_241 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_171_i_fu_194_p2 );
    sensitive << ( p_0_i_reg_99 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_111_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_111_p2 );
    sensitive << ( ret_reg_76 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_i_27_fu_117_p2);
    sensitive << ( i_reg_65 );

    SC_METHOD(thread_i_4_fu_141_p2);
    sensitive << ( i_i_reg_88 );

    SC_METHOD(thread_ret_1_fu_220_p3);
    sensitive << ( tmp_37_fu_210_p4 );
    sensitive << ( tmp_36_fu_204_p2 );

    SC_METHOD(thread_t_17_fu_182_p2);
    sensitive << ( t_fu_161_p2 );
    sensitive << ( tmp_170_i_fu_174_p3 );

    SC_METHOD(thread_t_18_fu_188_p2);
    sensitive << ( t_17_fu_182_p2 );

    SC_METHOD(thread_t_fu_161_p2);
    sensitive << ( v_vec_coeffs_load_reg_255 );

    SC_METHOD(thread_tmp_170_i_fu_174_p3);
    sensitive << ( tmp_77_fu_166_p3 );

    SC_METHOD(thread_tmp_171_i_fu_194_p2);
    sensitive << ( tmp_i_reg_241 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( t_18_fu_188_p2 );

    SC_METHOD(thread_tmp_36_fu_204_p2);
    sensitive << ( ap_phi_mux_p_0_i_phi_fu_103_p4 );
    sensitive << ( tmp_78_fu_200_p1 );

    SC_METHOD(thread_tmp_37_fu_210_p4);
    sensitive << ( ret_reg_76 );

    SC_METHOD(thread_tmp_76_fu_151_p2);
    sensitive << ( tmp_81_cast_reg_236 );
    sensitive << ( tmp_i_cast_fu_147_p1 );

    SC_METHOD(thread_tmp_77_fu_166_p3);
    sensitive << ( t_fu_161_p2 );

    SC_METHOD(thread_tmp_78_fu_200_p1);
    sensitive << ( ret_reg_76 );

    SC_METHOD(thread_tmp_81_cast_fu_131_p1);
    sensitive << ( tmp_s_fu_123_p3 );

    SC_METHOD(thread_tmp_82_cast_fu_156_p1);
    sensitive << ( tmp_76_fu_151_p2 );

    SC_METHOD(thread_tmp_fu_111_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_65 );

    SC_METHOD(thread_tmp_i_cast_fu_147_p1);
    sensitive << ( i_i_reg_88 );

    SC_METHOD(thread_tmp_i_fu_135_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_i_reg_88 );

    SC_METHOD(thread_tmp_s_fu_123_p3);
    sensitive << ( i_reg_65 );

    SC_METHOD(thread_v_vec_coeffs_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_82_cast_fu_156_p1 );

    SC_METHOD(thread_v_vec_coeffs_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_111_p2 );
    sensitive << ( tmp_i_fu_135_p2 );
    sensitive << ( tmp_i_reg_241 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_171_i_fu_194_p2 );

    ap_CS_fsm = "00001";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "polyveck_chknorm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, v_vec_coeffs_address0, "(port)v_vec_coeffs_address0");
    sc_trace(mVcdFile, v_vec_coeffs_ce0, "(port)v_vec_coeffs_ce0");
    sc_trace(mVcdFile, v_vec_coeffs_q0, "(port)v_vec_coeffs_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_27_fu_117_p2, "i_27_fu_117_p2");
    sc_trace(mVcdFile, i_27_reg_231, "i_27_reg_231");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_81_cast_fu_131_p1, "tmp_81_cast_fu_131_p1");
    sc_trace(mVcdFile, tmp_81_cast_reg_236, "tmp_81_cast_reg_236");
    sc_trace(mVcdFile, tmp_fu_111_p2, "tmp_fu_111_p2");
    sc_trace(mVcdFile, tmp_i_fu_135_p2, "tmp_i_fu_135_p2");
    sc_trace(mVcdFile, tmp_i_reg_241, "tmp_i_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_4_fu_141_p2, "i_4_fu_141_p2");
    sc_trace(mVcdFile, i_4_reg_245, "i_4_reg_245");
    sc_trace(mVcdFile, v_vec_coeffs_load_reg_255, "v_vec_coeffs_load_reg_255");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ret_1_fu_220_p3, "ret_1_fu_220_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_171_i_fu_194_p2, "tmp_171_i_fu_194_p2");
    sc_trace(mVcdFile, i_reg_65, "i_reg_65");
    sc_trace(mVcdFile, ret_reg_76, "ret_reg_76");
    sc_trace(mVcdFile, i_i_reg_88, "i_i_reg_88");
    sc_trace(mVcdFile, ap_phi_mux_p_0_i_phi_fu_103_p4, "ap_phi_mux_p_0_i_phi_fu_103_p4");
    sc_trace(mVcdFile, p_0_i_reg_99, "p_0_i_reg_99");
    sc_trace(mVcdFile, tmp_82_cast_fu_156_p1, "tmp_82_cast_fu_156_p1");
    sc_trace(mVcdFile, tmp_s_fu_123_p3, "tmp_s_fu_123_p3");
    sc_trace(mVcdFile, tmp_i_cast_fu_147_p1, "tmp_i_cast_fu_147_p1");
    sc_trace(mVcdFile, tmp_76_fu_151_p2, "tmp_76_fu_151_p2");
    sc_trace(mVcdFile, t_fu_161_p2, "t_fu_161_p2");
    sc_trace(mVcdFile, tmp_77_fu_166_p3, "tmp_77_fu_166_p3");
    sc_trace(mVcdFile, tmp_170_i_fu_174_p3, "tmp_170_i_fu_174_p3");
    sc_trace(mVcdFile, t_17_fu_182_p2, "t_17_fu_182_p2");
    sc_trace(mVcdFile, t_18_fu_188_p2, "t_18_fu_188_p2");
    sc_trace(mVcdFile, tmp_78_fu_200_p1, "tmp_78_fu_200_p1");
    sc_trace(mVcdFile, tmp_37_fu_210_p4, "tmp_37_fu_210_p4");
    sc_trace(mVcdFile, tmp_36_fu_204_p2, "tmp_36_fu_204_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

polyveck_chknorm::~polyveck_chknorm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void polyveck_chknorm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_return_preg = ret_reg_76.read();
        }
    }
    if ((esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        i_i_reg_88 = i_4_reg_245.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_i_reg_88 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         (esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_0)))) {
        i_reg_65 = i_27_reg_231.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_65 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_0))) {
        p_0_i_reg_99 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(tmp_i_fu_135_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        p_0_i_reg_99 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         (esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_0)))) {
        ret_reg_76 = ret_1_fu_220_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ret_reg_76 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_27_reg_231 = i_27_fu_117_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_4_reg_245 = i_4_fu_141_p2.read();
        tmp_i_reg_241 = tmp_i_fu_135_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_81_cast_reg_236 = tmp_81_cast_fu_131_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        v_vec_coeffs_load_reg_255 = v_vec_coeffs_q0.read();
    }
}

void polyveck_chknorm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void polyveck_chknorm::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void polyveck_chknorm::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void polyveck_chknorm::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void polyveck_chknorm::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void polyveck_chknorm::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void polyveck_chknorm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void polyveck_chknorm::thread_ap_phi_mux_p_0_i_phi_fu_103_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_0))) {
        ap_phi_mux_p_0_i_phi_fu_103_p4 = ap_const_lv1_1;
    } else {
        ap_phi_mux_p_0_i_phi_fu_103_p4 = p_0_i_reg_99.read();
    }
}

void polyveck_chknorm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void polyveck_chknorm::thread_ap_return() {
    if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_return = ret_reg_76.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void polyveck_chknorm::thread_i_27_fu_117_p2() {
    i_27_fu_117_p2 = (!i_reg_65.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_65.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void polyveck_chknorm::thread_i_4_fu_141_p2() {
    i_4_fu_141_p2 = (!i_i_reg_88.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(i_i_reg_88.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void polyveck_chknorm::thread_ret_1_fu_220_p3() {
    ret_1_fu_220_p3 = esl_concat<31,1>(tmp_37_fu_210_p4.read(), tmp_36_fu_204_p2.read());
}

void polyveck_chknorm::thread_t_17_fu_182_p2() {
    t_17_fu_182_p2 = (t_fu_161_p2.read() ^ tmp_170_i_fu_174_p3.read());
}

void polyveck_chknorm::thread_t_18_fu_188_p2() {
    t_18_fu_188_p2 = (!ap_const_lv32_3FF000.is_01() || !t_17_fu_182_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_3FF000) - sc_biguint<32>(t_17_fu_182_p2.read()));
}

void polyveck_chknorm::thread_t_fu_161_p2() {
    t_fu_161_p2 = (!ap_const_lv32_3FF000.is_01() || !v_vec_coeffs_load_reg_255.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_3FF000) - sc_biguint<32>(v_vec_coeffs_load_reg_255.read()));
}

void polyveck_chknorm::thread_tmp_170_i_fu_174_p3() {
    tmp_170_i_fu_174_p3 = (!tmp_77_fu_166_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_77_fu_166_p3.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void polyveck_chknorm::thread_tmp_171_i_fu_194_p2() {
    tmp_171_i_fu_194_p2 = (!t_18_fu_188_p2.read().is_01() || !ap_const_lv32_3FDED.is_01())? sc_lv<1>(): (sc_biguint<32>(t_18_fu_188_p2.read()) < sc_biguint<32>(ap_const_lv32_3FDED));
}

void polyveck_chknorm::thread_tmp_36_fu_204_p2() {
    tmp_36_fu_204_p2 = (tmp_78_fu_200_p1.read() | ap_phi_mux_p_0_i_phi_fu_103_p4.read());
}

void polyveck_chknorm::thread_tmp_37_fu_210_p4() {
    tmp_37_fu_210_p4 = ret_reg_76.read().range(31, 1);
}

void polyveck_chknorm::thread_tmp_76_fu_151_p2() {
    tmp_76_fu_151_p2 = (!tmp_81_cast_reg_236.read().is_01() || !tmp_i_cast_fu_147_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_81_cast_reg_236.read()) + sc_biguint<12>(tmp_i_cast_fu_147_p1.read()));
}

void polyveck_chknorm::thread_tmp_77_fu_166_p3() {
    tmp_77_fu_166_p3 = t_fu_161_p2.read().range(31, 31);
}

void polyveck_chknorm::thread_tmp_78_fu_200_p1() {
    tmp_78_fu_200_p1 = ret_reg_76.read().range(1-1, 0);
}

void polyveck_chknorm::thread_tmp_81_cast_fu_131_p1() {
    tmp_81_cast_fu_131_p1 = esl_zext<12,11>(tmp_s_fu_123_p3.read());
}

void polyveck_chknorm::thread_tmp_82_cast_fu_156_p1() {
    tmp_82_cast_fu_156_p1 = esl_zext<64,12>(tmp_76_fu_151_p2.read());
}

void polyveck_chknorm::thread_tmp_fu_111_p2() {
    tmp_fu_111_p2 = (!i_reg_65.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_65.read() == ap_const_lv3_5);
}

void polyveck_chknorm::thread_tmp_i_cast_fu_147_p1() {
    tmp_i_cast_fu_147_p1 = esl_zext<12,9>(i_i_reg_88.read());
}

void polyveck_chknorm::thread_tmp_i_fu_135_p2() {
    tmp_i_fu_135_p2 = (!i_i_reg_88.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_88.read() == ap_const_lv9_100);
}

void polyveck_chknorm::thread_tmp_s_fu_123_p3() {
    tmp_s_fu_123_p3 = esl_concat<3,8>(i_reg_65.read(), ap_const_lv8_0);
}

void polyveck_chknorm::thread_v_vec_coeffs_address0() {
    v_vec_coeffs_address0 =  (sc_lv<11>) (tmp_82_cast_fu_156_p1.read());
}

void polyveck_chknorm::thread_v_vec_coeffs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        v_vec_coeffs_ce0 = ap_const_logic_1;
    } else {
        v_vec_coeffs_ce0 = ap_const_logic_0;
    }
}

void polyveck_chknorm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_111_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_i_fu_135_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && (esl_seteq<1,1,1>(tmp_i_reg_241.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_171_i_fu_194_p2.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}


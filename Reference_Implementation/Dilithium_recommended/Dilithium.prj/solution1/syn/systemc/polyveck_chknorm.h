// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _polyveck_chknorm_HH_
#define _polyveck_chknorm_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct polyveck_chknorm : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > v_vec_coeffs_address0;
    sc_out< sc_logic > v_vec_coeffs_ce0;
    sc_in< sc_lv<32> > v_vec_coeffs_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    polyveck_chknorm(sc_module_name name);
    SC_HAS_PROCESS(polyveck_chknorm);

    ~polyveck_chknorm();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_27_fu_117_p2;
    sc_signal< sc_lv<3> > i_27_reg_231;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > tmp_81_cast_fu_131_p1;
    sc_signal< sc_lv<12> > tmp_81_cast_reg_236;
    sc_signal< sc_lv<1> > tmp_fu_111_p2;
    sc_signal< sc_lv<1> > tmp_i_fu_135_p2;
    sc_signal< sc_lv<1> > tmp_i_reg_241;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > i_4_fu_141_p2;
    sc_signal< sc_lv<9> > i_4_reg_245;
    sc_signal< sc_lv<32> > v_vec_coeffs_load_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > ret_1_fu_220_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_171_i_fu_194_p2;
    sc_signal< sc_lv<3> > i_reg_65;
    sc_signal< sc_lv<32> > ret_reg_76;
    sc_signal< sc_lv<9> > i_i_reg_88;
    sc_signal< sc_lv<1> > ap_phi_mux_p_0_i_phi_fu_103_p4;
    sc_signal< sc_lv<1> > p_0_i_reg_99;
    sc_signal< sc_lv<64> > tmp_82_cast_fu_156_p1;
    sc_signal< sc_lv<11> > tmp_s_fu_123_p3;
    sc_signal< sc_lv<12> > tmp_i_cast_fu_147_p1;
    sc_signal< sc_lv<12> > tmp_76_fu_151_p2;
    sc_signal< sc_lv<32> > t_fu_161_p2;
    sc_signal< sc_lv<1> > tmp_77_fu_166_p3;
    sc_signal< sc_lv<32> > tmp_170_i_fu_174_p3;
    sc_signal< sc_lv<32> > t_17_fu_182_p2;
    sc_signal< sc_lv<32> > t_18_fu_188_p2;
    sc_signal< sc_lv<1> > tmp_78_fu_200_p1;
    sc_signal< sc_lv<31> > tmp_37_fu_210_p4;
    sc_signal< sc_lv<1> > tmp_36_fu_204_p2;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_3FF000;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_3FDED;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_0_i_phi_fu_103_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_27_fu_117_p2();
    void thread_i_4_fu_141_p2();
    void thread_ret_1_fu_220_p3();
    void thread_t_17_fu_182_p2();
    void thread_t_18_fu_188_p2();
    void thread_t_fu_161_p2();
    void thread_tmp_170_i_fu_174_p3();
    void thread_tmp_171_i_fu_194_p2();
    void thread_tmp_36_fu_204_p2();
    void thread_tmp_37_fu_210_p4();
    void thread_tmp_76_fu_151_p2();
    void thread_tmp_77_fu_166_p3();
    void thread_tmp_78_fu_200_p1();
    void thread_tmp_81_cast_fu_131_p1();
    void thread_tmp_82_cast_fu_156_p1();
    void thread_tmp_fu_111_p2();
    void thread_tmp_i_cast_fu_147_p1();
    void thread_tmp_i_fu_135_p2();
    void thread_tmp_s_fu_123_p3();
    void thread_v_vec_coeffs_address0();
    void thread_v_vec_coeffs_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        m_address0,
        m_ce0,
        m_q0,
        mlen
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
output  [12:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [63:0] mlen;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg s_ce1;
reg s_we1;
reg[12:0] m_address0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_58_fu_320_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_139_fu_331_p1;
wire   [0:0] tmp_fu_314_p2;
wire   [13:0] tmp_140_fu_334_p1;
reg   [13:0] tmp_140_reg_649;
wire    ap_CS_fsm_state3;
wire   [4:0] i_10_fu_350_p2;
reg   [4:0] i_10_reg_661;
wire    ap_CS_fsm_state4;
wire   [13:0] tmp1_fu_368_p2;
reg   [13:0] tmp1_reg_666;
wire   [0:0] exitcond7_fu_344_p2;
wire   [63:0] p_rec_fu_373_p2;
reg   [63:0] p_rec_reg_671;
wire   [3:0] i_61_fu_385_p2;
reg   [3:0] i_61_reg_679;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_i_fu_379_p2;
reg   [4:0] s_addr_5_reg_689;
wire   [63:0] r_fu_446_p2;
wire    ap_CS_fsm_state6;
wire   [63:0] mlen_assign_fu_459_p2;
wire    ap_CS_fsm_state8;
wire    grp_KeccakF1600_StatePer_fu_306_ap_idle;
wire    grp_KeccakF1600_StatePer_fu_306_ap_ready;
wire    grp_KeccakF1600_StatePer_fu_306_ap_done;
wire   [31:0] indvars_iv_next_fu_465_p2;
wire   [7:0] i_60_fu_477_p2;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_127_fu_488_p1;
reg   [63:0] tmp_127_reg_717;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_129_fu_502_p2;
reg   [7:0] tmp_129_reg_725;
wire   [0:0] tmp_128_fu_496_p2;
wire   [7:0] t_addr_4_reg_735;
wire    ap_CS_fsm_state12;
wire   [4:0] i_62_fu_546_p2;
reg   [4:0] i_62_reg_743;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_134_fu_552_p3;
reg   [7:0] tmp_134_reg_748;
wire   [0:0] exitcond8_fu_540_p2;
wire   [3:0] i_11_fu_566_p2;
reg   [3:0] i_11_reg_756;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_i3_fu_560_p2;
reg   [4:0] s_addr_6_reg_766;
wire   [63:0] r_2_fu_617_p2;
wire    ap_CS_fsm_state16;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
wire    grp_KeccakF1600_StatePer_fu_306_ap_start;
wire   [4:0] grp_KeccakF1600_StatePer_fu_306_state_address0;
wire    grp_KeccakF1600_StatePer_fu_306_state_ce0;
wire    grp_KeccakF1600_StatePer_fu_306_state_we0;
wire   [63:0] grp_KeccakF1600_StatePer_fu_306_state_d0;
wire   [4:0] grp_KeccakF1600_StatePer_fu_306_state_address1;
wire    grp_KeccakF1600_StatePer_fu_306_state_ce1;
wire    grp_KeccakF1600_StatePer_fu_306_state_we1;
wire   [63:0] grp_KeccakF1600_StatePer_fu_306_state_d1;
reg   [4:0] i_reg_169;
reg   [31:0] i_59_reg_180;
reg   [63:0] p_01_rec_reg_190;
reg   [63:0] p_0_reg_202;
reg   [4:0] i_1_reg_212;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_124_fu_338_p2;
reg   [3:0] i_i_reg_224;
reg   [63:0] r_i_reg_236;
reg   [7:0] i_2_reg_248;
wire   [0:0] exitcond_fu_471_p2;
reg   [7:0] i_3_reg_259;
wire    ap_CS_fsm_state11;
reg   [4:0] i_4_reg_270;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
reg   [3:0] i_i1_reg_282;
reg   [63:0] r_i2_reg_294;
reg    grp_KeccakF1600_StatePer_fu_306_ap_start_reg;
wire   [63:0] tmp_s_fu_326_p1;
wire   [63:0] sum_i_cast_fu_410_p1;
wire   [63:0] tmp_132_fu_415_p1;
wire   [63:0] tmp_125_fu_483_p1;
wire   [63:0] sum2_cast_fu_523_p1;
wire   [63:0] tmp_130_fu_528_p1;
wire   [63:0] sum_i5_cast_fu_581_p1;
wire   [63:0] tmp_135_fu_586_p1;
wire   [63:0] tmp_133_fu_452_p2;
wire   [63:0] tmp_136_fu_623_p2;
wire   [7:0] tmp_131_fu_533_p2;
wire   [7:0] tmp_126_fu_356_p3;
wire   [13:0] tmp_207_cast_fu_364_p1;
wire   [11:0] tmp_i_cast_fu_391_p1;
wire   [11:0] tmp2_fu_395_p2;
wire   [13:0] tmp2_cast_fu_401_p1;
wire   [13:0] sum_i_fu_405_p2;
wire   [2:0] tmp_141_fu_424_p1;
wire   [5:0] tmp_224_i_fu_428_p3;
wire   [63:0] tmp_223_i_fu_420_p1;
wire   [63:0] tmp_225_i_fu_436_p1;
wire   [63:0] tmp_226_i_fu_440_p2;
wire   [11:0] tmp_208_cast_fu_492_p1;
wire   [11:0] tmp3_fu_508_p2;
wire   [13:0] tmp3_cast_fu_514_p1;
wire   [13:0] sum2_fu_518_p2;
wire   [7:0] tmp_i4_cast_fu_572_p1;
wire   [7:0] sum_i5_fu_576_p2;
wire   [2:0] tmp_142_fu_595_p1;
wire   [5:0] tmp_224_i9_fu_599_p3;
wire   [63:0] tmp_223_i8_fu_591_p1;
wire   [63:0] tmp_225_i2_fu_607_p1;
wire   [63:0] tmp_226_i2_fu_611_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 grp_KeccakF1600_StatePer_fu_306_ap_start_reg = 1'b0;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

KeccakF1600_StatePer grp_KeccakF1600_StatePer_fu_306(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePer_fu_306_ap_start),
    .ap_done(grp_KeccakF1600_StatePer_fu_306_ap_done),
    .ap_idle(grp_KeccakF1600_StatePer_fu_306_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePer_fu_306_ap_ready),
    .state_address0(grp_KeccakF1600_StatePer_fu_306_state_address0),
    .state_ce0(grp_KeccakF1600_StatePer_fu_306_state_ce0),
    .state_we0(grp_KeccakF1600_StatePer_fu_306_state_we0),
    .state_d0(grp_KeccakF1600_StatePer_fu_306_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePer_fu_306_state_address1),
    .state_ce1(grp_KeccakF1600_StatePer_fu_306_state_ce1),
    .state_we1(grp_KeccakF1600_StatePer_fu_306_state_we1),
    .state_d1(grp_KeccakF1600_StatePer_fu_306_state_d1),
    .state_q1(s_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond7_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePer_fu_306_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_124_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_212 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_1_reg_212 <= i_10_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_124_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_248 <= 8'd0;
    end else if (((exitcond_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_reg_248 <= i_60_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_3_reg_259 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_259 <= tmp_129_reg_725;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_4_reg_270 <= i_62_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_4_reg_270 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_59_reg_180 <= tmp_139_fu_331_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_306_ap_done == 1'b1))) begin
        i_59_reg_180 <= indvars_iv_next_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_i1_reg_282 <= i_11_reg_756;
    end else if (((exitcond8_fu_540_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_i1_reg_282 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_i_reg_224 <= i_61_reg_679;
    end else if (((exitcond7_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_i_reg_224 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_169 <= i_58_fu_320_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_169 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_01_rec_reg_190 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_306_ap_done == 1'b1))) begin
        p_01_rec_reg_190 <= p_rec_reg_671;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_reg_202 <= mlen;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_306_ap_done == 1'b1))) begin
        p_0_reg_202 <= mlen_assign_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_i2_reg_294 <= r_2_fu_617_p2;
    end else if (((exitcond8_fu_540_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        r_i2_reg_294 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_i_reg_236 <= r_fu_446_p2;
    end else if (((exitcond7_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        r_i_reg_236 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_10_reg_661 <= i_10_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_11_reg_756 <= i_11_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_61_reg_679 <= i_61_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_62_reg_743 <= i_62_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_344_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_rec_reg_671 <= p_rec_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_addr_5_reg_689 <= tmp_132_fu_415_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i3_fu_560_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        s_addr_6_reg_766 <= tmp_135_fu_586_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp1_reg_666 <= tmp1_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_127_reg_717[7 : 0] <= tmp_127_fu_488_p1[7 : 0];
        tmp_129_reg_725 <= tmp_129_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_540_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_134_reg_748[7 : 3] <= tmp_134_fu_552_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_140_reg_649 <= tmp_140_fu_334_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond8_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        m_address0 = sum2_cast_fu_523_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_address0 = sum_i_cast_fu_410_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_address0 = s_addr_6_reg_766;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_address0 = tmp_135_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = s_addr_5_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = tmp_132_fu_415_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = tmp_s_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = grp_KeccakF1600_StatePer_fu_306_state_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce0 = grp_KeccakF1600_StatePer_fu_306_state_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_ce1 = grp_KeccakF1600_StatePer_fu_306_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_d0 = tmp_136_fu_623_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_d0 = tmp_133_fu_452_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_d0 = grp_KeccakF1600_StatePer_fu_306_state_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state7) | ((tmp_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we0 = grp_KeccakF1600_StatePer_fu_306_state_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_we1 = grp_KeccakF1600_StatePer_fu_306_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        t_address0 = sum_i5_cast_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address0 = t_addr_4_reg_735;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        t_address0 = 64'd135;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_address0 = tmp_127_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = tmp_130_fu_528_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address0 = tmp_125_fu_483_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t_d0 = tmp_131_fu_533_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_d0 = 8'd31;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | ((tmp_128_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((exitcond_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_314_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_124_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond7_fu_344_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_i_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_KeccakF1600_StatePer_fu_306_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_128_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((exitcond8_fu_540_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((tmp_i3_fu_560_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond7_fu_344_p2 = ((i_1_reg_212 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond8_fu_540_p2 = ((i_4_reg_270 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond_fu_471_p2 = ((i_2_reg_248 == 8'd136) ? 1'b1 : 1'b0);

assign grp_KeccakF1600_StatePer_fu_306_ap_start = grp_KeccakF1600_StatePer_fu_306_ap_start_reg;

assign i_10_fu_350_p2 = (i_1_reg_212 + 5'd1);

assign i_11_fu_566_p2 = (i_i1_reg_282 + 4'd1);

assign i_58_fu_320_p2 = (i_reg_169 + 5'd1);

assign i_60_fu_477_p2 = (i_2_reg_248 + 8'd1);

assign i_61_fu_385_p2 = (i_i_reg_224 + 4'd1);

assign i_62_fu_546_p2 = (i_4_reg_270 + 5'd1);

assign indvars_iv_next_fu_465_p2 = ($signed(i_59_reg_180) + $signed(32'd4294967160));

assign mlen_assign_fu_459_p2 = ($signed(p_0_reg_202) + $signed(64'd18446744073709551480));

assign p_rec_fu_373_p2 = (p_01_rec_reg_190 + 64'd136);

assign r_2_fu_617_p2 = (tmp_226_i2_fu_611_p2 | r_i2_reg_294);

assign r_fu_446_p2 = (tmp_226_i_fu_440_p2 | r_i_reg_236);

assign s_address1 = grp_KeccakF1600_StatePer_fu_306_state_address1;

assign s_d1 = grp_KeccakF1600_StatePer_fu_306_state_d1;

assign sum2_cast_fu_523_p1 = sum2_fu_518_p2;

assign sum2_fu_518_p2 = (tmp3_cast_fu_514_p1 + tmp_140_reg_649);

assign sum_i5_cast_fu_581_p1 = sum_i5_fu_576_p2;

assign sum_i5_fu_576_p2 = (tmp_134_reg_748 + tmp_i4_cast_fu_572_p1);

assign sum_i_cast_fu_410_p1 = sum_i_fu_405_p2;

assign sum_i_fu_405_p2 = (tmp1_reg_666 + tmp2_cast_fu_401_p1);

assign t_addr_4_reg_735 = 64'd135;

assign tmp1_fu_368_p2 = (tmp_207_cast_fu_364_p1 + tmp_140_reg_649);

assign tmp2_cast_fu_401_p1 = tmp2_fu_395_p2;

assign tmp2_fu_395_p2 = ($signed(12'd2653) + $signed(tmp_i_cast_fu_391_p1));

assign tmp3_cast_fu_514_p1 = tmp3_fu_508_p2;

assign tmp3_fu_508_p2 = ($signed(tmp_208_cast_fu_492_p1) + $signed(12'd2653));

assign tmp_124_fu_338_p2 = ((p_0_reg_202 < 64'd136) ? 1'b1 : 1'b0);

assign tmp_125_fu_483_p1 = i_2_reg_248;

assign tmp_126_fu_356_p3 = {{i_1_reg_212}, {3'd0}};

assign tmp_127_fu_488_p1 = i_3_reg_259;

assign tmp_128_fu_496_p2 = ((tmp_127_fu_488_p1 < p_0_reg_202) ? 1'b1 : 1'b0);

assign tmp_129_fu_502_p2 = (i_3_reg_259 + 8'd1);

assign tmp_130_fu_528_p1 = i_59_reg_180;

assign tmp_131_fu_533_p2 = (t_q0 | 8'd128);

assign tmp_132_fu_415_p1 = i_1_reg_212;

assign tmp_133_fu_452_p2 = (s_q0 ^ r_i_reg_236);

assign tmp_134_fu_552_p3 = {{i_4_reg_270}, {3'd0}};

assign tmp_135_fu_586_p1 = i_4_reg_270;

assign tmp_136_fu_623_p2 = (s_q0 ^ r_i2_reg_294);

assign tmp_139_fu_331_p1 = mlen[31:0];

assign tmp_140_fu_334_p1 = p_01_rec_reg_190[13:0];

assign tmp_141_fu_424_p1 = i_i_reg_224[2:0];

assign tmp_142_fu_595_p1 = i_i1_reg_282[2:0];

assign tmp_207_cast_fu_364_p1 = tmp_126_fu_356_p3;

assign tmp_208_cast_fu_492_p1 = i_3_reg_259;

assign tmp_223_i8_fu_591_p1 = t_q0;

assign tmp_223_i_fu_420_p1 = m_q0;

assign tmp_224_i9_fu_599_p3 = {{tmp_142_fu_595_p1}, {3'd0}};

assign tmp_224_i_fu_428_p3 = {{tmp_141_fu_424_p1}, {3'd0}};

assign tmp_225_i2_fu_607_p1 = tmp_224_i9_fu_599_p3;

assign tmp_225_i_fu_436_p1 = tmp_224_i_fu_428_p3;

assign tmp_226_i2_fu_611_p2 = tmp_223_i8_fu_591_p1 << tmp_225_i2_fu_607_p1;

assign tmp_226_i_fu_440_p2 = tmp_223_i_fu_420_p1 << tmp_225_i_fu_436_p1;

assign tmp_fu_314_p2 = ((i_reg_169 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_i3_fu_560_p2 = ((i_i1_reg_282 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_i4_cast_fu_572_p1 = i_i1_reg_282;

assign tmp_i_cast_fu_391_p1 = i_i_reg_224;

assign tmp_i_fu_379_p2 = ((i_i_reg_224 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_326_p1 = i_reg_169;

always @ (posedge ap_clk) begin
    tmp_127_reg_717[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_134_reg_748[2:0] <= 3'b000;
end

endmodule //keccak_absorb

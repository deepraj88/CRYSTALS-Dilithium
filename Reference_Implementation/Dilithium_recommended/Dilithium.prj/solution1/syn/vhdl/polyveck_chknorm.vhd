-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyveck_chknorm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of polyveck_chknorm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_3FDED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000111111110111101101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_27_fu_117_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_27_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_81_cast_fu_131_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_cast_reg_236 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_4_fu_141_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_245 : STD_LOGIC_VECTOR (8 downto 0);
    signal v_vec_coeffs_load_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_1_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_171_i_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_65 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_reg_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_88 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_p_0_i_phi_fu_103_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_reg_99 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_cast_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_123_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_cast_fu_147_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_76_fu_151_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_fu_166_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_i_fu_174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_17_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_18_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_fu_200_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_210_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((tmp_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= ret_reg_76;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_171_i_fu_194_p2 = ap_const_lv1_1) and (tmp_i_reg_241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_i_reg_88 <= i_4_reg_245;
            elsif (((tmp_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_88 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_65_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_i_reg_241 = ap_const_lv1_1) or (tmp_171_i_fu_194_p2 = ap_const_lv1_0)))) then 
                i_reg_65 <= i_27_reg_231;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_65 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_0_i_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_171_i_fu_194_p2 = ap_const_lv1_0) and (tmp_i_reg_241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_0_i_reg_99 <= ap_const_lv1_1;
            elsif (((tmp_i_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_i_reg_99 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    ret_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_i_reg_241 = ap_const_lv1_1) or (tmp_171_i_fu_194_p2 = ap_const_lv1_0)))) then 
                ret_reg_76 <= ret_1_fu_220_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ret_reg_76 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_27_reg_231 <= i_27_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_4_reg_245 <= i_4_fu_141_p2;
                tmp_i_reg_241 <= tmp_i_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_111_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_81_cast_reg_236(10 downto 8) <= tmp_81_cast_fu_131_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                v_vec_coeffs_load_reg_255 <= v_vec_coeffs_q0;
            end if;
        end if;
    end process;
    tmp_81_cast_reg_236(7 downto 0) <= "00000000";
    tmp_81_cast_reg_236(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_111_p2, tmp_i_fu_135_p2, tmp_i_reg_241, ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_171_i_fu_194_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_i_reg_241 = ap_const_lv1_1) or (tmp_171_i_fu_194_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_111_p2)
    begin
        if ((((tmp_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_i_phi_fu_103_p4_assign_proc : process(tmp_i_reg_241, ap_CS_fsm_state5, tmp_171_i_fu_194_p2, p_0_i_reg_99)
    begin
        if (((tmp_171_i_fu_194_p2 = ap_const_lv1_0) and (tmp_i_reg_241 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_p_0_i_phi_fu_103_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_p_0_i_phi_fu_103_p4 <= p_0_i_reg_99;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_111_p2)
    begin
        if (((tmp_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, tmp_fu_111_p2, ret_reg_76, ap_return_preg)
    begin
        if (((tmp_fu_111_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= ret_reg_76;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_27_fu_117_p2 <= std_logic_vector(unsigned(i_reg_65) + unsigned(ap_const_lv3_1));
    i_4_fu_141_p2 <= std_logic_vector(unsigned(i_i_reg_88) + unsigned(ap_const_lv9_1));
    ret_1_fu_220_p3 <= (tmp_37_fu_210_p4 & tmp_36_fu_204_p2);
    t_17_fu_182_p2 <= (tmp_170_i_fu_174_p3 xor t_fu_161_p2);
    t_18_fu_188_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(t_17_fu_182_p2));
    t_fu_161_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(v_vec_coeffs_load_reg_255));
    tmp_170_i_fu_174_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_77_fu_166_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_171_i_fu_194_p2 <= "1" when (unsigned(t_18_fu_188_p2) < unsigned(ap_const_lv32_3FDED)) else "0";
    tmp_36_fu_204_p2 <= (tmp_78_fu_200_p1 or ap_phi_mux_p_0_i_phi_fu_103_p4);
    tmp_37_fu_210_p4 <= ret_reg_76(31 downto 1);
    tmp_76_fu_151_p2 <= std_logic_vector(unsigned(tmp_81_cast_reg_236) + unsigned(tmp_i_cast_fu_147_p1));
    tmp_77_fu_166_p3 <= t_fu_161_p2(31 downto 31);
    tmp_78_fu_200_p1 <= ret_reg_76(1 - 1 downto 0);
    tmp_81_cast_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_123_p3),12));
    tmp_82_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_151_p2),64));
    tmp_fu_111_p2 <= "1" when (i_reg_65 = ap_const_lv3_5) else "0";
    tmp_i_cast_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_88),12));
    tmp_i_fu_135_p2 <= "1" when (i_i_reg_88 = ap_const_lv9_100) else "0";
    tmp_s_fu_123_p3 <= (i_reg_65 & ap_const_lv8_0);
    v_vec_coeffs_address0 <= tmp_82_cast_fu_156_p1(11 - 1 downto 0);

    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

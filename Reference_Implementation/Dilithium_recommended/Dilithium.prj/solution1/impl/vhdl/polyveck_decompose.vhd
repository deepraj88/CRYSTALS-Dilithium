-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyveck_decompose is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v1_vec_coeffs_ce0 : OUT STD_LOGIC;
    v1_vec_coeffs_we0 : OUT STD_LOGIC;
    v1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v0_vec_coeffs_ce0 : OUT STD_LOGIC;
    v0_vec_coeffs_we0 : OUT STD_LOGIC;
    v0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of polyveck_decompose is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_7C00FF : STD_LOGIC_VECTOR (22 downto 0) := "11111000000000011111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_7FE00 : STD_LOGIC_VECTOR (23 downto 0) := "000001111111111000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_3FEFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000111111111011111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv24_7BE102 : STD_LOGIC_VECTOR (23 downto 0) := "011110111110000100000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_26_fu_135_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_26_reg_361 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_76_cast_fu_149_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_76_cast_reg_366 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_reg_374 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_77_cast_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_vec_coeffs_load_reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_16_fu_241_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_16_reg_395 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_4_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_assign_4_reg_401 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_287_i_reg_406 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_107 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_118 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_141_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_cast_fu_165_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_72_fu_169_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_fu_179_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_73_fu_187_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_fu_197_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i_cast_fu_205_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_fu_209_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_cast_fu_215_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_cast_fu_183_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_15_fu_219_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_74_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_i_cast_cast_fu_233_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_1_i_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_23_cast_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_s_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_267_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_281_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_cast_fu_295_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_286_i_cast_fu_277_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_fu_299_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_fu_309_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_assign_3_fu_313_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_288_i_fu_338_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_287_i_cast_fu_335_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a0_write_assign_fu_343_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_107 <= i_26_reg_361;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_107 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_118 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_118 <= j_2_reg_374;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                a_assign_4_reg_401 <= a_assign_4_fu_319_p2;
                tmp_287_i_reg_406 <= a_assign_3_fu_313_p2(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_26_reg_361 <= i_26_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_374 <= j_2_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_16_reg_395 <= t_16_fu_241_p2;
                v_vec_coeffs_load_reg_390 <= v_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_76_cast_reg_366(10 downto 8) <= tmp_76_cast_fu_149_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_77_cast_reg_379(11 downto 0) <= tmp_77_cast_fu_174_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_76_cast_reg_366(7 downto 0) <= "00000000";
    tmp_76_cast_reg_366(11) <= '0';
    tmp_77_cast_reg_379(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_129_p2, ap_CS_fsm_state3, tmp_29_fu_153_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_29_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a0_write_assign_fu_343_p2 <= std_logic_vector(unsigned(tmp_288_i_fu_338_p2) - unsigned(tmp_287_i_cast_fu_335_p1));
    a_assign_3_fu_313_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_295_p1) + unsigned(tmp_286_i_cast_fu_277_p1));
    a_assign_4_fu_319_p2 <= std_logic_vector(unsigned(tmp_34_fu_299_p4) + unsigned(tmp_35_fu_309_p1));
    a_assign_s_fu_255_p2 <= std_logic_vector(unsigned(t_1_i_fu_250_p2) - unsigned(t_23_cast_fu_247_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_129_p2)
    begin
        if ((((tmp_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_129_p2)
    begin
        if (((tmp_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_26_fu_135_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv3_1));
    j_2_fu_159_p2 <= std_logic_vector(unsigned(j_reg_118) + unsigned(ap_const_lv9_1));
    t_15_fu_219_p2 <= std_logic_vector(signed(tmp1_cast_fu_215_p1) + signed(t_cast_fu_183_p1));
    t_16_fu_241_p2 <= std_logic_vector(unsigned(tmp_285_i_cast_cast_fu_233_p3) + unsigned(t_15_fu_219_p2));
    t_1_i_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FEFF) + unsigned(v_vec_coeffs_load_reg_390));
        t_23_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_16_reg_395),32));

    t_cast_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_179_p1),24));
    t_fu_179_p1 <= v_vec_coeffs_q0(19 - 1 downto 0);
        tmp1_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_209_p2),24));

    tmp1_fu_209_p2 <= std_logic_vector(signed(ap_const_lv23_7C00FF) + signed(tmp_i_cast_fu_205_p1));
    tmp2_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_289_p2),14));
    tmp2_fu_289_p2 <= (tmp_76_fu_281_p3 xor ap_const_lv1_1);
    tmp_285_i_cast_cast_fu_233_p3 <= 
        ap_const_lv24_7FE00 when (tmp_74_fu_225_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_286_i_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_267_p4),14));
    tmp_287_i_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_287_i_reg_406),24));
    tmp_288_i_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv24_7BE102) + unsigned(t_16_reg_395));
    tmp_29_fu_153_p2 <= "1" when (j_reg_118 = ap_const_lv9_100) else "0";
    tmp_30_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_118),12));
    tmp_34_fu_299_p4 <= a_assign_s_fu_255_p2(22 downto 19);
    tmp_35_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_289_p2),4));
    tmp_72_fu_169_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_165_p1) + unsigned(tmp_76_cast_reg_366));
    tmp_73_fu_187_p4 <= v_vec_coeffs_q0(31 downto 19);
    tmp_74_fu_225_p3 <= t_15_fu_219_p2(23 downto 23);
    tmp_75_fu_267_p4 <= a_assign_s_fu_255_p2(31 downto 19);
    tmp_76_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_141_p3),12));
    tmp_76_fu_281_p3 <= u_fu_261_p2(31 downto 31);
    tmp_77_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_169_p2),64));
    tmp_fu_129_p2 <= "1" when (i_reg_107 = ap_const_lv3_5) else "0";
    tmp_i_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_197_p3),23));
    tmp_i_fu_197_p3 <= (tmp_73_fu_187_p4 & ap_const_lv9_0);
    tmp_s_fu_141_p3 <= (i_reg_107 & ap_const_lv8_0);
    u_fu_261_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_assign_s_fu_255_p2));
    v0_vec_coeffs_address0 <= tmp_77_cast_reg_379(11 - 1 downto 0);

    v0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v0_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v0_vec_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a0_write_assign_fu_343_p2),32));

    v0_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v0_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            v0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_vec_coeffs_address0 <= tmp_77_cast_reg_379(11 - 1 downto 0);

    v1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v1_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_vec_coeffs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_4_reg_401),32));

    v1_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            v1_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            v1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v_vec_coeffs_address0 <= tmp_77_cast_fu_174_p1(11 - 1 downto 0);

    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pack_sig is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sig_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    sig_ce0 : OUT STD_LOGIC;
    sig_we0 : OUT STD_LOGIC;
    sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sig_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    z_vec_coeffs_ce0 : OUT STD_LOGIC;
    z_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    h_vec_coeffs_ce0 : OUT STD_LOGIC;
    h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_coeffs_ce0 : OUT STD_LOGIC;
    c_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0) );
end;


architecture behav of pack_sig is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7FDFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001111111110111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv24_7FE001 : STD_LOGIC_VECTOR (23 downto 0) := "011111111110000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv16_E001 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv20_FE001 : STD_LOGIC_VECTOR (19 downto 0) := "11111110000000000001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv14_A00 : STD_LOGIC_VECTOR (13 downto 0) := "00101000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_A65 : STD_LOGIC_VECTOR (11 downto 0) := "101001100101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv23_7FE000 : STD_LOGIC_VECTOR (22 downto 0) := "11111111110000000000000";
    constant ap_const_lv12_A85 : STD_LOGIC_VECTOR (11 downto 0) := "101010000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_31_fu_411_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_31_reg_1082 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_87_cast_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_87_cast_reg_1087 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_i_fu_487_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_i_reg_1116 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_i_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_i_reg_1125 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_56_i_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_i_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_66_i_fu_674_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_i_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_68_i_reg_1150 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_i_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum8_i_fu_746_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum8_i_reg_1160 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_32_fu_761_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_32_reg_1173 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_cast_fu_775_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_85_cast_reg_1178 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_785_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1186 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_35_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_34_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_33_fu_909_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_33_reg_1224 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sig_addr_1_reg_1229 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_934_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_1234 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_cast3_fu_942_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_cast3_reg_1239 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j_4_fu_952_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_1247 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_44_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_34_fu_1031_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_reg_295 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_reg_319 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_331 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal k_3_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_363 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_3_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_i_cast_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_i_cast_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum6_i_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_i_cast_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_cast_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_840_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_fu_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_1_fu_997_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal signs_fu_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_signs_1_fu_991_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_fu_805_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_835_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_1018_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_1059_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_417_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_421_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_456_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_460_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_i_fu_475_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_i_cast_fu_483_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i_cast9_fu_440_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_391_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_493_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_45_i_cast_cast_fu_497_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_49_cast_fu_513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_505_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_i_cast_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_i_fu_525_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_81_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_i_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_575_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_54_i_cast_fu_588_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_i_fu_591_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_601_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_50_i_cast_cast_fu_605_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_51_fu_613_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_91_fu_617_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_i_fu_633_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_i_cast_fu_638_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum2_i_fu_642_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_93_fu_656_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_i_fu_652_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_i_fu_660_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_i_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_i_cast_fu_627_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_i_fu_621_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_61_i_fu_699_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_i_cast_fu_704_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum4_i_fu_708_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_i_fu_718_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_i_cast_fu_723_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum6_i_fu_727_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_i_fu_737_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_i_cast_fu_742_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_77_fu_767_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_cast_fu_791_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_92_fu_795_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_810_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_cast_fu_818_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum1_fu_822_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_97_fu_846_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum2_fu_850_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_94_fu_878_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum6_fu_882_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_102_cast_fu_915_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum8_fu_919_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_fu_930_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_54_fu_958_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_983_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1013_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_1037_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_45_fu_1041_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_1053_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_cast_fu_1064_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_fu_1068_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_319 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_779_p2 = ap_const_lv1_1))) then 
                i_1_reg_319 <= i_32_reg_1173;
            end if; 
        end if;
    end process;

    i_2_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_44_fu_946_p2 = ap_const_lv1_1))) then 
                i_2_reg_352 <= i_33_reg_1224;
            elsif (((tmp_34_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_2_reg_352 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_3_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_40_fu_903_p2 = ap_const_lv1_1))) then 
                i_3_reg_374 <= ap_const_lv4_0;
            elsif (((tmp_43_fu_1025_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_3_reg_374 <= i_34_fu_1031_p2;
            end if; 
        end if;
    end process;

    i_i_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_i_reg_307 <= i_5_reg_1106;
            elsif (((tmp_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_307 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_295 <= i_31_reg_1082;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_295 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_1_reg_363 <= j_4_reg_1247;
            elsif (((tmp_40_fu_903_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_1_reg_363 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_331 <= j_3_reg_1186;
            elsif (((tmp_32_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_reg_331 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    k_3_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_32_fu_755_p2 = ap_const_lv1_1))) then 
                k_3_reg_343 <= k_fu_150;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_34_fu_866_p2 = ap_const_lv1_1))) then 
                k_3_reg_343 <= k_1_fu_872_p2;
            end if; 
        end if;
    end process;

    k_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((h_vec_coeffs_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_fu_150 <= k_2_fu_840_p2;
            elsif (((tmp_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_fu_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    mask_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_56_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                mask_fu_154 <= mask_1_fu_997_p2;
            elsif (((tmp_34_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                mask_fu_154 <= ap_const_lv64_1;
            end if; 
        end if;
    end process;

    signs_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_56_fu_968_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                signs_fu_158 <= p_signs_1_fu_991_p2;
            elsif (((tmp_34_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                signs_fu_158 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_31_reg_1082 <= i_31_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_32_reg_1173 <= i_32_fu_761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_33_reg_1224 <= i_33_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_5_reg_1106 <= i_5_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    j_1_cast3_reg_1239(3 downto 0) <= j_1_cast3_fu_942_p1(3 downto 0);
                j_4_reg_1247 <= j_4_fu_952_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_3_reg_1186 <= j_3_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_fu_903_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    sig_addr_1_reg_1229(11 downto 0) <= sum8_cast_fu_925_p1(13 - 1 downto 0)(11 downto 0);
                    tmp_42_reg_1234(7 downto 3) <= tmp_42_fu_934_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sum8_i_reg_1160 <= sum8_i_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_52_i_reg_1125 <= tmp_52_i_fu_537_p2;
                tmp_56_i_reg_1130 <= tmp_46_i_cast_fu_531_p2(15 downto 8);
                tmp_60_i_reg_1135 <= tmp_46_i_fu_525_p2(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_53_i_reg_1116 <= tmp_53_i_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_56_reg_1257 <= tmp_56_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_66_i_reg_1145 <= tmp_66_i_fu_674_p2;
                tmp_68_i_reg_1150 <= tmp_51_i_cast_fu_627_p2(11 downto 4);
                tmp_72_i_reg_1155 <= tmp_51_i_fu_621_p2(19 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_85_cast_reg_1178(10 downto 8) <= tmp_85_cast_fu_775_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_87_cast_reg_1087(10 downto 7) <= tmp_87_cast_fu_431_p1(10 downto 7);
            end if;
        end if;
    end process;
    tmp_87_cast_reg_1087(6 downto 0) <= "0000000";
    tmp_87_cast_reg_1087(11) <= '0';
    tmp_85_cast_reg_1178(7 downto 0) <= "00000000";
    tmp_85_cast_reg_1178(11) <= '0';
    sig_addr_1_reg_1229(12) <= '0';
    tmp_42_reg_1234(2 downto 0) <= "000";
    j_1_cast3_reg_1239(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_405_p2, ap_CS_fsm_state3, tmp_i_fu_444_p2, ap_CS_fsm_state10, tmp_32_fu_755_p2, ap_CS_fsm_state11, tmp_35_fu_779_p2, ap_CS_fsm_state13, tmp_34_fu_866_p2, ap_CS_fsm_state14, tmp_40_fu_903_p2, ap_CS_fsm_state15, tmp_44_fu_946_p2, ap_CS_fsm_state18, tmp_43_fu_1025_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_i_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_32_fu_755_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_779_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((tmp_34_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_40_fu_903_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_44_fu_946_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_43_fu_1025_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18, tmp_43_fu_1025_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_43_fu_1025_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, tmp_43_fu_1025_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (tmp_43_fu_1025_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_coeffs_address0 <= tmp_55_fu_963_p1(8 - 1 downto 0);

    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv32_7FDFF) - unsigned(z_vec_coeffs_q0));
    grp_fu_391_p3 <= grp_fu_385_p2(31 downto 31);
    h_vec_coeffs_address0 <= tmp_92_cast_fu_800_p1(11 - 1 downto 0);

    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_31_fu_411_p2 <= std_logic_vector(unsigned(i_reg_295) + unsigned(ap_const_lv3_1));
    i_32_fu_761_p2 <= std_logic_vector(unsigned(i_1_reg_319) + unsigned(ap_const_lv3_1));
    i_33_fu_909_p2 <= std_logic_vector(unsigned(i_2_reg_352) + unsigned(ap_const_lv6_1));
    i_34_fu_1031_p2 <= std_logic_vector(unsigned(i_3_reg_374) + unsigned(ap_const_lv4_1));
    i_5_fu_450_p2 <= std_logic_vector(unsigned(i_i_reg_307) + unsigned(ap_const_lv8_1));
    i_i_cast9_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_307),10));
    j_1_cast3_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_363),8));
    j_3_fu_785_p2 <= std_logic_vector(unsigned(j_reg_331) + unsigned(ap_const_lv9_1));
    j_4_fu_952_p2 <= std_logic_vector(unsigned(j_1_reg_363) + unsigned(ap_const_lv4_1));
    k_1_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_3_reg_343));
    k_2_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_fu_150));
    mask_1_fu_997_p2 <= std_logic_vector(shift_left(unsigned(mask_fu_154),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    p_shl_i_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_i_fu_475_p3),10));
    p_shl_i_fu_475_p3 <= (tmp_80_fu_456_p1 & ap_const_lv2_0);
    p_signs_1_fu_991_p2 <= (tmp_60_fu_983_p3 or signs_fu_158);

    sig_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, sig_addr_1_reg_1229, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state17, sum_i_cast_fu_596_p1, sum2_i_cast_fu_647_p1, sum4_i_cast_fu_713_p1, ap_CS_fsm_state7, sum6_i_cast_fu_732_p1, sum8_i_cast_fu_751_p1, sum4_cast_fu_830_p1, sum2_cast_fu_856_p1, sum6_cast_fu_888_p1, sum8_cast_fu_925_p1, sum_cast_fu_1074_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_address0 <= sum_cast_fu_1074_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            sig_address0 <= sig_addr_1_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sig_address0 <= sum8_cast_fu_925_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sig_address0 <= sum6_cast_fu_888_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sig_address0 <= sum2_cast_fu_856_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_address0 <= sum4_cast_fu_830_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sig_address0 <= sum8_i_cast_fu_751_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_address0 <= sum6_i_cast_fu_732_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sig_address0 <= sum4_i_cast_fu_713_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_address0 <= sum2_i_cast_fu_647_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_address0 <= sum_i_cast_fu_596_p1(13 - 1 downto 0);
        else 
            sig_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sig_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sig_ce0 <= ap_const_logic_1;
        else 
            sig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sig_d0_assign_proc : process(tmp_52_i_reg_1125, tmp_56_i_reg_1130, ap_CS_fsm_state5, tmp_66_i_reg_1145, ap_CS_fsm_state6, tmp_68_i_reg_1150, tmp_72_i_reg_1155, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state7, tmp_95_fu_805_p1, tmp_96_fu_835_p1, tmp_58_fu_1018_p2, tmp_100_fu_1059_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sig_d0 <= tmp_100_fu_1059_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            sig_d0 <= tmp_58_fu_1018_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sig_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sig_d0 <= tmp_96_fu_835_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sig_d0 <= tmp_95_fu_805_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sig_d0 <= tmp_72_i_reg_1155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sig_d0 <= tmp_68_i_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sig_d0 <= tmp_66_i_reg_1145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sig_d0 <= tmp_56_i_reg_1130;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sig_d0 <= tmp_52_i_reg_1125;
        else 
            sig_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sig_we0_assign_proc : process(h_vec_coeffs_q0, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_35_fu_779_p2, ap_CS_fsm_state13, tmp_34_fu_866_p2, ap_CS_fsm_state14, tmp_40_fu_903_p2, tmp_56_reg_1257, ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_43_fu_1025_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((tmp_56_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((h_vec_coeffs_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_43_fu_1025_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((tmp_40_fu_903_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_34_fu_866_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_779_p2 = ap_const_lv1_1)))) then 
            sig_we0 <= ap_const_logic_1;
        else 
            sig_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_fu_822_p3 <= (ap_const_lv5_14 & tmp_95_cast_fu_818_p1);
        sum2_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum2_fu_850_p2),64));

    sum2_fu_850_p2 <= std_logic_vector(unsigned(ap_const_lv14_A00) + unsigned(tmp_97_fu_846_p1));
    sum2_i_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_i_fu_642_p2),64));
    sum2_i_fu_642_p2 <= std_logic_vector(unsigned(tmp_58_i_cast_fu_638_p1) + unsigned(tmp_87_cast_reg_1087));
    sum4_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_822_p3),64));
    sum4_i_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_i_fu_708_p2),64));
    sum4_i_fu_708_p2 <= std_logic_vector(unsigned(tmp_62_i_cast_fu_704_p1) + unsigned(tmp_87_cast_reg_1087));
    sum6_cast_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_fu_882_p2),64));
    sum6_fu_882_p2 <= std_logic_vector(signed(ap_const_lv12_A00) + signed(tmp_94_fu_878_p1));
    sum6_i_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum6_i_fu_727_p2),64));
    sum6_i_fu_727_p2 <= std_logic_vector(unsigned(tmp_70_i_cast_fu_723_p1) + unsigned(tmp_87_cast_reg_1087));
    sum8_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_919_p2),64));
    sum8_fu_919_p2 <= std_logic_vector(signed(ap_const_lv12_A65) + signed(tmp_102_cast_fu_915_p1));
    sum8_i_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_i_reg_1160),64));
    sum8_i_fu_746_p2 <= std_logic_vector(unsigned(tmp_74_i_cast_fu_742_p1) + unsigned(tmp_87_cast_reg_1087));
    sum_cast_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1068_p2),64));
    sum_fu_1068_p2 <= std_logic_vector(signed(ap_const_lv12_A85) + signed(tmp_110_cast_fu_1064_p1));
    sum_i_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_591_p2),64));
    sum_i_fu_591_p2 <= std_logic_vector(unsigned(tmp_54_i_cast_fu_588_p1) + unsigned(tmp_87_cast_reg_1087));
    tmp_100_fu_1059_p1 <= tmp_47_fu_1053_p2(8 - 1 downto 0);
    tmp_102_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_352),12));
    tmp_110_cast_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_374),12));
    tmp_32_fu_755_p2 <= "1" when (i_1_reg_319 = ap_const_lv3_5) else "0";
    tmp_34_fu_866_p2 <= "1" when (unsigned(k_3_reg_343) < unsigned(ap_const_lv32_60)) else "0";
    tmp_35_fu_779_p2 <= "1" when (j_reg_331 = ap_const_lv9_100) else "0";
    tmp_37_fu_810_p3 <= (ap_const_lv3_4 & i_1_reg_319);
    tmp_38_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_331),12));
    tmp_40_fu_903_p2 <= "1" when (i_2_reg_352 = ap_const_lv6_20) else "0";
    tmp_42_fu_934_p3 <= (tmp_98_fu_930_p1 & ap_const_lv3_0);
    tmp_43_fu_1025_p2 <= "1" when (i_3_reg_374 = ap_const_lv4_8) else "0";
    tmp_44_fu_946_p2 <= "1" when (j_1_reg_363 = ap_const_lv4_8) else "0";
    tmp_45_fu_1041_p3 <= (tmp_99_fu_1037_p1 & ap_const_lv3_0);
    tmp_45_i_cast_cast_fu_497_p3 <= 
        ap_const_lv24_7FE001 when (grp_fu_391_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_46_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1041_p3),64));
    tmp_46_i_cast_fu_531_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_513_p3) + unsigned(tmp_86_fu_521_p1));
    tmp_46_i_fu_525_p2 <= std_logic_vector(unsigned(tmp_83_fu_493_p1) + unsigned(tmp_45_i_cast_cast_fu_497_p3));
    tmp_47_fu_1053_p2 <= std_logic_vector(shift_right(unsigned(signs_fu_158),to_integer(unsigned('0' & tmp_46_fu_1049_p1(31-1 downto 0)))));
    tmp_47_i_fu_569_p2 <= (tmp_81_fu_563_p2 or ap_const_lv8_1);
    tmp_49_cast_fu_513_p3 <= 
        ap_const_lv16_E001 when (grp_fu_391_p3(0) = '1') else 
        ap_const_lv16_0;
    tmp_4_i_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_391_p3),8));
    tmp_50_i_cast_cast_fu_605_p3 <= 
        ap_const_lv20_FE001 when (grp_fu_391_p3(0) = '1') else 
        ap_const_lv20_0;
    tmp_51_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_391_p3),12));
    tmp_51_i_cast_fu_627_p2 <= std_logic_vector(unsigned(tmp_51_fu_613_p1) + unsigned(tmp_91_fu_617_p1));
    tmp_51_i_fu_621_p2 <= std_logic_vector(unsigned(tmp_89_fu_601_p1) + unsigned(tmp_50_i_cast_cast_fu_605_p3));
    tmp_52_i_fu_537_p2 <= std_logic_vector(unsigned(tmp_85_fu_505_p1) + unsigned(tmp_4_i_fu_509_p1));
    tmp_53_i_fu_487_p2 <= std_logic_vector(unsigned(p_shl_i_cast_fu_483_p1) + unsigned(i_i_cast9_fu_440_p1));
    tmp_54_fu_958_p2 <= std_logic_vector(unsigned(j_1_cast3_fu_942_p1) + unsigned(tmp_42_reg_1234));
    tmp_54_i_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_i_reg_1116),12));
    tmp_55_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_958_p2),64));
    tmp_56_fu_968_p2 <= "1" when (c_coeffs_q0 = ap_const_lv23_0) else "0";
    tmp_57_fu_1013_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & j_1_cast3_reg_1239(8-1 downto 0)))));
    tmp_57_i_fu_633_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(tmp_53_i_reg_1116));
    tmp_58_fu_1018_p2 <= (tmp_57_fu_1013_p2 or sig_q0);
    tmp_58_i_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_fu_633_p2),12));
    tmp_59_fu_977_p2 <= "1" when (c_coeffs_q0 = ap_const_lv23_7FE000) else "0";
    tmp_60_fu_983_p3 <= 
        mask_fu_154 when (tmp_59_fu_977_p2(0) = '1') else 
        ap_const_lv64_0;
    tmp_61_i_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv10_2) + unsigned(tmp_53_i_reg_1116));
    tmp_62_i_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_i_fu_699_p2),12));
    tmp_63_i_fu_660_p2 <= std_logic_vector(unsigned(tmp_93_fu_656_p1) + unsigned(tmp_7_i_fu_652_p1));
    tmp_65_i_fu_666_p3 <= (tmp_63_i_fu_660_p2 & ap_const_lv4_0);
    tmp_66_i_fu_674_p2 <= (tmp_65_i_fu_666_p3 or tmp_60_i_reg_1135);
    tmp_69_i_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv10_3) + unsigned(tmp_53_i_reg_1116));
    tmp_70_i_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_i_fu_718_p2),12));
    tmp_73_i_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(tmp_53_i_reg_1116));
    tmp_74_i_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_i_fu_737_p2),12));
    tmp_77_fu_767_p3 <= (i_1_reg_319 & ap_const_lv8_0);
    tmp_78_fu_460_p4 <= ((i_reg_295 & tmp_80_fu_456_p1) & ap_const_lv1_0);
    tmp_79_fu_417_p1 <= i_reg_295(2 - 1 downto 0);
    tmp_7_i_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_391_p3),4));
    tmp_80_fu_456_p1 <= i_i_reg_307(7 - 1 downto 0);
    tmp_81_fu_563_p2 <= std_logic_vector(shift_left(unsigned(i_i_reg_307),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_82_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_460_p4),64));
    tmp_83_fu_493_p1 <= grp_fu_385_p2(24 - 1 downto 0);
    tmp_85_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_767_p3),12));
    tmp_85_fu_505_p1 <= grp_fu_385_p2(8 - 1 downto 0);
    tmp_86_fu_521_p1 <= grp_fu_385_p2(16 - 1 downto 0);
    tmp_87_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_421_p4),12));
    tmp_87_fu_575_p3 <= (i_reg_295 & tmp_47_i_fu_569_p2);
    tmp_88_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_575_p3),64));
    tmp_89_fu_601_p1 <= grp_fu_385_p2(20 - 1 downto 0);
    tmp_91_fu_617_p1 <= grp_fu_385_p2(12 - 1 downto 0);
    tmp_92_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_795_p2),64));
    tmp_92_fu_795_p2 <= std_logic_vector(unsigned(tmp_85_cast_reg_1178) + unsigned(tmp_38_cast_fu_791_p1));
    tmp_93_fu_656_p1 <= grp_fu_385_p2(4 - 1 downto 0);
    tmp_94_fu_878_p1 <= k_3_reg_343(12 - 1 downto 0);
        tmp_95_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_810_p3),7));

    tmp_95_fu_805_p1 <= k_fu_150(8 - 1 downto 0);
    tmp_96_fu_835_p1 <= j_reg_331(8 - 1 downto 0);
    tmp_97_fu_846_p1 <= k_fu_150(14 - 1 downto 0);
    tmp_98_fu_930_p1 <= i_2_reg_352(5 - 1 downto 0);
    tmp_99_fu_1037_p1 <= i_3_reg_374(3 - 1 downto 0);
    tmp_fu_405_p2 <= "1" when (i_reg_295 = ap_const_lv3_4) else "0";
    tmp_i_fu_444_p2 <= "1" when (i_i_reg_307 = ap_const_lv8_80) else "0";
    tmp_s_fu_421_p4 <= ((tmp_79_fu_417_p1 & tmp_79_fu_417_p1) & ap_const_lv7_0);

    z_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_82_fu_470_p1, tmp_88_fu_583_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            z_vec_coeffs_address0 <= tmp_88_fu_583_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            z_vec_coeffs_address0 <= tmp_82_fu_470_p1(10 - 1 downto 0);
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

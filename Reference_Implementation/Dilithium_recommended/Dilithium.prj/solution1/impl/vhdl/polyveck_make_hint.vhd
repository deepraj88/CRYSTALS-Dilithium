-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity polyveck_make_hint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    h_vec_coeffs_ce0 : OUT STD_LOGIC;
    h_vec_coeffs_we0 : OUT STD_LOGIC;
    h_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    u_vec_coeffs_ce0 : OUT STD_LOGIC;
    u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    v_vec_coeffs_ce0 : OUT STD_LOGIC;
    v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of polyveck_make_hint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_7C00FF : STD_LOGIC_VECTOR (22 downto 0) := "11111000000000011111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_7FE00 : STD_LOGIC_VECTOR (23 downto 0) := "000001111111111000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_3FEFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000111111111011111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv24_801FFF : STD_LOGIC_VECTOR (23 downto 0) := "100000000001111111111111";
    constant ap_const_lv19_7E001 : STD_LOGIC_VECTOR (18 downto 0) := "1111110000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv25_7FE001 : STD_LOGIC_VECTOR (24 downto 0) := "0011111111110000000000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv25_3FEFF : STD_LOGIC_VECTOR (24 downto 0) := "0000000111111111011111111";
    constant ap_const_lv25_1FFFFFF : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_23_fu_173_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_23_reg_597 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_63_cast_fu_187_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_cast_reg_602 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_197_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_610 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_64_cast_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_vec_coeffs_load_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal t_10_fu_280_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_10_reg_635 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_11_fu_300_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal t_11_reg_640 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_64_reg_645 : STD_LOGIC_VECTOR (8 downto 0);
    signal a_assign_5_fu_364_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_assign_5_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a_assign_8_fu_399_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_8_reg_656 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_65_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_661 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_12_fu_425_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal t_12_reg_666 : STD_LOGIC_VECTOR (18 downto 0);
    signal a_assign_9_fu_441_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal a_assign_9_reg_671 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal t_14_fu_508_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_14_reg_676 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_221_i_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_221_i_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_137 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal s_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_1_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_179_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_cast_fu_203_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_207_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_fu_218_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_59_fu_226_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_i_fu_236_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i_i_cast_fu_244_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_fu_248_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_cast_fu_254_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_cast_fu_222_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_9_fu_258_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_i_i_cast_cas_fu_272_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_62_fu_286_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_63_fu_290_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_assign_6_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_i_i_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_13_cast_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_4_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_346_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_cast_fu_360_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_286_i_i_cast_fu_336_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_i_i_fu_376_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal t_14_cast_fu_370_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_7_cast_fu_373_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_i_i_i_fu_387_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp3_fu_393_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_cast_fu_383_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_66_fu_413_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_31_cast_fu_417_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_i7_i_cast_cast_fu_434_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal a_assign_9_cast7_fu_431_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_67_fu_450_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_460_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_i10_i_fu_468_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i10_i_cast_fu_472_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp4_fu_476_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp4_cast_fu_482_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_16_cast_fu_447_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_13_fu_486_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_69_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_i15_i_cast_c_fu_500_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_1_i17_i_fu_517_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal t_18_cast_fu_514_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal a_assign_1_fu_522_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal u_1_fu_528_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_70_fu_544_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_cast_fu_558_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_286_i20_i_cast_fu_534_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_assign_s_fu_562_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_222_i_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_137 <= i_23_reg_597;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_137 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_148 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_148 <= j_1_reg_610;
            end if; 
        end if;
    end process;

    s_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                s_fu_94 <= s_1_fu_576_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_fu_94 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                a_assign_5_reg_651 <= a_assign_5_fu_364_p2;
                a_assign_8_reg_656 <= a_assign_8_fu_399_p2;
                t_12_reg_666 <= t_12_fu_425_p2;
                tmp_65_reg_661 <= a_assign_8_fu_399_p2(23 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_assign_9_reg_671 <= a_assign_9_fu_441_p2;
                t_14_reg_676 <= t_14_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_23_reg_597 <= i_23_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_610 <= j_1_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                t_10_reg_635 <= t_10_fu_280_p2;
                t_11_reg_640 <= t_11_fu_300_p2;
                tmp_64_reg_645 <= a_assign_6_fu_294_p2(31 downto 23);
                u_vec_coeffs_load_reg_630 <= u_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_221_i_reg_681 <= tmp_221_i_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_63_cast_reg_602(10 downto 8) <= tmp_63_cast_fu_187_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_64_cast_reg_615(11 downto 0) <= tmp_64_cast_fu_212_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_63_cast_reg_602(7 downto 0) <= "00000000";
    tmp_63_cast_reg_602(11) <= '0';
    tmp_64_cast_reg_615(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_167_p2, ap_CS_fsm_state3, tmp_s_fu_191_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_s_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_assign_1_fu_522_p2 <= std_logic_vector(unsigned(t_1_i17_i_fu_517_p2) - unsigned(t_18_cast_fu_514_p1));
    a_assign_4_fu_324_p2 <= std_logic_vector(unsigned(t_1_i_i_fu_319_p2) - unsigned(t_13_cast_fu_316_p1));
    a_assign_5_fu_364_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_360_p1) + unsigned(tmp_286_i_i_cast_fu_336_p4));
    a_assign_6_fu_294_p2 <= std_logic_vector(unsigned(u_vec_coeffs_q0) + unsigned(v_vec_coeffs_q0));
    a_assign_7_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_reg_645),24));
    a_assign_8_fu_399_p2 <= std_logic_vector(unsigned(tmp3_fu_393_p2) + unsigned(tmp_i_i_i_cast_fu_383_p1));
        a_assign_9_cast7_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_assign_8_reg_656),25));

    a_assign_9_fu_441_p2 <= std_logic_vector(unsigned(tmp_i7_i_cast_cast_fu_434_p3) + unsigned(a_assign_9_cast7_fu_431_p1));
    a_assign_s_fu_562_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_558_p1) + unsigned(tmp_286_i20_i_cast_fu_534_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_167_p2)
    begin
        if ((((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_167_p2)
    begin
        if (((tmp_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= s_fu_94;
    h_vec_coeffs_address0 <= tmp_64_cast_reg_615(11 - 1 downto 0);

    h_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h_vec_coeffs_d0 <= tmp_221_i_reg_681;

    h_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_vec_coeffs_we0 <= ap_const_logic_1;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_23_fu_173_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv3_1));
    j_1_fu_197_p2 <= std_logic_vector(unsigned(j_reg_148) + unsigned(ap_const_lv9_1));
    s_1_fu_576_p2 <= std_logic_vector(unsigned(tmp_222_i_fu_573_p1) + unsigned(s_fu_94));
    t_10_fu_280_p2 <= std_logic_vector(unsigned(tmp_285_i_i_cast_cas_fu_272_p3) + unsigned(t_9_fu_258_p2));
    t_11_fu_300_p2 <= std_logic_vector(unsigned(tmp_62_fu_286_p1) + unsigned(tmp_63_fu_290_p1));
    t_12_fu_425_p2 <= std_logic_vector(unsigned(tmp_66_fu_413_p1) + unsigned(tmp_31_cast_fu_417_p3));
        t_13_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_10_reg_635),32));

    t_13_fu_486_p2 <= std_logic_vector(signed(tmp4_cast_fu_482_p1) + signed(t_16_cast_fu_447_p1));
    t_14_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_11_reg_640),24));
    t_14_fu_508_p2 <= std_logic_vector(unsigned(tmp_285_i15_i_cast_c_fu_500_p3) + unsigned(t_13_fu_486_p2));
    t_16_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_12_reg_666),24));
        t_18_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_14_reg_676),25));

    t_1_i17_i_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv25_3FEFF) + unsigned(a_assign_9_reg_671));
    t_1_i_i_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FEFF) + unsigned(u_vec_coeffs_load_reg_630));
    t_9_fu_258_p2 <= std_logic_vector(signed(tmp1_cast_fu_254_p1) + signed(t_cast_fu_222_p1));
    t_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_218_p1),24));
    t_fu_218_p1 <= u_vec_coeffs_q0(19 - 1 downto 0);
        tmp1_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_248_p2),24));

    tmp1_fu_248_p2 <= std_logic_vector(signed(ap_const_lv23_7C00FF) + signed(tmp_i_i_cast_fu_244_p1));
    tmp2_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_354_p2),4));
    tmp2_fu_354_p2 <= (tmp_61_fu_346_p3 xor ap_const_lv1_1);
    tmp3_fu_393_p2 <= std_logic_vector(signed(ap_const_lv24_801FFF) + signed(tmp_42_i_i_i_fu_387_p2));
        tmp4_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_476_p2),24));

    tmp4_fu_476_p2 <= std_logic_vector(signed(ap_const_lv23_7C00FF) + signed(tmp_i10_i_cast_fu_472_p1));
    tmp5_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_552_p2),4));
    tmp5_fu_552_p2 <= (tmp_70_fu_544_p3 xor ap_const_lv1_1);
    tmp_221_i_fu_568_p2 <= "0" when (a_assign_5_reg_651 = a_assign_s_fu_562_p2) else "1";
    tmp_222_i_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_221_i_reg_681),32));
    tmp_27_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_148),12));
    tmp_285_i15_i_cast_c_fu_500_p3 <= 
        ap_const_lv24_7FE00 when (tmp_69_fu_492_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_285_i_i_cast_cas_fu_272_p3 <= 
        ap_const_lv24_7FE00 when (tmp_60_fu_264_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_286_i20_i_cast_fu_534_p4 <= a_assign_1_fu_522_p2(22 downto 19);
    tmp_286_i_i_cast_fu_336_p4 <= a_assign_4_fu_324_p2(22 downto 19);
    tmp_31_cast_fu_417_p3 <= 
        ap_const_lv19_7E001 when (tmp_65_fu_405_p3(0) = '1') else 
        ap_const_lv19_0;
    tmp_42_i_i_i_fu_387_p2 <= std_logic_vector(unsigned(t_14_cast_fu_370_p1) - unsigned(a_assign_7_cast_fu_373_p1));
    tmp_57_fu_179_p3 <= (i_reg_137 & ap_const_lv8_0);
    tmp_58_fu_207_p2 <= std_logic_vector(unsigned(tmp_27_cast_fu_203_p1) + unsigned(tmp_63_cast_reg_602));
    tmp_59_fu_226_p4 <= u_vec_coeffs_q0(31 downto 19);
    tmp_60_fu_264_p3 <= t_9_fu_258_p2(23 downto 23);
    tmp_61_fu_346_p3 <= u_fu_330_p2(31 downto 31);
    tmp_62_fu_286_p1 <= v_vec_coeffs_q0(23 - 1 downto 0);
    tmp_63_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_179_p3),12));
    tmp_63_fu_290_p1 <= u_vec_coeffs_q0(23 - 1 downto 0);
    tmp_64_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_207_p2),64));
    tmp_65_fu_405_p3 <= a_assign_8_fu_399_p2(23 downto 23);
    tmp_66_fu_413_p1 <= a_assign_8_fu_399_p2(19 - 1 downto 0);
    tmp_67_fu_450_p4 <= a_assign_9_fu_441_p2(24 downto 19);
    tmp_68_fu_460_p3 <= (tmp_67_fu_450_p4 & ap_const_lv9_0);
    tmp_69_fu_492_p3 <= t_13_fu_486_p2(23 downto 23);
    tmp_70_fu_544_p3 <= u_1_fu_528_p2(24 downto 24);
    tmp_fu_167_p2 <= "1" when (i_reg_137 = ap_const_lv3_5) else "0";
    tmp_i10_i_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i10_i_fu_468_p1),23));
        tmp_i10_i_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_68_fu_460_p3),22));

    tmp_i7_i_cast_cast_fu_434_p3 <= 
        ap_const_lv25_7FE001 when (tmp_65_reg_661(0) = '1') else 
        ap_const_lv25_0;
    tmp_i_i_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_fu_236_p3),23));
    tmp_i_i_fu_236_p3 <= (tmp_59_fu_226_p4 & ap_const_lv9_0);
    tmp_i_i_i_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_376_p3),24));
    tmp_i_i_i_fu_376_p3 <= (tmp_64_reg_645 & ap_const_lv13_0);
    tmp_s_fu_191_p2 <= "1" when (j_reg_148 = ap_const_lv9_100) else "0";
    u_1_fu_528_p2 <= std_logic_vector(signed(ap_const_lv25_1FFFFFF) + signed(a_assign_1_fu_522_p2));
    u_fu_330_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_assign_4_fu_324_p2));
    u_vec_coeffs_address0 <= tmp_64_cast_fu_212_p1(11 - 1 downto 0);

    u_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            u_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            u_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v_vec_coeffs_address0 <= tmp_64_cast_fu_212_p1(11 - 1 downto 0);

    v_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            v_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            v_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ntt_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_we0,
        p_d0,
        p_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] p_address0;
output   p_ce0;
output   p_we0;
output  [31:0] p_d0;
input  [31:0] p_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] p_address0;
reg p_ce0;
reg p_we0;
reg[31:0] p_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] zetas_address0;
reg    zetas_ce0;
wire   [22:0] zetas_q0;
wire   [30:0] len_cast_cast7_fu_119_p1;
reg   [30:0] len_cast_cast7_reg_325;
wire    ap_CS_fsm_state2;
wire   [29:0] tmp_102_fu_129_p1;
reg   [29:0] tmp_102_reg_335;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_fu_143_p2;
wire   [28:0] len_1_fu_167_p1;
wire   [31:0] k_3_fu_171_p2;
reg   [31:0] k_3_reg_359;
wire    ap_CS_fsm_state4;
wire   [29:0] tmp_104_fu_181_p1;
reg   [29:0] tmp_104_reg_364;
wire   [30:0] start_cast_fu_198_p1;
reg   [30:0] start_cast_reg_369;
wire   [54:0] tmp_122_cast_fu_202_p1;
reg   [54:0] tmp_122_cast_reg_374;
reg   [7:0] p_addr_reg_382;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_64_fu_210_p2;
reg   [7:0] p_addr_1_reg_387;
wire   [29:0] j_5_fu_230_p2;
reg   [29:0] j_5_reg_392;
wire   [30:0] tmp_71_fu_236_p2;
reg   [31:0] p_load_reg_402;
wire    ap_CS_fsm_state6;
wire   [54:0] a_assign_fu_247_p2;
reg   [54:0] a_assign_reg_407;
wire    ap_CS_fsm_state7;
wire  signed [31:0] tmp_106_fu_252_p1;
reg  signed [31:0] tmp_106_reg_412;
wire   [31:0] t_fu_256_p2;
reg   [31:0] t_reg_417;
wire    ap_CS_fsm_state8;
wire   [54:0] t_19_fu_264_p2;
reg   [54:0] t_19_reg_422;
wire    ap_CS_fsm_state9;
reg   [23:0] tmp_s_reg_427;
wire    ap_CS_fsm_state10;
reg   [28:0] len_reg_81;
reg   [30:0] j_reg_93;
wire   [0:0] tmp_fu_123_p2;
reg   [29:0] j5_reg_105;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_61_fu_152_p1;
wire   [63:0] tmp_66_fu_220_p1;
wire   [63:0] tmp_67_fu_225_p1;
reg   [31:0] k_fu_44;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_69_fu_301_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_70_fu_311_p2;
wire   [22:0] tmp_103_fu_133_p4;
wire   [27:0] tmp_105_fu_157_p4;
wire   [30:0] tmp_62_fu_176_p2;
wire   [0:0] tmp_63_fu_185_p2;
wire   [29:0] start_fu_191_p3;
wire   [30:0] j5_cast2_fu_206_p1;
wire   [30:0] tmp_65_fu_215_p2;
wire   [31:0] a_assign_fu_247_p0;
wire   [22:0] a_assign_fu_247_p1;
wire   [31:0] t_19_fu_264_p1;
wire   [55:0] t_27_cast_fu_273_p1;
wire   [55:0] a_assign_cast1_fu_270_p1;
wire   [55:0] t_20_fu_276_p2;
wire   [23:0] tmp_68_fu_292_p2;
wire   [31:0] tmp_129_cast_fu_297_p1;
wire   [31:0] t_21_fu_308_p1;
reg   [12:0] ap_NS_fsm;
wire   [54:0] a_assign_fu_247_p00;
wire   [54:0] t_19_fu_264_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ntt_1_zetas #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
zetas_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zetas_address0),
    .ce0(zetas_ce0),
    .q0(zetas_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j5_reg_105 <= j_5_reg_392;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j5_reg_105 <= tmp_102_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_93 <= 31'd0;
    end else if (((tmp_64_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_93 <= tmp_71_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_64_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_fu_44 <= k_3_reg_359;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_fu_44 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                len_reg_81[7 : 0] <= len_1_fu_167_p1[7 : 0];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                len_reg_81[0] <= 1'b0;
        len_reg_81[1] <= 1'b0;
        len_reg_81[2] <= 1'b0;
        len_reg_81[3] <= 1'b0;
        len_reg_81[4] <= 1'b0;
        len_reg_81[5] <= 1'b0;
        len_reg_81[6] <= 1'b0;
        len_reg_81[7] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_assign_reg_407 <= a_assign_fu_247_p2;
        tmp_106_reg_412 <= tmp_106_fu_252_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_64_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_5_reg_392 <= j_5_fu_230_p2;
        p_addr_1_reg_387 <= tmp_67_fu_225_p1;
        p_addr_reg_382 <= tmp_66_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_3_reg_359 <= k_3_fu_171_p2;
        start_cast_reg_369[29 : 0] <= start_cast_fu_198_p1[29 : 0];
        tmp_104_reg_364 <= tmp_104_fu_181_p1;
        tmp_122_cast_reg_374[22 : 0] <= tmp_122_cast_fu_202_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        len_cast_cast7_reg_325[7 : 0] <= len_cast_cast7_fu_119_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_load_reg_402 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_19_reg_422 <= t_19_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_reg_417 <= t_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_102_reg_335 <= tmp_102_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_s_reg_427 <= {{t_20_fu_276_p2[55:32]}};
    end
end

always @ (*) begin
    if ((((tmp_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_address0 = p_addr_reg_382;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        p_address0 = p_addr_1_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_address0 = tmp_66_fu_220_p1;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_d0 = tmp_70_fu_311_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_d0 = tmp_69_fu_301_p2;
    end else begin
        p_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        p_we0 = 1'b1;
    end else begin
        p_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zetas_ce0 = 1'b1;
    end else begin
        zetas_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_64_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_cast1_fu_270_p1 = a_assign_reg_407;

assign a_assign_fu_247_p0 = a_assign_fu_247_p00;

assign a_assign_fu_247_p00 = p_load_reg_402;

assign a_assign_fu_247_p1 = tmp_122_cast_reg_374;

assign a_assign_fu_247_p2 = (a_assign_fu_247_p0 * a_assign_fu_247_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_fu_143_p2 = ((tmp_103_fu_133_p4 == 23'd0) ? 1'b1 : 1'b0);

assign j5_cast2_fu_206_p1 = j5_reg_105;

assign j_5_fu_230_p2 = (30'd1 + j5_reg_105);

assign k_3_fu_171_p2 = (32'd1 + k_fu_44);

assign len_1_fu_167_p1 = tmp_105_fu_157_p4;

assign len_cast_cast7_fu_119_p1 = len_reg_81;

assign start_cast_fu_198_p1 = start_fu_191_p3;

assign start_fu_191_p3 = ((tmp_63_fu_185_p2[0:0] === 1'b1) ? tmp_102_reg_335 : tmp_104_fu_181_p1);

assign t_19_fu_264_p1 = t_19_fu_264_p10;

assign t_19_fu_264_p10 = t_reg_417;

assign t_19_fu_264_p2 = (55'd8380417 * t_19_fu_264_p1);

assign t_20_fu_276_p2 = (t_27_cast_fu_273_p1 + a_assign_cast1_fu_270_p1);

assign t_21_fu_308_p1 = tmp_s_reg_427;

assign t_27_cast_fu_273_p1 = t_19_reg_422;

assign t_fu_256_p2 = ($signed(32'd4236238847) * $signed(tmp_106_reg_412));

assign tmp_102_fu_129_p1 = j_reg_93[29:0];

assign tmp_103_fu_133_p4 = {{j_reg_93[30:8]}};

assign tmp_104_fu_181_p1 = tmp_62_fu_176_p2[29:0];

assign tmp_105_fu_157_p4 = {{len_reg_81[28:1]}};

assign tmp_106_fu_252_p1 = a_assign_fu_247_p2[31:0];

assign tmp_122_cast_fu_202_p1 = zetas_q0;

assign tmp_129_cast_fu_297_p1 = tmp_68_fu_292_p2;

assign tmp_61_fu_152_p1 = k_fu_44;

assign tmp_62_fu_176_p2 = (len_cast_cast7_reg_325 + j_reg_93);

assign tmp_63_fu_185_p2 = ((j_reg_93 > tmp_62_fu_176_p2) ? 1'b1 : 1'b0);

assign tmp_64_fu_210_p2 = ((j5_reg_105 < tmp_104_reg_364) ? 1'b1 : 1'b0);

assign tmp_65_fu_215_p2 = (j5_cast2_fu_206_p1 + len_cast_cast7_reg_325);

assign tmp_66_fu_220_p1 = tmp_65_fu_215_p2;

assign tmp_67_fu_225_p1 = j5_reg_105;

assign tmp_68_fu_292_p2 = ($signed(24'd16760834) - $signed(tmp_s_reg_427));

assign tmp_69_fu_301_p2 = (p_q0 + tmp_129_cast_fu_297_p1);

assign tmp_70_fu_311_p2 = (p_q0 + t_21_fu_308_p1);

assign tmp_71_fu_236_p2 = (len_cast_cast7_reg_325 + start_cast_reg_369);

assign tmp_fu_123_p2 = ((len_reg_81 == 29'd0) ? 1'b1 : 1'b0);

assign zetas_address0 = tmp_61_fu_152_p1;

always @ (posedge ap_clk) begin
    len_cast_cast7_reg_325[30:8] <= 23'b00000000000000000000000;
    start_cast_reg_369[30] <= 1'b0;
    tmp_122_cast_reg_374[54:23] <= 32'b00000000000000000000000000000000;
    len_reg_81[28:8] <= 21'b000000000000000000000;
end

endmodule //ntt_2

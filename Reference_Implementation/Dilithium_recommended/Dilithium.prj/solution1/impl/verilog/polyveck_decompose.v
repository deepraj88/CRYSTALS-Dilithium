// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyveck_decompose (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v1_vec_coeffs_address0,
        v1_vec_coeffs_ce0,
        v1_vec_coeffs_we0,
        v1_vec_coeffs_d0,
        v0_vec_coeffs_address0,
        v0_vec_coeffs_ce0,
        v0_vec_coeffs_we0,
        v0_vec_coeffs_d0,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v1_vec_coeffs_address0;
output   v1_vec_coeffs_ce0;
output   v1_vec_coeffs_we0;
output  [31:0] v1_vec_coeffs_d0;
output  [10:0] v0_vec_coeffs_address0;
output   v0_vec_coeffs_ce0;
output   v0_vec_coeffs_we0;
output  [31:0] v0_vec_coeffs_d0;
output  [10:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v1_vec_coeffs_ce0;
reg v1_vec_coeffs_we0;
reg v0_vec_coeffs_ce0;
reg v0_vec_coeffs_we0;
reg v_vec_coeffs_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_26_fu_135_p2;
reg   [2:0] i_26_reg_361;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_76_cast_fu_149_p1;
reg   [11:0] tmp_76_cast_reg_366;
wire   [0:0] tmp_fu_129_p2;
wire   [8:0] j_2_fu_159_p2;
reg   [8:0] j_2_reg_374;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_77_cast_fu_174_p1;
reg   [63:0] tmp_77_cast_reg_379;
wire   [0:0] tmp_29_fu_153_p2;
reg   [31:0] v_vec_coeffs_load_reg_390;
wire    ap_CS_fsm_state4;
wire  signed [23:0] t_16_fu_241_p2;
reg  signed [23:0] t_16_reg_395;
wire   [3:0] a_assign_4_fu_319_p2;
reg   [3:0] a_assign_4_reg_401;
wire    ap_CS_fsm_state5;
reg   [9:0] tmp_287_i_reg_406;
reg   [2:0] i_reg_107;
reg   [8:0] j_reg_118;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_s_fu_141_p3;
wire   [11:0] tmp_30_cast_fu_165_p1;
wire   [11:0] tmp_72_fu_169_p2;
wire   [18:0] t_fu_179_p1;
wire   [12:0] tmp_73_fu_187_p4;
wire   [21:0] tmp_i_fu_197_p3;
wire   [22:0] tmp_i_cast_fu_205_p1;
wire   [22:0] tmp1_fu_209_p2;
wire  signed [23:0] tmp1_cast_fu_215_p1;
wire   [23:0] t_cast_fu_183_p1;
wire   [23:0] t_15_fu_219_p2;
wire   [0:0] tmp_74_fu_225_p3;
wire   [23:0] tmp_285_i_cast_cast_fu_233_p3;
wire   [31:0] t_1_i_fu_250_p2;
wire  signed [31:0] t_23_cast_fu_247_p1;
wire   [31:0] a_assign_s_fu_255_p2;
wire   [12:0] tmp_75_fu_267_p4;
wire   [31:0] u_fu_261_p2;
wire   [0:0] tmp_76_fu_281_p3;
wire   [0:0] tmp2_fu_289_p2;
wire   [13:0] tmp2_cast_fu_295_p1;
wire   [13:0] tmp_286_i_cast_fu_277_p1;
wire   [3:0] tmp_34_fu_299_p4;
wire   [3:0] tmp_35_fu_309_p1;
wire   [13:0] a_assign_3_fu_313_p2;
wire   [23:0] tmp_288_i_fu_338_p2;
wire   [23:0] tmp_287_i_cast_fu_335_p1;
wire   [23:0] a0_write_assign_fu_343_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_107 <= i_26_reg_361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_107 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_118 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_118 <= j_2_reg_374;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_assign_4_reg_401 <= a_assign_4_fu_319_p2;
        tmp_287_i_reg_406 <= {{a_assign_3_fu_313_p2[13:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_26_reg_361 <= i_26_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_374 <= j_2_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_16_reg_395 <= t_16_fu_241_p2;
        v_vec_coeffs_load_reg_390 <= v_vec_coeffs_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_76_cast_reg_366[10 : 8] <= tmp_76_cast_fu_149_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_77_cast_reg_379[11 : 0] <= tmp_77_cast_fu_174_p1[11 : 0];
    end
end

always @ (*) begin
    if ((((tmp_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_vec_coeffs_ce0 = 1'b1;
    end else begin
        v0_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v0_vec_coeffs_we0 = 1'b1;
    end else begin
        v0_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v1_vec_coeffs_ce0 = 1'b1;
    end else begin
        v1_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        v1_vec_coeffs_we0 = 1'b1;
    end else begin
        v1_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_29_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a0_write_assign_fu_343_p2 = (tmp_288_i_fu_338_p2 - tmp_287_i_cast_fu_335_p1);

assign a_assign_3_fu_313_p2 = (tmp2_cast_fu_295_p1 + tmp_286_i_cast_fu_277_p1);

assign a_assign_4_fu_319_p2 = (tmp_34_fu_299_p4 + tmp_35_fu_309_p1);

assign a_assign_s_fu_255_p2 = ($signed(t_1_i_fu_250_p2) - $signed(t_23_cast_fu_247_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_26_fu_135_p2 = (i_reg_107 + 3'd1);

assign j_2_fu_159_p2 = (j_reg_118 + 9'd1);

assign t_15_fu_219_p2 = ($signed(tmp1_cast_fu_215_p1) + $signed(t_cast_fu_183_p1));

assign t_16_fu_241_p2 = (tmp_285_i_cast_cast_fu_233_p3 + t_15_fu_219_p2);

assign t_1_i_fu_250_p2 = (32'd261887 + v_vec_coeffs_load_reg_390);

assign t_23_cast_fu_247_p1 = t_16_reg_395;

assign t_cast_fu_183_p1 = t_fu_179_p1;

assign t_fu_179_p1 = v_vec_coeffs_q0[18:0];

assign tmp1_cast_fu_215_p1 = $signed(tmp1_fu_209_p2);

assign tmp1_fu_209_p2 = ($signed(23'd8126719) + $signed(tmp_i_cast_fu_205_p1));

assign tmp2_cast_fu_295_p1 = tmp2_fu_289_p2;

assign tmp2_fu_289_p2 = (tmp_76_fu_281_p3 ^ 1'd1);

assign tmp_285_i_cast_cast_fu_233_p3 = ((tmp_74_fu_225_p3[0:0] === 1'b1) ? 24'd523776 : 24'd0);

assign tmp_286_i_cast_fu_277_p1 = tmp_75_fu_267_p4;

assign tmp_287_i_cast_fu_335_p1 = tmp_287_i_reg_406;

assign tmp_288_i_fu_338_p2 = ($signed(24'd8118530) + $signed(t_16_reg_395));

assign tmp_29_fu_153_p2 = ((j_reg_118 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_165_p1 = j_reg_118;

assign tmp_34_fu_299_p4 = {{a_assign_s_fu_255_p2[22:19]}};

assign tmp_35_fu_309_p1 = tmp2_fu_289_p2;

assign tmp_72_fu_169_p2 = (tmp_30_cast_fu_165_p1 + tmp_76_cast_reg_366);

assign tmp_73_fu_187_p4 = {{v_vec_coeffs_q0[31:19]}};

assign tmp_74_fu_225_p3 = t_15_fu_219_p2[32'd23];

assign tmp_75_fu_267_p4 = {{a_assign_s_fu_255_p2[31:19]}};

assign tmp_76_cast_fu_149_p1 = tmp_s_fu_141_p3;

assign tmp_76_fu_281_p3 = u_fu_261_p2[32'd31];

assign tmp_77_cast_fu_174_p1 = tmp_72_fu_169_p2;

assign tmp_fu_129_p2 = ((i_reg_107 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_cast_fu_205_p1 = tmp_i_fu_197_p3;

assign tmp_i_fu_197_p3 = {{tmp_73_fu_187_p4}, {9'd0}};

assign tmp_s_fu_141_p3 = {{i_reg_107}, {8'd0}};

assign u_fu_261_p2 = ($signed(32'd4294967295) + $signed(a_assign_s_fu_255_p2));

assign v0_vec_coeffs_address0 = tmp_77_cast_reg_379;

assign v0_vec_coeffs_d0 = a0_write_assign_fu_343_p2;

assign v1_vec_coeffs_address0 = tmp_77_cast_reg_379;

assign v1_vec_coeffs_d0 = a_assign_4_reg_401;

assign v_vec_coeffs_address0 = tmp_77_cast_fu_174_p1;

always @ (posedge ap_clk) begin
    tmp_76_cast_reg_366[7:0] <= 8'b00000000;
    tmp_76_cast_reg_366[11] <= 1'b0;
    tmp_77_cast_reg_379[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //polyveck_decompose

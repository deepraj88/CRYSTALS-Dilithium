// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module polyveck_chknorm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_vec_coeffs_address0,
        v_vec_coeffs_ce0,
        v_vec_coeffs_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] v_vec_coeffs_address0;
output   v_vec_coeffs_ce0;
input  [31:0] v_vec_coeffs_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg v_vec_coeffs_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_27_fu_117_p2;
reg   [2:0] i_27_reg_231;
wire    ap_CS_fsm_state2;
wire   [11:0] tmp_81_cast_fu_131_p1;
reg   [11:0] tmp_81_cast_reg_236;
wire   [0:0] tmp_fu_111_p2;
wire   [0:0] tmp_i_fu_135_p2;
reg   [0:0] tmp_i_reg_241;
wire    ap_CS_fsm_state3;
wire   [8:0] i_4_fu_141_p2;
reg   [8:0] i_4_reg_245;
reg   [31:0] v_vec_coeffs_load_reg_255;
wire    ap_CS_fsm_state4;
wire   [31:0] ret_1_fu_220_p3;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_171_i_fu_194_p2;
reg   [2:0] i_reg_65;
reg   [31:0] ret_reg_76;
reg   [8:0] i_i_reg_88;
reg   [0:0] ap_phi_mux_p_0_i_phi_fu_103_p4;
reg   [0:0] p_0_i_reg_99;
wire   [63:0] tmp_82_cast_fu_156_p1;
wire   [10:0] tmp_s_fu_123_p3;
wire   [11:0] tmp_i_cast_fu_147_p1;
wire   [11:0] tmp_76_fu_151_p2;
wire   [31:0] t_fu_161_p2;
wire   [0:0] tmp_77_fu_166_p3;
wire   [31:0] tmp_170_i_fu_174_p3;
wire   [31:0] t_17_fu_182_p2;
wire   [31:0] t_18_fu_188_p2;
wire   [0:0] tmp_78_fu_200_p1;
wire   [30:0] tmp_37_fu_210_p4;
wire   [0:0] tmp_36_fu_204_p2;
reg   [31:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((tmp_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= ret_reg_76;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_171_i_fu_194_p2 == 1'd1) & (tmp_i_reg_241 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_i_reg_88 <= i_4_reg_245;
    end else if (((tmp_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_reg_88 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((tmp_i_reg_241 == 1'd1) | (tmp_171_i_fu_194_p2 == 1'd0)))) begin
        i_reg_65 <= i_27_reg_231;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_65 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_171_i_fu_194_p2 == 1'd0) & (tmp_i_reg_241 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        p_0_i_reg_99 <= 1'd1;
    end else if (((tmp_i_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_0_i_reg_99 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((tmp_i_reg_241 == 1'd1) | (tmp_171_i_fu_194_p2 == 1'd0)))) begin
        ret_reg_76 <= ret_1_fu_220_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ret_reg_76 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_27_reg_231 <= i_27_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_245 <= i_4_fu_141_p2;
        tmp_i_reg_241 <= tmp_i_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_81_cast_reg_236[10 : 8] <= tmp_81_cast_fu_131_p1[10 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        v_vec_coeffs_load_reg_255 <= v_vec_coeffs_q0;
    end
end

always @ (*) begin
    if ((((tmp_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_171_i_fu_194_p2 == 1'd0) & (tmp_i_reg_241 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_p_0_i_phi_fu_103_p4 = 1'd1;
    end else begin
        ap_phi_mux_p_0_i_phi_fu_103_p4 = p_0_i_reg_99;
    end
end

always @ (*) begin
    if (((tmp_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = ret_reg_76;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        v_vec_coeffs_ce0 = 1'b1;
    end else begin
        v_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_i_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((tmp_i_reg_241 == 1'd1) | (tmp_171_i_fu_194_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign i_27_fu_117_p2 = (i_reg_65 + 3'd1);

assign i_4_fu_141_p2 = (i_i_reg_88 + 9'd1);

assign ret_1_fu_220_p3 = {{tmp_37_fu_210_p4}, {tmp_36_fu_204_p2}};

assign t_17_fu_182_p2 = (tmp_170_i_fu_174_p3 ^ t_fu_161_p2);

assign t_18_fu_188_p2 = (32'd4190208 - t_17_fu_182_p2);

assign t_fu_161_p2 = (32'd4190208 - v_vec_coeffs_load_reg_255);

assign tmp_170_i_fu_174_p3 = ((tmp_77_fu_166_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_171_i_fu_194_p2 = ((t_18_fu_188_p2 < 32'd261613) ? 1'b1 : 1'b0);

assign tmp_36_fu_204_p2 = (tmp_78_fu_200_p1 | ap_phi_mux_p_0_i_phi_fu_103_p4);

assign tmp_37_fu_210_p4 = {{ret_reg_76[31:1]}};

assign tmp_76_fu_151_p2 = (tmp_81_cast_reg_236 + tmp_i_cast_fu_147_p1);

assign tmp_77_fu_166_p3 = t_fu_161_p2[32'd31];

assign tmp_78_fu_200_p1 = ret_reg_76[0:0];

assign tmp_81_cast_fu_131_p1 = tmp_s_fu_123_p3;

assign tmp_82_cast_fu_156_p1 = tmp_76_fu_151_p2;

assign tmp_fu_111_p2 = ((i_reg_65 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_cast_fu_147_p1 = i_i_reg_88;

assign tmp_i_fu_135_p2 = ((i_i_reg_88 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_s_fu_123_p3 = {{i_reg_65}, {8'd0}};

assign v_vec_coeffs_address0 = tmp_82_cast_fu_156_p1;

always @ (posedge ap_clk) begin
    tmp_81_cast_reg_236[7:0] <= 8'b00000000;
    tmp_81_cast_reg_236[11] <= 1'b0;
end

endmodule //polyveck_chknorm

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ntt_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_we0,
        p_d0,
        p_q0,
        p_offset
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] p_address0;
output   p_ce0;
output   p_we0;
output  [31:0] p_d0;
input  [31:0] p_q0;
input  [2:0] p_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] p_address0;
reg p_ce0;
reg p_we0;
reg[31:0] p_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] zetas_address0;
reg    zetas_ce0;
wire   [22:0] zetas_q0;
wire   [11:0] tmp_99_cast_fu_136_p1;
reg   [11:0] tmp_99_cast_reg_370;
wire   [30:0] len_cast_cast7_fu_145_p1;
reg   [30:0] len_cast_cast7_reg_376;
wire    ap_CS_fsm_state2;
wire   [29:0] tmp_107_fu_155_p1;
reg   [29:0] tmp_107_reg_385;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_fu_169_p2;
wire   [28:0] len_1_fu_193_p1;
wire   [31:0] k_4_fu_197_p2;
reg   [31:0] k_4_reg_409;
wire    ap_CS_fsm_state4;
wire   [29:0] tmp_109_fu_207_p1;
reg   [29:0] tmp_109_reg_414;
wire   [30:0] start_cast_fu_224_p1;
reg   [30:0] start_cast_reg_419;
wire   [54:0] tmp_136_cast_fu_228_p1;
reg   [54:0] tmp_136_cast_reg_424;
reg   [9:0] p_addr11_reg_432;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_75_fu_232_p2;
reg   [9:0] p_addr_reg_437;
wire   [29:0] j_5_fu_275_p2;
reg   [29:0] j_5_reg_442;
wire   [30:0] tmp_82_fu_281_p2;
reg   [31:0] p_load_reg_452;
wire    ap_CS_fsm_state6;
wire   [54:0] a_assign_fu_292_p2;
reg   [54:0] a_assign_reg_457;
wire    ap_CS_fsm_state7;
wire  signed [31:0] tmp_114_fu_297_p1;
reg  signed [31:0] tmp_114_reg_462;
wire   [31:0] t_fu_301_p2;
reg   [31:0] t_reg_467;
wire    ap_CS_fsm_state8;
wire   [54:0] t_22_fu_309_p2;
reg   [54:0] t_22_reg_472;
wire    ap_CS_fsm_state9;
reg   [23:0] tmp_94_reg_477;
wire    ap_CS_fsm_state10;
reg   [28:0] len_reg_95;
reg   [30:0] j_reg_107;
wire   [0:0] tmp_fu_149_p2;
reg   [29:0] j5_reg_119;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_72_fu_178_p1;
wire   [63:0] tmp_101_cast_fu_256_p1;
wire   [63:0] tmp_103_cast_fu_270_p1;
reg   [31:0] k_fu_52;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_80_fu_346_p2;
wire    ap_CS_fsm_state12;
wire   [31:0] tmp_81_fu_356_p2;
wire   [10:0] tmp_s_fu_128_p3;
wire   [22:0] tmp_108_fu_159_p4;
wire   [27:0] tmp_110_fu_183_p4;
wire   [30:0] tmp_73_fu_202_p2;
wire   [0:0] tmp_74_fu_211_p2;
wire   [29:0] start_fu_217_p3;
wire   [11:0] tmp_112_fu_241_p1;
wire   [11:0] tmp_111_fu_237_p1;
wire   [11:0] tmp_113_fu_245_p2;
wire   [11:0] tmp_93_fu_251_p2;
wire   [11:0] tmp_115_fu_261_p1;
wire   [11:0] tmp_95_fu_265_p2;
wire   [22:0] a_assign_fu_292_p0;
wire   [31:0] a_assign_fu_292_p1;
wire   [31:0] t_22_fu_309_p1;
wire   [55:0] a_assign_cast1_fu_315_p1;
wire   [55:0] t_31_cast_fu_318_p1;
wire   [55:0] t_23_fu_321_p2;
wire   [23:0] tmp_79_fu_337_p2;
wire   [31:0] tmp_143_cast_fu_342_p1;
wire   [31:0] t_24_fu_353_p1;
reg   [12:0] ap_NS_fsm;
wire   [54:0] a_assign_fu_292_p10;
wire   [54:0] t_22_fu_309_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ntt_1_zetas #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
zetas_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zetas_address0),
    .ce0(zetas_ce0),
    .q0(zetas_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j5_reg_119 <= j_5_reg_442;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j5_reg_119 <= tmp_107_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_107 <= 31'd0;
    end else if (((tmp_75_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_107 <= tmp_82_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_75_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_fu_52 <= k_4_reg_409;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_fu_52 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                len_reg_95[7 : 0] <= len_1_fu_193_p1[7 : 0];
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                len_reg_95[0] <= 1'b0;
        len_reg_95[1] <= 1'b0;
        len_reg_95[2] <= 1'b0;
        len_reg_95[3] <= 1'b0;
        len_reg_95[4] <= 1'b0;
        len_reg_95[5] <= 1'b0;
        len_reg_95[6] <= 1'b0;
        len_reg_95[7] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a_assign_reg_457 <= a_assign_fu_292_p2;
        tmp_114_reg_462 <= tmp_114_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_75_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_5_reg_442 <= j_5_fu_275_p2;
        p_addr11_reg_432 <= tmp_101_cast_fu_256_p1;
        p_addr_reg_437 <= tmp_103_cast_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_4_reg_409 <= k_4_fu_197_p2;
        start_cast_reg_419[29 : 0] <= start_cast_fu_224_p1[29 : 0];
        tmp_109_reg_414 <= tmp_109_fu_207_p1;
        tmp_136_cast_reg_424[22 : 0] <= tmp_136_cast_fu_228_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        len_cast_cast7_reg_376[7 : 0] <= len_cast_cast7_fu_145_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_load_reg_452 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        t_22_reg_472 <= t_22_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_reg_467 <= t_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_107_reg_385 <= tmp_107_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_94_reg_477 <= {{t_23_fu_321_p2[55:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_99_cast_reg_370[10 : 8] <= tmp_99_cast_fu_136_p1[10 : 8];
    end
end

always @ (*) begin
    if ((((tmp_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_address0 = p_addr11_reg_432;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        p_address0 = p_addr_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_address0 = tmp_101_cast_fu_256_p1;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state10))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_d0 = tmp_81_fu_356_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_d0 = tmp_80_fu_346_p2;
    end else begin
        p_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        p_we0 = 1'b1;
    end else begin
        p_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zetas_ce0 = 1'b1;
    end else begin
        zetas_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_75_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_cast1_fu_315_p1 = a_assign_reg_457;

assign a_assign_fu_292_p0 = tmp_136_cast_reg_424;

assign a_assign_fu_292_p1 = a_assign_fu_292_p10;

assign a_assign_fu_292_p10 = p_load_reg_452;

assign a_assign_fu_292_p2 = (a_assign_fu_292_p0 * a_assign_fu_292_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_fu_169_p2 = ((tmp_108_fu_159_p4 == 23'd0) ? 1'b1 : 1'b0);

assign j_5_fu_275_p2 = (30'd1 + j5_reg_119);

assign k_4_fu_197_p2 = (32'd1 + k_fu_52);

assign len_1_fu_193_p1 = tmp_110_fu_183_p4;

assign len_cast_cast7_fu_145_p1 = len_reg_95;

assign start_cast_fu_224_p1 = start_fu_217_p3;

assign start_fu_217_p3 = ((tmp_74_fu_211_p2[0:0] === 1'b1) ? tmp_107_reg_385 : tmp_109_fu_207_p1);

assign t_22_fu_309_p1 = t_22_fu_309_p10;

assign t_22_fu_309_p10 = t_reg_467;

assign t_22_fu_309_p2 = (55'd8380417 * t_22_fu_309_p1);

assign t_23_fu_321_p2 = (a_assign_cast1_fu_315_p1 + t_31_cast_fu_318_p1);

assign t_24_fu_353_p1 = tmp_94_reg_477;

assign t_31_cast_fu_318_p1 = t_22_reg_472;

assign t_fu_301_p2 = ($signed(32'd4236238847) * $signed(tmp_114_reg_462));

assign tmp_101_cast_fu_256_p1 = tmp_93_fu_251_p2;

assign tmp_103_cast_fu_270_p1 = tmp_95_fu_265_p2;

assign tmp_107_fu_155_p1 = j_reg_107[29:0];

assign tmp_108_fu_159_p4 = {{j_reg_107[30:8]}};

assign tmp_109_fu_207_p1 = tmp_73_fu_202_p2[29:0];

assign tmp_110_fu_183_p4 = {{len_reg_95[28:1]}};

assign tmp_111_fu_237_p1 = j5_reg_119[11:0];

assign tmp_112_fu_241_p1 = len_reg_95[11:0];

assign tmp_113_fu_245_p2 = (tmp_112_fu_241_p1 + tmp_111_fu_237_p1);

assign tmp_114_fu_297_p1 = a_assign_fu_292_p2[31:0];

assign tmp_115_fu_261_p1 = j5_reg_119[11:0];

assign tmp_136_cast_fu_228_p1 = zetas_q0;

assign tmp_143_cast_fu_342_p1 = tmp_79_fu_337_p2;

assign tmp_72_fu_178_p1 = k_fu_52;

assign tmp_73_fu_202_p2 = (len_cast_cast7_reg_376 + j_reg_107);

assign tmp_74_fu_211_p2 = ((j_reg_107 > tmp_73_fu_202_p2) ? 1'b1 : 1'b0);

assign tmp_75_fu_232_p2 = ((j5_reg_119 < tmp_109_reg_414) ? 1'b1 : 1'b0);

assign tmp_79_fu_337_p2 = ($signed(24'd16760834) - $signed(tmp_94_reg_477));

assign tmp_80_fu_346_p2 = (tmp_143_cast_fu_342_p1 + p_q0);

assign tmp_81_fu_356_p2 = (t_24_fu_353_p1 + p_q0);

assign tmp_82_fu_281_p2 = (len_cast_cast7_reg_376 + start_cast_reg_419);

assign tmp_93_fu_251_p2 = (tmp_99_cast_reg_370 + tmp_113_fu_245_p2);

assign tmp_95_fu_265_p2 = (tmp_99_cast_reg_370 + tmp_115_fu_261_p1);

assign tmp_99_cast_fu_136_p1 = tmp_s_fu_128_p3;

assign tmp_fu_149_p2 = ((len_reg_95 == 29'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_128_p3 = {{p_offset}, {8'd0}};

assign zetas_address0 = tmp_72_fu_178_p1;

always @ (posedge ap_clk) begin
    tmp_99_cast_reg_370[7:0] <= 8'b00000000;
    tmp_99_cast_reg_370[11] <= 1'b0;
    len_cast_cast7_reg_376[30:8] <= 23'b00000000000000000000000;
    start_cast_reg_419[30] <= 1'b0;
    tmp_136_cast_reg_424[54:23] <= 32'b00000000000000000000000000000000;
    len_reg_95[28:8] <= 21'b000000000000000000000;
end

endmodule //ntt_1

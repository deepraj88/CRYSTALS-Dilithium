// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reduce32.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reduce32::ap_const_logic_1 = sc_dt::Log_1;
const bool reduce32::ap_const_boolean_1 = true;
const sc_lv<32> reduce32::ap_const_lv32_17 = "10111";
const sc_lv<32> reduce32::ap_const_lv32_1F = "11111";
const sc_lv<13> reduce32::ap_const_lv13_0 = "0000000000000";
const sc_logic reduce32::ap_const_logic_0 = sc_dt::Log_0;

reduce32::reduce32(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_a_assign_cast_fu_38_p1);
    sensitive << ( tmp_fu_28_p4 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_cast_fu_50_p1 );
    sensitive << ( tmp_35_cast_fu_60_p1 );

    SC_METHOD(thread_t_cast_fu_24_p1);
    sensitive << ( t_fu_20_p1 );

    SC_METHOD(thread_t_fu_20_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_26_fu_54_p2);
    sensitive << ( t_cast_fu_24_p1 );
    sensitive << ( a_assign_cast_fu_38_p1 );

    SC_METHOD(thread_tmp_35_cast_fu_60_p1);
    sensitive << ( tmp_26_fu_54_p2 );

    SC_METHOD(thread_tmp_cast_fu_50_p1);
    sensitive << ( tmp_s_fu_42_p3 );

    SC_METHOD(thread_tmp_fu_28_p4);
    sensitive << ( a );

    SC_METHOD(thread_tmp_s_fu_42_p3);
    sensitive << ( tmp_fu_28_p4 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reduce32_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, t_fu_20_p1, "t_fu_20_p1");
    sc_trace(mVcdFile, tmp_fu_28_p4, "tmp_fu_28_p4");
    sc_trace(mVcdFile, tmp_s_fu_42_p3, "tmp_s_fu_42_p3");
    sc_trace(mVcdFile, t_cast_fu_24_p1, "t_cast_fu_24_p1");
    sc_trace(mVcdFile, a_assign_cast_fu_38_p1, "a_assign_cast_fu_38_p1");
    sc_trace(mVcdFile, tmp_26_fu_54_p2, "tmp_26_fu_54_p2");
    sc_trace(mVcdFile, tmp_cast_fu_50_p1, "tmp_cast_fu_50_p1");
    sc_trace(mVcdFile, tmp_35_cast_fu_60_p1, "tmp_35_cast_fu_60_p1");
#endif

    }
}

reduce32::~reduce32() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void reduce32::thread_a_assign_cast_fu_38_p1() {
    a_assign_cast_fu_38_p1 = esl_zext<24,9>(tmp_fu_28_p4.read());
}

void reduce32::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void reduce32::thread_ap_return() {
    ap_return = (!tmp_cast_fu_50_p1.read().is_01() || !tmp_35_cast_fu_60_p1.read().is_01())? sc_lv<25>(): (sc_biguint<25>(tmp_cast_fu_50_p1.read()) + sc_bigint<25>(tmp_35_cast_fu_60_p1.read()));
}

void reduce32::thread_t_cast_fu_24_p1() {
    t_cast_fu_24_p1 = esl_zext<24,23>(t_fu_20_p1.read());
}

void reduce32::thread_t_fu_20_p1() {
    t_fu_20_p1 = a.read().range(23-1, 0);
}

void reduce32::thread_tmp_26_fu_54_p2() {
    tmp_26_fu_54_p2 = (!t_cast_fu_24_p1.read().is_01() || !a_assign_cast_fu_38_p1.read().is_01())? sc_lv<24>(): (sc_biguint<24>(t_cast_fu_24_p1.read()) - sc_biguint<24>(a_assign_cast_fu_38_p1.read()));
}

void reduce32::thread_tmp_35_cast_fu_60_p1() {
    tmp_35_cast_fu_60_p1 = esl_sext<25,24>(tmp_26_fu_54_p2.read());
}

void reduce32::thread_tmp_cast_fu_50_p1() {
    tmp_cast_fu_50_p1 = esl_zext<25,22>(tmp_s_fu_42_p3.read());
}

void reduce32::thread_tmp_fu_28_p4() {
    tmp_fu_28_p4 = a.read().range(31, 23);
}

void reduce32::thread_tmp_s_fu_42_p3() {
    tmp_s_fu_42_p3 = esl_concat<9,13>(tmp_fu_28_p4.read(), ap_const_lv13_0);
}

}


// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "keccak_absorb_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic keccak_absorb_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic keccak_absorb_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state1 = "1";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state2 = "10";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state3 = "100";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state4 = "1000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state5 = "10000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state6 = "100000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> keccak_absorb_3::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_1 = "1";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_2 = "10";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_3 = "11";
const sc_lv<1> keccak_absorb_3::ap_const_lv1_0 = "0";
const sc_lv<1> keccak_absorb_3::ap_const_lv1_1 = "1";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_6 = "110";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_7 = "111";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_8 = "1000";
const sc_lv<5> keccak_absorb_3::ap_const_lv5_0 = "00000";
const sc_lv<8> keccak_absorb_3::ap_const_lv8_0 = "00000000";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_4 = "100";
const sc_lv<6> keccak_absorb_3::ap_const_lv6_0 = "000000";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_5 = "101";
const sc_lv<32> keccak_absorb_3::ap_const_lv32_9 = "1001";
const sc_lv<4> keccak_absorb_3::ap_const_lv4_0 = "0000";
const sc_lv<64> keccak_absorb_3::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> keccak_absorb_3::ap_const_lv64_A7 = "10100111";
const sc_lv<64> keccak_absorb_3::ap_const_lv64_21 = "100001";
const sc_lv<8> keccak_absorb_3::ap_const_lv8_1F = "11111";
const sc_lv<5> keccak_absorb_3::ap_const_lv5_19 = "11001";
const sc_lv<5> keccak_absorb_3::ap_const_lv5_1 = "1";
const sc_lv<8> keccak_absorb_3::ap_const_lv8_A8 = "10101000";
const sc_lv<8> keccak_absorb_3::ap_const_lv8_1 = "1";
const sc_lv<6> keccak_absorb_3::ap_const_lv6_21 = "100001";
const sc_lv<6> keccak_absorb_3::ap_const_lv6_1 = "1";
const sc_lv<8> keccak_absorb_3::ap_const_lv8_80 = "10000000";
const sc_lv<5> keccak_absorb_3::ap_const_lv5_15 = "10101";
const sc_lv<3> keccak_absorb_3::ap_const_lv3_0 = "000";
const sc_lv<4> keccak_absorb_3::ap_const_lv4_8 = "1000";
const sc_lv<4> keccak_absorb_3::ap_const_lv4_1 = "1";
const bool keccak_absorb_3::ap_const_boolean_1 = true;

keccak_absorb_3::keccak_absorb_3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    t_U = new keccak_absorb_3_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);
    t_U->address1(t_address1);
    t_U->ce1(t_ce1);
    t_U->we1(t_we1);
    t_U->d1(t_d1);
    t_U->q1(t_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond2_fu_273_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond2_fu_273_p2 );

    SC_METHOD(thread_exitcond1_fu_254_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_3_reg_168 );

    SC_METHOD(thread_exitcond2_fu_273_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_4_reg_179 );

    SC_METHOD(thread_exitcond_fu_232_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_2_reg_157 );

    SC_METHOD(thread_i_40_fu_221_p2);
    sensitive << ( i_reg_146 );

    SC_METHOD(thread_i_41_fu_238_p2);
    sensitive << ( i_2_reg_157 );

    SC_METHOD(thread_i_42_fu_279_p2);
    sensitive << ( i_4_reg_179 );

    SC_METHOD(thread_i_5_fu_299_p2);
    sensitive << ( i_i1_reg_191 );

    SC_METHOD(thread_m_address0);
    sensitive << ( tmp_100_fu_249_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_fu_350_p2);
    sensitive << ( r_i2_reg_203 );
    sensitive << ( tmp_226_i_fu_344_p2 );

    SC_METHOD(thread_s_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( s_addr_1_reg_429 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_s_fu_227_p1 );
    sensitive << ( tmp_104_fu_319_p1 );

    SC_METHOD(thread_s_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_s_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_105_fu_356_p2 );

    SC_METHOD(thread_s_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_215_p2 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_sum_i5_cast_fu_314_p1);
    sensitive << ( sum_i5_fu_309_p2 );

    SC_METHOD(thread_sum_i5_fu_309_p2);
    sensitive << ( tmp_103_reg_411 );
    sensitive << ( tmp_i4_cast_fu_305_p1 );

    SC_METHOD(thread_t_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_100_reg_379 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_99_fu_244_p1 );

    SC_METHOD(thread_t_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( sum_i5_cast_fu_314_p1 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_d0);
    sensitive << ( m_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_d1);
    sensitive << ( t_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_232_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_t_we1);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_100_fu_249_p1);
    sensitive << ( i_3_reg_168 );

    SC_METHOD(thread_tmp_102_fu_260_p2);
    sensitive << ( i_3_reg_168 );

    SC_METHOD(thread_tmp_103_fu_285_p3);
    sensitive << ( i_4_reg_179 );

    SC_METHOD(thread_tmp_104_fu_319_p1);
    sensitive << ( i_4_reg_179 );

    SC_METHOD(thread_tmp_105_fu_356_p2);
    sensitive << ( s_q0 );
    sensitive << ( r_i2_reg_203 );

    SC_METHOD(thread_tmp_223_i8_fu_324_p1);
    sensitive << ( t_q1 );

    SC_METHOD(thread_tmp_224_i9_fu_332_p3);
    sensitive << ( tmp_640_fu_328_p1 );

    SC_METHOD(thread_tmp_225_i_fu_340_p1);
    sensitive << ( tmp_224_i9_fu_332_p3 );

    SC_METHOD(thread_tmp_226_i_fu_344_p2);
    sensitive << ( tmp_223_i8_fu_324_p1 );
    sensitive << ( tmp_225_i_fu_340_p1 );

    SC_METHOD(thread_tmp_640_fu_328_p1);
    sensitive << ( i_i1_reg_191 );

    SC_METHOD(thread_tmp_99_fu_244_p1);
    sensitive << ( i_2_reg_157 );

    SC_METHOD(thread_tmp_fu_215_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_146 );

    SC_METHOD(thread_tmp_i3_fu_293_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_i1_reg_191 );

    SC_METHOD(thread_tmp_i4_cast_fu_305_p1);
    sensitive << ( i_i1_reg_191 );

    SC_METHOD(thread_tmp_s_fu_227_p1);
    sensitive << ( i_reg_146 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_254_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond2_fu_273_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_i3_fu_293_p2 );
    sensitive << ( tmp_fu_215_p2 );
    sensitive << ( exitcond_fu_232_p2 );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "keccak_absorb_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_address0, "(port)s_address0");
    sc_trace(mVcdFile, s_ce0, "(port)s_ce0");
    sc_trace(mVcdFile, s_we0, "(port)s_we0");
    sc_trace(mVcdFile, s_d0, "(port)s_d0");
    sc_trace(mVcdFile, s_q0, "(port)s_q0");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_40_fu_221_p2, "i_40_fu_221_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_41_fu_238_p2, "i_41_fu_238_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_100_fu_249_p1, "tmp_100_fu_249_p1");
    sc_trace(mVcdFile, tmp_100_reg_379, "tmp_100_reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_102_fu_260_p2, "tmp_102_fu_260_p2");
    sc_trace(mVcdFile, tmp_102_reg_387, "tmp_102_reg_387");
    sc_trace(mVcdFile, exitcond1_fu_254_p2, "exitcond1_fu_254_p2");
    sc_trace(mVcdFile, i_42_fu_279_p2, "i_42_fu_279_p2");
    sc_trace(mVcdFile, i_42_reg_406, "i_42_reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_103_fu_285_p3, "tmp_103_fu_285_p3");
    sc_trace(mVcdFile, tmp_103_reg_411, "tmp_103_reg_411");
    sc_trace(mVcdFile, exitcond2_fu_273_p2, "exitcond2_fu_273_p2");
    sc_trace(mVcdFile, i_5_fu_299_p2, "i_5_fu_299_p2");
    sc_trace(mVcdFile, i_5_reg_419, "i_5_reg_419");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_i3_fu_293_p2, "tmp_i3_fu_293_p2");
    sc_trace(mVcdFile, s_addr_1_reg_429, "s_addr_1_reg_429");
    sc_trace(mVcdFile, r_fu_350_p2, "r_fu_350_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, t_address1, "t_address1");
    sc_trace(mVcdFile, t_ce1, "t_ce1");
    sc_trace(mVcdFile, t_we1, "t_we1");
    sc_trace(mVcdFile, t_d1, "t_d1");
    sc_trace(mVcdFile, t_q1, "t_q1");
    sc_trace(mVcdFile, i_reg_146, "i_reg_146");
    sc_trace(mVcdFile, tmp_fu_215_p2, "tmp_fu_215_p2");
    sc_trace(mVcdFile, i_2_reg_157, "i_2_reg_157");
    sc_trace(mVcdFile, exitcond_fu_232_p2, "exitcond_fu_232_p2");
    sc_trace(mVcdFile, i_3_reg_168, "i_3_reg_168");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_4_reg_179, "i_4_reg_179");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_i1_reg_191, "i_i1_reg_191");
    sc_trace(mVcdFile, r_i2_reg_203, "r_i2_reg_203");
    sc_trace(mVcdFile, tmp_s_fu_227_p1, "tmp_s_fu_227_p1");
    sc_trace(mVcdFile, tmp_99_fu_244_p1, "tmp_99_fu_244_p1");
    sc_trace(mVcdFile, sum_i5_cast_fu_314_p1, "sum_i5_cast_fu_314_p1");
    sc_trace(mVcdFile, tmp_104_fu_319_p1, "tmp_104_fu_319_p1");
    sc_trace(mVcdFile, tmp_105_fu_356_p2, "tmp_105_fu_356_p2");
    sc_trace(mVcdFile, tmp_i4_cast_fu_305_p1, "tmp_i4_cast_fu_305_p1");
    sc_trace(mVcdFile, sum_i5_fu_309_p2, "sum_i5_fu_309_p2");
    sc_trace(mVcdFile, tmp_640_fu_328_p1, "tmp_640_fu_328_p1");
    sc_trace(mVcdFile, tmp_224_i9_fu_332_p3, "tmp_224_i9_fu_332_p3");
    sc_trace(mVcdFile, tmp_223_i8_fu_324_p1, "tmp_223_i8_fu_324_p1");
    sc_trace(mVcdFile, tmp_225_i_fu_340_p1, "tmp_225_i_fu_340_p1");
    sc_trace(mVcdFile, tmp_226_i_fu_344_p2, "tmp_226_i_fu_344_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

keccak_absorb_3::~keccak_absorb_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete t_U;
}

void keccak_absorb_3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_215_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_2_reg_157 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_2_reg_157 = i_41_fu_238_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_3_reg_168 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_3_reg_168 = tmp_102_reg_387.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_4_reg_179 = i_42_reg_406.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_4_reg_179 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_i1_reg_191 = i_5_reg_419.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        i_i1_reg_191 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(tmp_fu_215_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_reg_146 = i_40_fu_221_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_146 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        r_i2_reg_203 = r_fu_350_p2.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        r_i2_reg_203 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_42_reg_406 = i_42_fu_279_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i_5_reg_419 = i_5_fu_299_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_i3_fu_293_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        s_addr_1_reg_429 =  (sc_lv<5>) (tmp_104_fu_319_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_100_reg_379 = tmp_100_fu_249_p1.read();
        tmp_102_reg_387 = tmp_102_fu_260_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        tmp_103_reg_411 = tmp_103_fu_285_p3.read();
    }
}

void keccak_absorb_3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void keccak_absorb_3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void keccak_absorb_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void keccak_absorb_3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void keccak_absorb_3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void keccak_absorb_3::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void keccak_absorb_3::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void keccak_absorb_3::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void keccak_absorb_3::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void keccak_absorb_3::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void keccak_absorb_3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_exitcond1_fu_254_p2() {
    exitcond1_fu_254_p2 = (!i_3_reg_168.read().is_01() || !ap_const_lv6_21.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_168.read() == ap_const_lv6_21);
}

void keccak_absorb_3::thread_exitcond2_fu_273_p2() {
    exitcond2_fu_273_p2 = (!i_4_reg_179.read().is_01() || !ap_const_lv5_15.is_01())? sc_lv<1>(): sc_lv<1>(i_4_reg_179.read() == ap_const_lv5_15);
}

void keccak_absorb_3::thread_exitcond_fu_232_p2() {
    exitcond_fu_232_p2 = (!i_2_reg_157.read().is_01() || !ap_const_lv8_A8.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_157.read() == ap_const_lv8_A8);
}

void keccak_absorb_3::thread_i_40_fu_221_p2() {
    i_40_fu_221_p2 = (!i_reg_146.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_146.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void keccak_absorb_3::thread_i_41_fu_238_p2() {
    i_41_fu_238_p2 = (!i_2_reg_157.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_2_reg_157.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void keccak_absorb_3::thread_i_42_fu_279_p2() {
    i_42_fu_279_p2 = (!i_4_reg_179.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_4_reg_179.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void keccak_absorb_3::thread_i_5_fu_299_p2() {
    i_5_fu_299_p2 = (!i_i1_reg_191.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_i1_reg_191.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void keccak_absorb_3::thread_m_address0() {
    m_address0 =  (sc_lv<6>) (tmp_100_fu_249_p1.read());
}

void keccak_absorb_3::thread_m_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_r_fu_350_p2() {
    r_fu_350_p2 = (tmp_226_i_fu_344_p2.read() | r_i2_reg_203.read());
}

void keccak_absorb_3::thread_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_address0 = s_addr_1_reg_429.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        s_address0 =  (sc_lv<5>) (tmp_104_fu_319_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        s_address0 =  (sc_lv<5>) (tmp_s_fu_227_p1.read());
    } else {
        s_address0 = "XXXXX";
    }
}

void keccak_absorb_3::thread_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        s_ce0 = ap_const_logic_1;
    } else {
        s_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_s_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_d0 = tmp_105_fu_356_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        s_d0 = ap_const_lv64_0;
    } else {
        s_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void keccak_absorb_3::thread_s_we0() {
    if (((esl_seteq<1,1,1>(tmp_fu_215_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        s_we0 = ap_const_logic_1;
    } else {
        s_we0 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_sum_i5_cast_fu_314_p1() {
    sum_i5_cast_fu_314_p1 = esl_zext<64,8>(sum_i5_fu_309_p2.read());
}

void keccak_absorb_3::thread_sum_i5_fu_309_p2() {
    sum_i5_fu_309_p2 = (!tmp_103_reg_411.read().is_01() || !tmp_i4_cast_fu_305_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(tmp_103_reg_411.read()) + sc_biguint<8>(tmp_i4_cast_fu_305_p1.read()));
}

void keccak_absorb_3::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_21);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_address0 =  (sc_lv<8>) (tmp_100_reg_379.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_A7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_address0 =  (sc_lv<8>) (tmp_99_fu_244_p1.read());
    } else {
        t_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_3::thread_t_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        t_address1 =  (sc_lv<8>) (sum_i5_cast_fu_314_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_address1 =  (sc_lv<8>) (ap_const_lv64_A7);
    } else {
        t_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_3::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_t_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_ce1 = ap_const_logic_1;
    } else {
        t_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_t_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_d0 = ap_const_lv8_1F;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        t_d0 = m_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        t_d0 = ap_const_lv8_0;
    } else {
        t_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb_3::thread_t_d1() {
    t_d1 = (t_q0.read() | ap_const_lv8_80);
}

void keccak_absorb_3::thread_t_we0() {
    if (((esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_t_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_we1 = ap_const_logic_1;
    } else {
        t_we1 = ap_const_logic_0;
    }
}

void keccak_absorb_3::thread_tmp_100_fu_249_p1() {
    tmp_100_fu_249_p1 = esl_zext<64,6>(i_3_reg_168.read());
}

void keccak_absorb_3::thread_tmp_102_fu_260_p2() {
    tmp_102_fu_260_p2 = (!i_3_reg_168.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_3_reg_168.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void keccak_absorb_3::thread_tmp_103_fu_285_p3() {
    tmp_103_fu_285_p3 = esl_concat<5,3>(i_4_reg_179.read(), ap_const_lv3_0);
}

void keccak_absorb_3::thread_tmp_104_fu_319_p1() {
    tmp_104_fu_319_p1 = esl_zext<64,5>(i_4_reg_179.read());
}

void keccak_absorb_3::thread_tmp_105_fu_356_p2() {
    tmp_105_fu_356_p2 = (s_q0.read() ^ r_i2_reg_203.read());
}

void keccak_absorb_3::thread_tmp_223_i8_fu_324_p1() {
    tmp_223_i8_fu_324_p1 = esl_zext<64,8>(t_q1.read());
}

void keccak_absorb_3::thread_tmp_224_i9_fu_332_p3() {
    tmp_224_i9_fu_332_p3 = esl_concat<3,3>(tmp_640_fu_328_p1.read(), ap_const_lv3_0);
}

void keccak_absorb_3::thread_tmp_225_i_fu_340_p1() {
    tmp_225_i_fu_340_p1 = esl_zext<64,6>(tmp_224_i9_fu_332_p3.read());
}

void keccak_absorb_3::thread_tmp_226_i_fu_344_p2() {
    tmp_226_i_fu_344_p2 = (!tmp_225_i_fu_340_p1.read().is_01())? sc_lv<64>(): tmp_223_i8_fu_324_p1.read() << (unsigned short)tmp_225_i_fu_340_p1.read().to_uint();
}

void keccak_absorb_3::thread_tmp_640_fu_328_p1() {
    tmp_640_fu_328_p1 = i_i1_reg_191.read().range(3-1, 0);
}

void keccak_absorb_3::thread_tmp_99_fu_244_p1() {
    tmp_99_fu_244_p1 = esl_zext<64,8>(i_2_reg_157.read());
}

void keccak_absorb_3::thread_tmp_fu_215_p2() {
    tmp_fu_215_p2 = (!i_reg_146.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_146.read() == ap_const_lv5_19);
}

void keccak_absorb_3::thread_tmp_i3_fu_293_p2() {
    tmp_i3_fu_293_p2 = (!i_i1_reg_191.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_i1_reg_191.read() == ap_const_lv4_8);
}

void keccak_absorb_3::thread_tmp_i4_cast_fu_305_p1() {
    tmp_i4_cast_fu_305_p1 = esl_zext<8,4>(i_i1_reg_191.read());
}

void keccak_absorb_3::thread_tmp_s_fu_227_p1() {
    tmp_s_fu_227_p1 = esl_zext<64,5>(i_reg_146.read());
}

void keccak_absorb_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_215_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_232_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_254_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_273_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(tmp_i3_fu_293_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}


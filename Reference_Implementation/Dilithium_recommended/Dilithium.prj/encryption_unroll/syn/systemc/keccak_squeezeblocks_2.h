// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _keccak_squeezeblocks_2_HH_
#define _keccak_squeezeblocks_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeccakF1600_StatePer.h"

namespace ap_rtl {

struct keccak_squeezeblocks_2 : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > h_address0;
    sc_out< sc_logic > h_ce0;
    sc_out< sc_logic > h_we0;
    sc_out< sc_lv<8> > h_d0;
    sc_out< sc_lv<5> > s_address0;
    sc_out< sc_logic > s_ce0;
    sc_out< sc_logic > s_we0;
    sc_out< sc_lv<64> > s_d0;
    sc_in< sc_lv<64> > s_q0;
    sc_out< sc_lv<5> > s_address1;
    sc_out< sc_logic > s_ce1;
    sc_out< sc_logic > s_we1;
    sc_out< sc_lv<64> > s_d1;
    sc_in< sc_lv<64> > s_q1;


    // Module declarations
    keccak_squeezeblocks_2(sc_module_name name);
    SC_HAS_PROCESS(keccak_squeezeblocks_2);

    ~keccak_squeezeblocks_2();

    sc_trace_file* mVcdFile;

    KeccakF1600_StatePer* grp_KeccakF1600_StatePer_fu_118;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_36_fu_132_p2;
    sc_signal< sc_lv<5> > i_36_reg_218;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_fu_126_p2;
    sc_signal< sc_lv<8> > p_rec_fu_143_p2;
    sc_signal< sc_lv<8> > tmp_96_fu_149_p3;
    sc_signal< sc_lv<8> > tmp_96_reg_233;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > s_load_reg_238;
    sc_signal< sc_lv<4> > i_37_fu_163_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_ap_start;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_ap_done;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_ap_idle;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_ap_ready;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_fu_118_state_address0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_state_ce0;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_state_we0;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_fu_118_state_d0;
    sc_signal< sc_lv<5> > grp_KeccakF1600_StatePer_fu_118_state_address1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_state_ce1;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_state_we1;
    sc_signal< sc_lv<64> > grp_KeccakF1600_StatePer_fu_118_state_d1;
    sc_signal< sc_lv<1> > ap_phi_mux_p_s_phi_fu_75_p4;
    sc_signal< sc_lv<1> > p_s_reg_70;
    sc_signal< sc_lv<8> > p_0_rec_reg_83;
    sc_signal< sc_lv<5> > i_reg_95;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_i_fu_157_p2;
    sc_signal< sc_lv<4> > i_i_reg_107;
    sc_signal< sc_logic > grp_KeccakF1600_StatePer_fu_118_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_s_fu_138_p1;
    sc_signal< sc_lv<64> > sum_i_cast_fu_210_p1;
    sc_signal< sc_lv<3> > tmp_636_fu_169_p1;
    sc_signal< sc_lv<6> > tmp_i_57_fu_173_p3;
    sc_signal< sc_lv<64> > tmp_17_i_fu_181_p1;
    sc_signal< sc_lv<64> > tmp_18_i_fu_185_p2;
    sc_signal< sc_lv<8> > tmp_20_i_cast_fu_195_p1;
    sc_signal< sc_lv<8> > tmp_fu_199_p2;
    sc_signal< sc_lv<8> > sum_i_fu_204_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<5> ap_const_lv5_11;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_88;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_p_s_phi_fu_75_p4();
    void thread_ap_ready();
    void thread_exitcond_fu_126_p2();
    void thread_grp_KeccakF1600_StatePer_fu_118_ap_start();
    void thread_h_address0();
    void thread_h_ce0();
    void thread_h_d0();
    void thread_h_we0();
    void thread_i_36_fu_132_p2();
    void thread_i_37_fu_163_p2();
    void thread_p_rec_fu_143_p2();
    void thread_s_address0();
    void thread_s_address1();
    void thread_s_ce0();
    void thread_s_ce1();
    void thread_s_d0();
    void thread_s_d1();
    void thread_s_we0();
    void thread_s_we1();
    void thread_sum_i_cast_fu_210_p1();
    void thread_sum_i_fu_204_p2();
    void thread_tmp_17_i_fu_181_p1();
    void thread_tmp_18_i_fu_185_p2();
    void thread_tmp_20_i_cast_fu_195_p1();
    void thread_tmp_636_fu_169_p1();
    void thread_tmp_96_fu_149_p3();
    void thread_tmp_fu_199_p2();
    void thread_tmp_i_57_fu_173_p3();
    void thread_tmp_i_fu_157_p2();
    void thread_tmp_s_fu_138_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif

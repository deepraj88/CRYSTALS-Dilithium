-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rej_gamma1m1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    a_offset1 : IN STD_LOGIC_VECTOR (8 downto 0);
    len : IN STD_LOGIC_VECTOR (9 downto 0);
    buf_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce0 : OUT STD_LOGIC;
    buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buf_r_ce1 : OUT STD_LOGIC;
    buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buflen : IN STD_LOGIC_VECTOR (10 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of rej_gamma1m1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv24_87DE00 : STD_LOGIC_VECTOR (23 downto 0) := "100001111101111000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_3FB : STD_LOGIC_VECTOR (9 downto 0) := "1111111011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_FFBFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111101111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_40_cast_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_cast_reg_398 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_226_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_reg_409 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal t_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_2_cast_fu_311_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal t_2_cast_reg_439 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pos_1_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_1_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctr_4_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_41_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_reg_464 : STD_LOGIC_VECTOR (11 downto 0);
    signal ctr_reg_136 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ctr_2_phi_fu_175_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_25_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal ctr_1_reg_160 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctr_5_fu_377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctr_2_reg_171 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ctr_3_phi_fu_186_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ctr_3_reg_183 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_200_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_fu_212_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_216_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_289_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_281_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_297_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_1_fu_303_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_fu_334_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_cast_cast_fu_339_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum3_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum3_cast_cast_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv9_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_25_fu_388_p2 = ap_const_lv1_1) or (tmp_s_reg_415 = ap_const_lv1_0)))) then 
                    ap_return_preg <= ap_phi_mux_ctr_3_phi_fu_186_p4;
                end if; 
            end if;
        end if;
    end process;


    ctr_1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                if ((tmp_19_fu_322_p2 = ap_const_lv1_0)) then 
                    ctr_1_reg_160 <= ctr_reg_136;
                elsif ((tmp_19_fu_322_p2 = ap_const_lv1_1)) then 
                    ctr_1_reg_160 <= ctr_4_fu_328_p2;
                end if;
            end if; 
        end if;
    end process;

    ctr_2_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ctr_2_reg_171 <= ctr_1_reg_160;
            elsif (((or_cond_reg_460 = ap_const_lv1_1) and (tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ctr_2_reg_171 <= ctr_5_fu_377_p2;
            end if; 
        end if;
    end process;

    ctr_3_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_fu_388_p2 = ap_const_lv1_1) and (tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ctr_3_reg_183 <= ap_phi_mux_ctr_2_phi_fu_175_p4;
            elsif (((tmp_s_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ctr_3_reg_183 <= ctr_reg_136;
            end if; 
        end if;
    end process;

    ctr_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_fu_388_p2 = ap_const_lv1_0))) then 
                ctr_reg_136 <= ap_phi_mux_ctr_2_phi_fu_175_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ctr_reg_136 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    pos_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_25_fu_388_p2 = ap_const_lv1_0))) then 
                pos_reg_148 <= pos_1_reg_444;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pos_reg_148 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_cond_reg_460 <= or_cond_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                pos_1_reg_444 <= pos_1_fu_316_p2;
                    t_2_cast_reg_439(19 downto 0) <= t_2_cast_fu_311_p1(19 downto 0);
                tmp_19_reg_450 <= tmp_19_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                t_reg_424 <= buf_r_q0(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_40_cast_reg_398(10 downto 8) <= tmp_40_cast_fu_208_p1(10 downto 8);
                tmp_45_reg_409 <= tmp_45_fu_226_p1;
                    tmp_cast_reg_404(9 downto 0) <= tmp_cast_fu_222_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_fu_358_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_41_reg_464 <= tmp_41_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_s_reg_415 <= tmp_s_fu_230_p2;
            end if;
        end if;
    end process;
    tmp_40_cast_reg_398(7 downto 0) <= "00000000";
    tmp_40_cast_reg_398(11) <= '0';
    tmp_cast_reg_404(31 downto 10) <= "0000000000000000000000";
    t_2_cast_reg_439(23 downto 20) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_s_fu_230_p2, tmp_s_reg_415, ap_CS_fsm_state2, ap_CS_fsm_state6, tmp_25_fu_388_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_25_fu_388_p2 = ap_const_lv1_1) or (tmp_s_reg_415 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_42_cast_fu_348_p1, tmp_43_cast_fu_384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_address0 <= tmp_43_cast_fu_384_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= tmp_42_cast_fu_348_p1(10 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= std_logic_vector(signed(ap_const_lv24_87DE00) - signed(grp_fu_194_p1));

    a_we0_assign_proc : process(tmp_s_reg_415, ap_CS_fsm_state4, tmp_19_fu_322_p2, or_cond_reg_460, ap_CS_fsm_state6)
    begin
        if ((((tmp_19_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((or_cond_reg_460 = ap_const_lv1_1) and (tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_reg_415, ap_CS_fsm_state6, tmp_25_fu_388_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_25_fu_388_p2 = ap_const_lv1_1) or (tmp_s_reg_415 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ctr_2_phi_fu_175_p4_assign_proc : process(tmp_s_reg_415, or_cond_reg_460, ap_CS_fsm_state6, ctr_5_fu_377_p2, ctr_2_reg_171)
    begin
        if (((or_cond_reg_460 = ap_const_lv1_1) and (tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_ctr_2_phi_fu_175_p4 <= ctr_5_fu_377_p2;
        else 
            ap_phi_mux_ctr_2_phi_fu_175_p4 <= ctr_2_reg_171;
        end if; 
    end process;


    ap_phi_mux_ctr_3_phi_fu_186_p4_assign_proc : process(tmp_s_reg_415, ap_phi_mux_ctr_2_phi_fu_175_p4, ap_CS_fsm_state6, tmp_25_fu_388_p2, ctr_3_reg_183)
    begin
        if (((tmp_25_fu_388_p2 = ap_const_lv1_1) and (tmp_s_reg_415 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_ctr_3_phi_fu_186_p4 <= ap_phi_mux_ctr_2_phi_fu_175_p4;
        else 
            ap_phi_mux_ctr_3_phi_fu_186_p4 <= ctr_3_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_s_reg_415, ap_CS_fsm_state6, tmp_25_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_25_fu_388_p2 = ap_const_lv1_1) or (tmp_s_reg_415 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_s_reg_415, ap_CS_fsm_state6, tmp_25_fu_388_p2, ap_phi_mux_ctr_3_phi_fu_186_p4, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((tmp_25_fu_388_p2 = ap_const_lv1_1) or (tmp_s_reg_415 = ap_const_lv1_0)))) then 
            ap_return <= ap_phi_mux_ctr_3_phi_fu_186_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    buf_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_13_fu_241_p1, tmp_15_fu_262_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_address0 <= tmp_15_fu_262_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_r_address0 <= tmp_13_fu_241_p1(10 - 1 downto 0);
        else 
            buf_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    buf_r_address1 <= tmp_18_fu_273_p1(10 - 1 downto 0);

    buf_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            buf_r_ce0 <= ap_const_logic_1;
        else 
            buf_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_ce1 <= ap_const_logic_1;
        else 
            buf_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ctr_4_fu_328_p2 <= std_logic_vector(unsigned(ctr_reg_136) + unsigned(ap_const_lv9_1));
    ctr_5_fu_377_p2 <= std_logic_vector(unsigned(ctr_1_reg_160) + unsigned(ap_const_lv9_1));

    grp_fu_194_p1_assign_proc : process(t_2_cast_fu_311_p1, t_2_cast_reg_439, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_194_p1 <= t_2_cast_reg_439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_194_p1 <= t_2_cast_fu_311_p1;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    or_cond_fu_358_p2 <= (tmp_23_fu_353_p2 and tmp_19_reg_450);
    pos_1_fu_316_p2 <= std_logic_vector(unsigned(pos_reg_148) + unsigned(ap_const_lv32_5));
    sum3_cast_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_363_p2),12));
    sum3_fu_363_p2 <= std_logic_vector(unsigned(a_offset1) + unsigned(ctr_1_reg_160));
    sum_cast_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_334_p2),12));
    sum_fu_334_p2 <= std_logic_vector(unsigned(a_offset1) + unsigned(ctr_reg_136));
    t_1_fu_303_p3 <= (buf_r_q1 & tmp_21_fu_297_p2);
    t_2_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_1_fu_303_p3),24));
    t_2_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_424),8));
    tmp_12_fu_235_p2 <= std_logic_vector(unsigned(pos_reg_148) + unsigned(ap_const_lv32_2));
    tmp_13_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_235_p2),64));
    tmp_14_fu_256_p2 <= std_logic_vector(unsigned(pos_reg_148) + unsigned(ap_const_lv32_3));
    tmp_15_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_256_p2),64));
    tmp_16_fu_281_p3 <= (buf_r_q0 & ap_const_lv4_0);
    tmp_17_fu_267_p2 <= std_logic_vector(unsigned(pos_reg_148) + unsigned(ap_const_lv32_4));
    tmp_18_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_267_p2),64));
    tmp_19_fu_322_p2 <= "1" when (unsigned(t_1_fu_303_p3) < unsigned(ap_const_lv20_FFBFF)) else "0";
    tmp_20_fu_289_p3 <= (ap_const_lv4_0 & t_2_fu_278_p1);
    tmp_21_fu_297_p2 <= (tmp_20_fu_289_p3 or tmp_16_fu_281_p3);
    tmp_23_fu_353_p2 <= "1" when (unsigned(ctr_1_reg_160) < unsigned(tmp_45_reg_409)) else "0";
    tmp_25_fu_388_p2 <= "1" when (unsigned(pos_1_reg_444) > unsigned(tmp_cast_reg_404)) else "0";
    tmp_39_fu_200_p3 <= (a_offset & ap_const_lv8_0);
    tmp_40_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_200_p3),12));
    tmp_40_fu_343_p2 <= std_logic_vector(unsigned(tmp_40_cast_reg_398) + unsigned(sum_cast_cast_fu_339_p1));
    tmp_41_fu_372_p2 <= std_logic_vector(unsigned(tmp_40_cast_reg_398) + unsigned(sum3_cast_cast_fu_368_p1));
    tmp_42_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_343_p2),64));
    tmp_43_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_464),64));
    tmp_44_fu_212_p1 <= buflen(10 - 1 downto 0);
    tmp_45_fu_226_p1 <= len(9 - 1 downto 0);
    tmp_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_216_p2),32));
    tmp_fu_216_p2 <= std_logic_vector(signed(ap_const_lv10_3FB) + signed(tmp_44_fu_212_p1));
    tmp_s_fu_230_p2 <= "1" when (unsigned(ctr_reg_136) < unsigned(tmp_45_reg_409)) else "0";
end behav;

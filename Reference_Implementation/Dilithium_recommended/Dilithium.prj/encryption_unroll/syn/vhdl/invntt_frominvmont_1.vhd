-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity invntt_frominvmont_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_we0 : OUT STD_LOGIC;
    p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ce1 : OUT STD_LOGIC;
    p_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of invntt_frominvmont_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7FE00100 : STD_LOGIC_VECTOR (31 downto 0) := "01111111111000000000000100000000";
    constant ap_const_lv32_FC7FDFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111100011111111101111111111111";
    constant ap_const_lv55_7FE001 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000011111111110000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_801C06 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000001110000000110";
    constant ap_const_lv49_A3FA : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001010001111111010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zetas_inv_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zetas_inv_ce0 : STD_LOGIC;
    signal zetas_inv_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_628_cast_fu_171_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_628_cast_reg_486 : STD_LOGIC_VECTOR (11 downto 0);
    signal len_cast_fu_180_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal len_cast_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_cast4_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast4_reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_1_fu_220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_6_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_6_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_221_cast3_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_221_cast3_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal start_cast_fu_264_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_cast_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_223_cast_fu_268_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_223_cast_reg_540 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_addr_2_reg_548 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_143_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_3_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_7_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_7_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_fu_321_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_149_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_149_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal a_assign_s_fu_351_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_s_reg_574 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_655_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_655_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_30_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_30_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal t_31_fu_368_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_31_reg_589 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_6_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_6_reg_597 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_addr_reg_602 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_138_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_27_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_27_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal a_assign_fu_437_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal a_assign_reg_613 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_28_fu_446_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_28_reg_618 : STD_LOGIC_VECTOR (54 downto 0);
    signal len_reg_114 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_126 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j8_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_1_reg_147 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_139_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_632_cast_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_633_cast_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_630_cast_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_i_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i2_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_163_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_648_fu_196_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_140_fu_231_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_649_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_141_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_fu_256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_651_fu_277_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_609_fu_281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_653_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_652_fu_291_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_654_fu_299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_610_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_148_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_s_fu_351_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_assign_s_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_31_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_18_cast2_fu_374_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_43_cast_fu_377_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_32_fu_380_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_611_fu_386_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_142_cast_fu_413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_607_fu_417_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_27_fu_427_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_225_cast_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_28_fu_446_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_cast1_fu_452_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_39_cast_fu_455_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_29_fu_458_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_608_fu_464_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal a_assign_fu_437_p00 : STD_LOGIC_VECTOR (48 downto 0);
    signal a_assign_s_fu_351_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_28_fu_446_p00 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_31_fu_368_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component invntt_frominvmoneOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    zetas_inv_U : component invntt_frominvmoneOg
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zetas_inv_address0,
        ce0 => zetas_inv_ce0,
        q0 => zetas_inv_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j8_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j8_reg_138 <= j_7_reg_559;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j8_reg_138 <= j_cast4_reg_502;
            end if; 
        end if;
    end process;

    j_1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_184_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_1_reg_147 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_1_reg_147 <= j_6_reg_597;
            end if; 
        end if;
    end process;

    j_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_184_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_126 <= ap_const_lv10_0;
            elsif (((tmp_143_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_126 <= tmp_150_fu_321_p2;
            end if; 
        end if;
    end process;

    k_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_143_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_fu_58 <= k_6_reg_525;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_58 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    len_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                len_reg_114 <= len_1_fu_220_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                len_reg_114 <= ap_const_lv9_1;
            end if; 
        end if;
    end process;

    reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_158 <= p_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_158 <= p_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    a_assign_reg_613(48 downto 1) <= a_assign_fu_437_p2(48 downto 1);
                    t_28_reg_618(54 downto 1) <= t_28_fu_446_p2(54 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                a_assign_s_reg_574 <= a_assign_s_fu_351_p2;
                tmp_655_reg_579 <= tmp_655_fu_356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_6_reg_597 <= j_6_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_143_fu_272_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_7_reg_559 <= j_7_fu_315_p2;
                p_addr_2_reg_548 <= tmp_632_cast_fu_286_p1(11 - 1 downto 0);
                p_addr_3_reg_553 <= tmp_633_cast_fu_310_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    j_cast4_reg_502(9 downto 0) <= j_cast4_fu_192_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_6_reg_525 <= k_6_fu_226_p2;
                    start_cast_reg_535(8 downto 0) <= start_cast_fu_264_p1(8 downto 0);
                    tmp_221_cast3_reg_530(9 downto 0) <= tmp_221_cast3_fu_236_p1(9 downto 0);
                    tmp_223_cast_reg_540(22 downto 0) <= tmp_223_cast_fu_268_p1(22 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    len_cast_reg_493(8 downto 0) <= len_cast_fu_180_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_138_fu_401_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                p_addr_reg_602 <= tmp_630_cast_fu_422_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    t_27_reg_608(31 downto 1) <= t_27_fu_427_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                t_30_reg_584 <= t_30_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                t_31_reg_589 <= t_31_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_149_reg_569 <= tmp_149_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_628_cast_reg_486(10 downto 8) <= tmp_628_cast_fu_171_p1(10 downto 8);
            end if;
        end if;
    end process;
    tmp_628_cast_reg_486(7 downto 0) <= "00000000";
    tmp_628_cast_reg_486(11) <= '0';
    len_cast_reg_493(9) <= '0';
    j_cast4_reg_502(31 downto 10) <= "0000000000000000000000";
    tmp_221_cast3_reg_530(31 downto 10) <= "0000000000000000000000";
    start_cast_reg_535(9) <= '0';
    tmp_223_cast_reg_540(54 downto 23) <= "00000000000000000000000000000000";
    t_27_reg_608(0) <= '0';
    a_assign_reg_613(0) <= '0';
    t_28_reg_618(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_fu_206_p2, ap_CS_fsm_state5, tmp_143_fu_272_p2, ap_CS_fsm_state13, tmp_138_fu_401_p2, tmp_fu_184_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_184_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_143_fu_272_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                if (((tmp_138_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_18_cast2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_s_reg_574),56));
    a_assign_cast1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_reg_613),56));
    a_assign_fu_437_p0 <= a_assign_fu_437_p00(32 - 1 downto 0);
    a_assign_fu_437_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_225_cast_fu_433_p0),49));
    a_assign_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_437_p0) * unsigned(ap_const_lv49_A3FA), 49));
    a_assign_s_fu_351_p0 <= tmp_223_cast_reg_540(23 - 1 downto 0);
    a_assign_s_fu_351_p1 <= a_assign_s_fu_351_p10(32 - 1 downto 0);
    a_assign_s_fu_351_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_reg_569),55));
    a_assign_s_fu_351_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_s_fu_351_p0) * unsigned(a_assign_s_fu_351_p1), 55));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, tmp_138_fu_401_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_138_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, tmp_138_fu_401_p2)
    begin
        if (((tmp_138_fu_401_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_206_p2 <= "1" when (tmp_648_fu_196_p4 = ap_const_lv2_0) else "0";
    j_6_fu_407_p2 <= std_logic_vector(unsigned(j_1_reg_147) + unsigned(ap_const_lv9_1));
    j_7_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j8_reg_138));
    j_cast4_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_126),32));
    k_6_fu_226_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_fu_58));
    len_1_fu_220_p2 <= std_logic_vector(shift_left(unsigned(len_reg_114),to_integer(unsigned('0' & ap_const_lv9_1(9-1 downto 0)))));
    len_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_reg_114),10));

    p_address0_assign_proc : process(ap_CS_fsm_state6, p_addr_2_reg_548, ap_CS_fsm_state5, p_addr_3_reg_553, p_addr_reg_602, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_632_cast_fu_286_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_address0 <= p_addr_reg_602;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_address0 <= p_addr_3_reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_address0 <= p_addr_2_reg_548;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address0 <= tmp_632_cast_fu_286_p1(11 - 1 downto 0);
        else 
            p_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p_address1_assign_proc : process(ap_CS_fsm_state5, p_addr_3_reg_553, ap_CS_fsm_state13, tmp_633_cast_fu_310_p1, tmp_630_cast_fu_422_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_address1 <= tmp_630_cast_fu_422_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            p_address1 <= p_addr_3_reg_553;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address1 <= tmp_633_cast_fu_310_p1(11 - 1 downto 0);
        else 
            p_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            p_ce1 <= ap_const_logic_1;
        else 
            p_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    p_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_147_fu_329_p2, tmp_i_fu_396_p1, tmp_i2_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            p_d0 <= tmp_i2_fu_474_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            p_d0 <= tmp_i_fu_396_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_d0 <= tmp_147_fu_329_p2;
        else 
            p_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            p_we0 <= ap_const_logic_1;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_fu_256_p3),10));
    start_fu_256_p3 <= 
        tmp_649_fu_246_p1 when (tmp_141_fu_240_p2(0) = '1') else 
        tmp_54_fu_250_p2;
    t_27_fu_427_p0 <= reg_158;
    t_27_fu_427_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t_27_fu_427_p0) * signed('0' &ap_const_lv32_801C06))), 32));
    t_28_fu_446_p0 <= t_28_fu_446_p00(32 - 1 downto 0);
    t_28_fu_446_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_27_reg_608),55));
    t_28_fu_446_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_28_fu_446_p0) * unsigned(ap_const_lv55_7FE001), 55));
    t_29_fu_458_p2 <= std_logic_vector(unsigned(a_assign_cast1_fu_452_p1) + unsigned(t_39_cast_fu_455_p1));
    t_30_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_655_reg_579))), 32));
    t_31_fu_368_p1 <= t_31_fu_368_p10(32 - 1 downto 0);
    t_31_fu_368_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_30_reg_584),55));
    t_31_fu_368_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_31_fu_368_p1), 55));
    t_32_fu_380_p2 <= std_logic_vector(unsigned(a_assign_18_cast2_fu_374_p1) + unsigned(t_43_cast_fu_377_p1));
    t_39_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_28_reg_618),56));
    t_43_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_31_reg_589),56));
    tmp_138_fu_401_p2 <= "1" when (j_1_reg_147 = ap_const_lv9_100) else "0";
    tmp_139_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_58),64));
    tmp_140_fu_231_p2 <= std_logic_vector(unsigned(len_cast_reg_493) + unsigned(j_reg_126));
    tmp_141_fu_240_p2 <= "1" when (unsigned(j_reg_126) > unsigned(tmp_140_fu_231_p2)) else "0";
    tmp_142_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_147),12));
    tmp_143_fu_272_p2 <= "1" when (unsigned(j8_reg_138) < unsigned(tmp_221_cast3_reg_530)) else "0";
    tmp_147_fu_329_p2 <= std_logic_vector(unsigned(p_q0) + unsigned(p_q1));
    tmp_148_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv32_7FE00100) + unsigned(reg_158));
    tmp_149_fu_342_p2 <= std_logic_vector(unsigned(tmp_148_fu_336_p2) - unsigned(p_q1));
    tmp_150_fu_321_p2 <= std_logic_vector(unsigned(start_cast_reg_535) + unsigned(len_cast_reg_493));
    tmp_221_cast3_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_231_p2),32));
    tmp_223_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zetas_inv_q0),55));
    tmp_225_cast_fu_433_p0 <= reg_158;
    tmp_54_fu_250_p2 <= std_logic_vector(unsigned(tmp_649_fu_246_p1) + unsigned(len_reg_114));
    tmp_607_fu_417_p2 <= std_logic_vector(unsigned(tmp_628_cast_reg_486) + unsigned(tmp_142_cast_fu_413_p1));
    tmp_608_fu_464_p4 <= t_29_fu_458_p2(55 downto 32);
    tmp_609_fu_281_p2 <= std_logic_vector(unsigned(tmp_628_cast_reg_486) + unsigned(tmp_651_fu_277_p1));
    tmp_610_fu_305_p2 <= std_logic_vector(unsigned(tmp_628_cast_reg_486) + unsigned(tmp_654_fu_299_p2));
    tmp_611_fu_386_p4 <= t_32_fu_380_p2(55 downto 32);
    tmp_628_cast_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_163_p3),12));
    tmp_630_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_607_fu_417_p2),64));
    tmp_632_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_609_fu_281_p2),64));
    tmp_633_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_610_fu_305_p2),64));
    tmp_648_fu_196_p4 <= j_reg_126(9 downto 8);
    tmp_649_fu_246_p1 <= j_reg_126(9 - 1 downto 0);
    tmp_651_fu_277_p1 <= j8_reg_138(12 - 1 downto 0);
    tmp_652_fu_291_p1 <= j8_reg_138(12 - 1 downto 0);
    tmp_653_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_reg_114),12));
    tmp_654_fu_299_p2 <= std_logic_vector(unsigned(tmp_653_fu_295_p1) + unsigned(tmp_652_fu_291_p1));
    tmp_655_fu_356_p1 <= a_assign_s_fu_351_p2(32 - 1 downto 0);
    tmp_fu_184_p3 <= len_reg_114(8 downto 8);
    tmp_i2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_608_fu_464_p4),32));
    tmp_i_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_611_fu_386_p4),32));
    tmp_s_fu_163_p3 <= (p_offset & ap_const_lv8_0);
    zetas_inv_address0 <= tmp_139_fu_215_p1(8 - 1 downto 0);

    zetas_inv_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            zetas_inv_ce0 <= ap_const_logic_1;
        else 
            zetas_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

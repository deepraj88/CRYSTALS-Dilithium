-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ntt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_ce0 : OUT STD_LOGIC;
    p_we0 : OUT STD_LOGIC;
    p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of ntt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv29_80 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv32_FC7FDFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111100011111111101111111111111";
    constant ap_const_lv55_7FE001 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000011111111110000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv24_FFC002 : STD_LOGIC_VECTOR (23 downto 0) := "111111111100000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zetas_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zetas_ce0 : STD_LOGIC;
    signal zetas_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_613_cast_fu_136_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_613_cast_reg_370 : STD_LOGIC_VECTOR (11 downto 0);
    signal len_cast_cast7_fu_145_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal len_cast_cast7_reg_376 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_625_fu_155_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_625_reg_385 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal len_1_fu_193_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_5_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_5_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_627_fu_207_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_627_reg_414 : STD_LOGIC_VECTOR (29 downto 0);
    signal start_cast_fu_224_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal start_cast_reg_419 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_150_cast_fu_228_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_150_cast_reg_424 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_addr11_reg_432 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_86_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_reg_437 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_5_fu_275_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_5_reg_442 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_93_fu_281_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_load_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal a_assign_fu_292_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal a_assign_reg_457 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_632_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_632_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal t_24_fu_309_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_24_reg_472 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_605_reg_477 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal len_reg_95 : STD_LOGIC_VECTOR (28 downto 0);
    signal j_reg_107 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j5_reg_119 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_83_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_615_cast_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_617_cast_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_91_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_92_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_128_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_626_fu_159_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_628_fu_183_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_84_fu_202_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_85_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_fu_217_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_630_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_629_fu_237_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_631_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_604_fu_251_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_633_fu_261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_606_fu_265_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_fu_292_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal a_assign_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_24_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_cast1_fu_315_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_34_cast_fu_318_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal t_25_fu_321_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_90_fu_337_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_157_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_26_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal a_assign_fu_292_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_24_fu_309_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component ntt_1_zetas IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    zetas_U : component ntt_1_zetas
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => zetas_address0,
        ce0 => zetas_ce0,
        q0 => zetas_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j5_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j5_reg_119 <= j_5_reg_442;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j5_reg_119 <= tmp_625_reg_385;
            end if; 
        end if;
    end process;

    j_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_107 <= ap_const_lv31_0;
            elsif (((tmp_86_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_107 <= tmp_93_fu_281_p2;
            end if; 
        end if;
    end process;

    k_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_fu_52 <= k_5_reg_409;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_fu_52 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    len_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                                len_reg_95(7 downto 0) <= len_1_fu_193_p1(7 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                len_reg_95(0) <= '0';
                len_reg_95(1) <= '0';
                len_reg_95(2) <= '0';
                len_reg_95(3) <= '0';
                len_reg_95(4) <= '0';
                len_reg_95(5) <= '0';
                len_reg_95(6) <= '0';
                len_reg_95(7) <= '1';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a_assign_reg_457 <= a_assign_fu_292_p2;
                tmp_632_reg_462 <= tmp_632_fu_297_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                j_5_reg_442 <= j_5_fu_275_p2;
                p_addr11_reg_432 <= tmp_615_cast_fu_256_p1(11 - 1 downto 0);
                p_addr_reg_437 <= tmp_617_cast_fu_270_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_5_reg_409 <= k_5_fu_197_p2;
                    start_cast_reg_419(29 downto 0) <= start_cast_fu_224_p1(29 downto 0);
                    tmp_150_cast_reg_424(22 downto 0) <= tmp_150_cast_fu_228_p1(22 downto 0);
                tmp_627_reg_414 <= tmp_627_fu_207_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    len_cast_cast7_reg_376(7 downto 0) <= len_cast_cast7_fu_145_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_load_reg_452 <= p_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                t_24_reg_472 <= t_24_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                t_reg_467 <= t_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_605_reg_477 <= t_25_fu_321_p2(55 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_613_cast_reg_370(10 downto 8) <= tmp_613_cast_fu_136_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_625_reg_385 <= tmp_625_fu_155_p1;
            end if;
        end if;
    end process;
    tmp_613_cast_reg_370(7 downto 0) <= "00000000";
    tmp_613_cast_reg_370(11) <= '0';
    len_cast_cast7_reg_376(30 downto 8) <= "00000000000000000000000";
    start_cast_reg_419(30) <= '0';
    tmp_150_cast_reg_424(54 downto 23) <= "00000000000000000000000000000000";
    len_reg_95(28 downto 8) <= "000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_fu_169_p2, ap_CS_fsm_state5, tmp_86_fu_232_p2, tmp_fu_149_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_86_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_cast1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_reg_457),56));
    a_assign_fu_292_p0 <= tmp_150_cast_reg_424(23 - 1 downto 0);
    a_assign_fu_292_p1 <= a_assign_fu_292_p10(32 - 1 downto 0);
    a_assign_fu_292_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_load_reg_452),55));
    a_assign_fu_292_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_292_p0) * unsigned(a_assign_fu_292_p1), 55));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_149_p2)
    begin
        if ((((tmp_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_149_p2)
    begin
        if (((tmp_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_169_p2 <= "1" when (tmp_626_fu_159_p4 = ap_const_lv23_0) else "0";
    j_5_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv30_1) + unsigned(j5_reg_119));
    k_5_fu_197_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_fu_52));
    len_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_628_fu_183_p4),29));
    len_cast_cast7_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(len_reg_95),31));

    p_address0_assign_proc : process(p_addr11_reg_432, ap_CS_fsm_state5, p_addr_reg_437, ap_CS_fsm_state10, ap_CS_fsm_state13, tmp_615_cast_fu_256_p1, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_address0 <= p_addr11_reg_432;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            p_address0 <= p_addr_reg_437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_address0 <= tmp_615_cast_fu_256_p1(11 - 1 downto 0);
        else 
            p_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    p_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            p_ce0 <= ap_const_logic_1;
        else 
            p_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11, tmp_91_fu_346_p2, tmp_92_fu_356_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            p_d0 <= tmp_92_fu_356_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            p_d0 <= tmp_91_fu_346_p2;
        else 
            p_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    p_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            p_we0 <= ap_const_logic_1;
        else 
            p_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_fu_217_p3),31));
    start_fu_217_p3 <= 
        tmp_625_reg_385 when (tmp_85_fu_211_p2(0) = '1') else 
        tmp_627_fu_207_p1;
    t_24_fu_309_p1 <= t_24_fu_309_p10(32 - 1 downto 0);
    t_24_fu_309_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_467),55));
    t_24_fu_309_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_24_fu_309_p1), 55));
    t_25_fu_321_p2 <= std_logic_vector(unsigned(a_assign_cast1_fu_315_p1) + unsigned(t_34_cast_fu_318_p1));
    t_26_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_605_reg_477),32));
    t_34_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_24_reg_472),56));
    t_fu_301_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_632_reg_462))), 32));
    tmp_150_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zetas_q0),55));
    tmp_157_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_337_p2),32));
    tmp_604_fu_251_p2 <= std_logic_vector(unsigned(tmp_613_cast_reg_370) + unsigned(tmp_631_fu_245_p2));
    tmp_606_fu_265_p2 <= std_logic_vector(unsigned(tmp_613_cast_reg_370) + unsigned(tmp_633_fu_261_p1));
    tmp_613_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_128_p3),12));
    tmp_615_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_604_fu_251_p2),64));
    tmp_617_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_606_fu_265_p2),64));
    tmp_625_fu_155_p1 <= j_reg_107(30 - 1 downto 0);
    tmp_626_fu_159_p4 <= j_reg_107(30 downto 8);
    tmp_627_fu_207_p1 <= tmp_84_fu_202_p2(30 - 1 downto 0);
    tmp_628_fu_183_p4 <= len_reg_95(28 downto 1);
    tmp_629_fu_237_p1 <= j5_reg_119(12 - 1 downto 0);
    tmp_630_fu_241_p1 <= len_reg_95(12 - 1 downto 0);
    tmp_631_fu_245_p2 <= std_logic_vector(unsigned(tmp_630_fu_241_p1) + unsigned(tmp_629_fu_237_p1));
    tmp_632_fu_297_p1 <= a_assign_fu_292_p2(32 - 1 downto 0);
    tmp_633_fu_261_p1 <= j5_reg_119(12 - 1 downto 0);
    tmp_83_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_52),64));
    tmp_84_fu_202_p2 <= std_logic_vector(unsigned(len_cast_cast7_reg_376) + unsigned(j_reg_107));
    tmp_85_fu_211_p2 <= "1" when (unsigned(j_reg_107) > unsigned(tmp_84_fu_202_p2)) else "0";
    tmp_86_fu_232_p2 <= "1" when (unsigned(j5_reg_119) < unsigned(tmp_627_reg_414)) else "0";
    tmp_90_fu_337_p2 <= std_logic_vector(signed(ap_const_lv24_FFC002) - signed(tmp_605_reg_477));
    tmp_91_fu_346_p2 <= std_logic_vector(unsigned(tmp_157_cast_fu_342_p1) + unsigned(p_q0));
    tmp_92_fu_356_p2 <= std_logic_vector(unsigned(t_26_fu_353_p1) + unsigned(p_q0));
    tmp_93_fu_281_p2 <= std_logic_vector(unsigned(len_cast_cast7_reg_376) + unsigned(start_cast_reg_419));
    tmp_fu_149_p2 <= "1" when (len_reg_95 = ap_const_lv29_0) else "0";
    tmp_s_fu_128_p3 <= (p_offset & ap_const_lv8_0);
    zetas_address0 <= tmp_83_fu_178_p1(8 - 1 downto 0);

    zetas_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            zetas_ce0 <= ap_const_logic_1;
        else 
            zetas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

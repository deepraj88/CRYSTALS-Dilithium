// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rej_gamma1m1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_offset,
        a_offset1,
        len,
        buf_r_address0,
        buf_r_ce0,
        buf_r_q0,
        buf_r_address1,
        buf_r_ce1,
        buf_r_q1,
        buflen,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_address0;
output   a_ce0;
output   a_we0;
output  [23:0] a_d0;
input  [2:0] a_offset;
input  [8:0] a_offset1;
input  [9:0] len;
output  [9:0] buf_r_address0;
output   buf_r_ce0;
input  [7:0] buf_r_q0;
output  [9:0] buf_r_address1;
output   buf_r_ce1;
input  [7:0] buf_r_q1;
input  [10:0] buflen;
output  [8:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] a_address0;
reg a_ce0;
reg a_we0;
reg[9:0] buf_r_address0;
reg buf_r_ce0;
reg buf_r_ce1;
reg[8:0] ap_return;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] tmp_40_cast_fu_208_p1;
reg   [11:0] tmp_40_cast_reg_398;
wire   [31:0] tmp_cast_fu_222_p1;
reg   [31:0] tmp_cast_reg_404;
wire   [8:0] tmp_45_fu_226_p1;
reg   [8:0] tmp_45_reg_409;
wire   [0:0] tmp_s_fu_230_p2;
reg   [0:0] tmp_s_reg_415;
wire    ap_CS_fsm_state2;
reg   [3:0] t_reg_424;
wire    ap_CS_fsm_state3;
wire   [23:0] t_2_cast_fu_311_p1;
reg   [23:0] t_2_cast_reg_439;
wire    ap_CS_fsm_state4;
wire   [31:0] pos_1_fu_316_p2;
reg   [31:0] pos_1_reg_444;
wire   [0:0] tmp_19_fu_322_p2;
reg   [0:0] tmp_19_reg_450;
wire   [8:0] ctr_4_fu_328_p2;
wire   [0:0] or_cond_fu_358_p2;
reg   [0:0] or_cond_reg_460;
wire    ap_CS_fsm_state5;
wire   [11:0] tmp_41_fu_372_p2;
reg   [11:0] tmp_41_reg_464;
reg   [8:0] ctr_reg_136;
reg   [8:0] ap_phi_mux_ctr_2_phi_fu_175_p4;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_25_fu_388_p2;
reg   [31:0] pos_reg_148;
reg   [8:0] ctr_1_reg_160;
wire   [8:0] ctr_5_fu_377_p2;
reg   [8:0] ctr_2_reg_171;
reg   [8:0] ap_phi_mux_ctr_3_phi_fu_186_p4;
reg   [8:0] ctr_3_reg_183;
wire   [63:0] tmp_13_fu_241_p1;
wire   [63:0] tmp_15_fu_262_p1;
wire   [63:0] tmp_18_fu_273_p1;
wire   [63:0] tmp_42_cast_fu_348_p1;
wire   [63:0] tmp_43_cast_fu_384_p1;
reg   [23:0] grp_fu_194_p1;
wire   [10:0] tmp_39_fu_200_p3;
wire   [9:0] tmp_44_fu_212_p1;
wire   [9:0] tmp_fu_216_p2;
wire   [31:0] tmp_12_fu_235_p2;
wire   [31:0] tmp_14_fu_256_p2;
wire   [31:0] tmp_17_fu_267_p2;
wire   [7:0] t_2_fu_278_p1;
wire   [11:0] tmp_20_fu_289_p3;
wire   [11:0] tmp_16_fu_281_p3;
wire   [11:0] tmp_21_fu_297_p2;
wire   [19:0] t_1_fu_303_p3;
wire   [8:0] sum_fu_334_p2;
wire   [11:0] sum_cast_cast_fu_339_p1;
wire   [11:0] tmp_40_fu_343_p2;
wire   [0:0] tmp_23_fu_353_p2;
wire   [8:0] sum3_fu_363_p2;
wire   [11:0] sum3_cast_cast_fu_368_p1;
reg   [8:0] ap_return_preg;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_return_preg = 9'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 9'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) & ((tmp_25_fu_388_p2 == 1'd1) | (tmp_s_reg_415 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_ctr_3_phi_fu_186_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        if ((tmp_19_fu_322_p2 == 1'd0)) begin
            ctr_1_reg_160 <= ctr_reg_136;
        end else if ((tmp_19_fu_322_p2 == 1'd1)) begin
            ctr_1_reg_160 <= ctr_4_fu_328_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_358_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ctr_2_reg_171 <= ctr_1_reg_160;
    end else if (((or_cond_reg_460 == 1'd1) & (tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ctr_2_reg_171 <= ctr_5_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_388_p2 == 1'd1) & (tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ctr_3_reg_183 <= ap_phi_mux_ctr_2_phi_fu_175_p4;
    end else if (((tmp_s_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ctr_3_reg_183 <= ctr_reg_136;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_fu_388_p2 == 1'd0))) begin
        ctr_reg_136 <= ap_phi_mux_ctr_2_phi_fu_175_p4;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctr_reg_136 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_25_fu_388_p2 == 1'd0))) begin
        pos_reg_148 <= pos_1_reg_444;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pos_reg_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_cond_reg_460 <= or_cond_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pos_1_reg_444 <= pos_1_fu_316_p2;
        t_2_cast_reg_439[19 : 0] <= t_2_cast_fu_311_p1[19 : 0];
        tmp_19_reg_450 <= tmp_19_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_reg_424 <= {{buf_r_q0[7:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_40_cast_reg_398[10 : 8] <= tmp_40_cast_fu_208_p1[10 : 8];
        tmp_45_reg_409 <= tmp_45_fu_226_p1;
        tmp_cast_reg_404[9 : 0] <= tmp_cast_fu_222_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_358_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_41_reg_464 <= tmp_41_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_s_reg_415 <= tmp_s_fu_230_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a_address0 = tmp_43_cast_fu_384_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_42_cast_fu_348_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_19_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((or_cond_reg_460 == 1'd1) & (tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & ((tmp_25_fu_388_p2 == 1'd1) | (tmp_s_reg_415 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_460 == 1'd1) & (tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_ctr_2_phi_fu_175_p4 = ctr_5_fu_377_p2;
    end else begin
        ap_phi_mux_ctr_2_phi_fu_175_p4 = ctr_2_reg_171;
    end
end

always @ (*) begin
    if (((tmp_25_fu_388_p2 == 1'd1) & (tmp_s_reg_415 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_phi_mux_ctr_3_phi_fu_186_p4 = ap_phi_mux_ctr_2_phi_fu_175_p4;
    end else begin
        ap_phi_mux_ctr_3_phi_fu_186_p4 = ctr_3_reg_183;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((tmp_25_fu_388_p2 == 1'd1) | (tmp_s_reg_415 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((tmp_25_fu_388_p2 == 1'd1) | (tmp_s_reg_415 == 1'd0)))) begin
        ap_return = ap_phi_mux_ctr_3_phi_fu_186_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_address0 = tmp_15_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_r_address0 = tmp_13_fu_241_p1;
    end else begin
        buf_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_r_ce1 = 1'b1;
    end else begin
        buf_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_194_p1 = t_2_cast_reg_439;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_194_p1 = t_2_cast_fu_311_p1;
    end else begin
        grp_fu_194_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((tmp_25_fu_388_p2 == 1'd1) | (tmp_s_reg_415 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_d0 = ($signed(24'd8904192) - $signed(grp_fu_194_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign buf_r_address1 = tmp_18_fu_273_p1;

assign ctr_4_fu_328_p2 = (ctr_reg_136 + 9'd1);

assign ctr_5_fu_377_p2 = (ctr_1_reg_160 + 9'd1);

assign or_cond_fu_358_p2 = (tmp_23_fu_353_p2 & tmp_19_reg_450);

assign pos_1_fu_316_p2 = (pos_reg_148 + 32'd5);

assign sum3_cast_cast_fu_368_p1 = sum3_fu_363_p2;

assign sum3_fu_363_p2 = (a_offset1 + ctr_1_reg_160);

assign sum_cast_cast_fu_339_p1 = sum_fu_334_p2;

assign sum_fu_334_p2 = (a_offset1 + ctr_reg_136);

assign t_1_fu_303_p3 = {{buf_r_q1}, {tmp_21_fu_297_p2}};

assign t_2_cast_fu_311_p1 = t_1_fu_303_p3;

assign t_2_fu_278_p1 = t_reg_424;

assign tmp_12_fu_235_p2 = (pos_reg_148 + 32'd2);

assign tmp_13_fu_241_p1 = tmp_12_fu_235_p2;

assign tmp_14_fu_256_p2 = (pos_reg_148 + 32'd3);

assign tmp_15_fu_262_p1 = tmp_14_fu_256_p2;

assign tmp_16_fu_281_p3 = {{buf_r_q0}, {4'd0}};

assign tmp_17_fu_267_p2 = (pos_reg_148 + 32'd4);

assign tmp_18_fu_273_p1 = tmp_17_fu_267_p2;

assign tmp_19_fu_322_p2 = ((t_1_fu_303_p3 < 20'd1047551) ? 1'b1 : 1'b0);

assign tmp_20_fu_289_p3 = {{4'd0}, {t_2_fu_278_p1}};

assign tmp_21_fu_297_p2 = (tmp_20_fu_289_p3 | tmp_16_fu_281_p3);

assign tmp_23_fu_353_p2 = ((ctr_1_reg_160 < tmp_45_reg_409) ? 1'b1 : 1'b0);

assign tmp_25_fu_388_p2 = ((pos_1_reg_444 > tmp_cast_reg_404) ? 1'b1 : 1'b0);

assign tmp_39_fu_200_p3 = {{a_offset}, {8'd0}};

assign tmp_40_cast_fu_208_p1 = tmp_39_fu_200_p3;

assign tmp_40_fu_343_p2 = (tmp_40_cast_reg_398 + sum_cast_cast_fu_339_p1);

assign tmp_41_fu_372_p2 = (tmp_40_cast_reg_398 + sum3_cast_cast_fu_368_p1);

assign tmp_42_cast_fu_348_p1 = tmp_40_fu_343_p2;

assign tmp_43_cast_fu_384_p1 = tmp_41_reg_464;

assign tmp_44_fu_212_p1 = buflen[9:0];

assign tmp_45_fu_226_p1 = len[8:0];

assign tmp_cast_fu_222_p1 = tmp_fu_216_p2;

assign tmp_fu_216_p2 = ($signed(10'd1019) + $signed(tmp_44_fu_212_p1));

assign tmp_s_fu_230_p2 = ((ctr_reg_136 < tmp_45_reg_409) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_40_cast_reg_398[7:0] <= 8'b00000000;
    tmp_40_cast_reg_398[11] <= 1'b0;
    tmp_cast_reg_404[31:10] <= 22'b0000000000000000000000;
    t_2_cast_reg_439[23:20] <= 4'b0000;
end

endmodule //rej_gamma1m1

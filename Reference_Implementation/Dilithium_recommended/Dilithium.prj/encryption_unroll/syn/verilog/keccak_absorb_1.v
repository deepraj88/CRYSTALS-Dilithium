// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        m_address0,
        m_ce0,
        m_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [6:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_50_fu_221_p2;
wire    ap_CS_fsm_state2;
wire   [7:0] i_51_fu_238_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_118_fu_249_p1;
reg   [63:0] tmp_118_reg_379;
wire    ap_CS_fsm_state4;
wire   [6:0] tmp_120_fu_260_p2;
reg   [6:0] tmp_120_reg_387;
wire   [0:0] exitcond5_fu_254_p2;
wire   [4:0] i_52_fu_279_p2;
reg   [4:0] i_52_reg_406;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_121_fu_285_p3;
reg   [7:0] tmp_121_reg_411;
wire   [0:0] exitcond6_fu_273_p2;
wire   [3:0] i_8_fu_299_p2;
reg   [3:0] i_8_reg_419;
wire    ap_CS_fsm_state8;
wire   [0:0] tmp_i3_fu_293_p2;
reg   [4:0] s_addr_4_reg_429;
wire   [63:0] r_fu_350_p2;
wire    ap_CS_fsm_state9;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
reg   [7:0] t_address1;
reg    t_ce1;
reg    t_we1;
wire   [7:0] t_d1;
wire   [7:0] t_q1;
reg   [4:0] i_reg_146;
wire   [0:0] tmp_fu_215_p2;
reg   [7:0] i_2_reg_157;
wire   [0:0] exitcond_fu_232_p2;
reg   [6:0] i_3_reg_168;
wire    ap_CS_fsm_state5;
reg   [4:0] i_4_reg_179;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
reg   [3:0] i_i1_reg_191;
reg   [63:0] r_i2_reg_203;
wire   [63:0] tmp_s_fu_227_p1;
wire   [63:0] tmp_117_fu_244_p1;
wire   [63:0] sum_i5_cast_fu_314_p1;
wire   [63:0] tmp_122_fu_319_p1;
wire   [63:0] tmp_123_fu_356_p2;
wire   [7:0] tmp_i4_cast_fu_305_p1;
wire   [7:0] sum_i5_fu_309_p2;
wire   [2:0] tmp_643_fu_328_p1;
wire   [5:0] tmp_224_i9_fu_332_p3;
wire   [63:0] tmp_223_i8_fu_324_p1;
wire   [63:0] tmp_225_i_fu_340_p1;
wire   [63:0] tmp_226_i_fu_344_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

keccak_absorb_3_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_157 <= 8'd0;
    end else if (((exitcond_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_157 <= i_51_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_3_reg_168 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_168 <= tmp_120_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_179 <= i_52_reg_406;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_4_reg_179 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_i1_reg_191 <= i_8_reg_419;
    end else if (((exitcond6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_i1_reg_191 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_146 <= i_50_fu_221_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_146 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_i2_reg_203 <= r_fu_350_p2;
    end else if (((exitcond6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        r_i2_reg_203 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_52_reg_406 <= i_52_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_8_reg_419 <= i_8_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i3_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        s_addr_4_reg_429 <= tmp_122_fu_319_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_118_reg_379[6 : 0] <= tmp_118_fu_249_p1[6 : 0];
        tmp_120_reg_387 <= tmp_120_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_121_reg_411[7 : 3] <= tmp_121_fu_285_p3[7 : 3];
    end
end

always @ (*) begin
    if ((((exitcond6_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address0 = s_addr_4_reg_429;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = tmp_122_fu_319_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = tmp_s_fu_227_p1;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        s_d0 = tmp_123_fu_356_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_d0 = 64'd0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((tmp_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address0 = 64'd82;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        t_address0 = tmp_118_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_address0 = 64'd135;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_address0 = tmp_117_fu_244_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_address1 = sum_i5_cast_fu_314_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_address1 = 64'd135;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_d0 = 8'd31;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((exitcond_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond5_fu_254_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond6_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_i3_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond5_fu_254_p2 = ((i_3_reg_168 == 7'd82) ? 1'b1 : 1'b0);

assign exitcond6_fu_273_p2 = ((i_4_reg_179 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond_fu_232_p2 = ((i_2_reg_157 == 8'd136) ? 1'b1 : 1'b0);

assign i_50_fu_221_p2 = (i_reg_146 + 5'd1);

assign i_51_fu_238_p2 = (i_2_reg_157 + 8'd1);

assign i_52_fu_279_p2 = (i_4_reg_179 + 5'd1);

assign i_8_fu_299_p2 = (i_i1_reg_191 + 4'd1);

assign m_address0 = tmp_118_fu_249_p1;

assign r_fu_350_p2 = (tmp_226_i_fu_344_p2 | r_i2_reg_203);

assign sum_i5_cast_fu_314_p1 = sum_i5_fu_309_p2;

assign sum_i5_fu_309_p2 = (tmp_121_reg_411 + tmp_i4_cast_fu_305_p1);

assign t_d1 = (t_q0 | 8'd128);

assign tmp_117_fu_244_p1 = i_2_reg_157;

assign tmp_118_fu_249_p1 = i_3_reg_168;

assign tmp_120_fu_260_p2 = (i_3_reg_168 + 7'd1);

assign tmp_121_fu_285_p3 = {{i_4_reg_179}, {3'd0}};

assign tmp_122_fu_319_p1 = i_4_reg_179;

assign tmp_123_fu_356_p2 = (s_q0 ^ r_i2_reg_203);

assign tmp_223_i8_fu_324_p1 = t_q1;

assign tmp_224_i9_fu_332_p3 = {{tmp_643_fu_328_p1}, {3'd0}};

assign tmp_225_i_fu_340_p1 = tmp_224_i9_fu_332_p3;

assign tmp_226_i_fu_344_p2 = tmp_223_i8_fu_324_p1 << tmp_225_i_fu_340_p1;

assign tmp_643_fu_328_p1 = i_i1_reg_191[2:0];

assign tmp_fu_215_p2 = ((i_reg_146 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_i3_fu_293_p2 = ((i_i1_reg_191 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_i4_cast_fu_305_p1 = i_i1_reg_191;

assign tmp_s_fu_227_p1 = i_reg_146;

always @ (posedge ap_clk) begin
    tmp_118_reg_379[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_121_reg_411[2:0] <= 3'b000;
end

endmodule //keccak_absorb_1

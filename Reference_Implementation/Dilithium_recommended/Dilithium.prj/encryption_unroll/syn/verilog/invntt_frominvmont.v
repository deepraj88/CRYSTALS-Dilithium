// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module invntt_frominvmont (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_address0,
        p_ce0,
        p_we0,
        p_d0,
        p_q0,
        p_address1,
        p_ce1,
        p_q1,
        p_offset
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] p_address0;
output   p_ce0;
output   p_we0;
output  [31:0] p_d0;
input  [31:0] p_q0;
output  [9:0] p_address1;
output   p_ce1;
input  [31:0] p_q1;
input  [2:0] p_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] p_address0;
reg p_ce0;
reg p_we0;
reg[31:0] p_d0;
reg[9:0] p_address1;
reg p_ce1;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] zetas_inv_address0;
reg    zetas_inv_ce0;
wire   [22:0] zetas_inv_q0;
reg   [31:0] reg_158;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state14;
wire   [11:0] tmp_636_cast_fu_171_p1;
reg   [11:0] tmp_636_cast_reg_486;
wire   [9:0] len_cast_fu_180_p1;
reg   [9:0] len_cast_reg_493;
wire    ap_CS_fsm_state2;
wire   [31:0] j_cast4_fu_192_p1;
reg   [31:0] j_cast4_reg_502;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_fu_206_p2;
wire   [8:0] len_2_fu_220_p2;
wire   [31:0] k_7_fu_226_p2;
reg   [31:0] k_7_reg_525;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_239_cast3_fu_236_p1;
reg   [31:0] tmp_239_cast3_reg_530;
wire   [9:0] start_cast_fu_264_p1;
reg   [9:0] start_cast_reg_535;
wire   [54:0] tmp_241_cast_fu_268_p1;
reg   [54:0] tmp_241_cast_reg_540;
reg   [9:0] p_addr_4_reg_548;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_156_fu_272_p2;
reg   [9:0] p_addr_5_reg_553;
wire   [31:0] j_7_fu_315_p2;
reg   [31:0] j_7_reg_559;
wire   [9:0] tmp_163_fu_321_p2;
wire   [31:0] tmp_162_fu_342_p2;
reg   [31:0] tmp_162_reg_569;
wire    ap_CS_fsm_state8;
wire   [54:0] a_assign_s_fu_351_p2;
reg   [54:0] a_assign_s_reg_574;
wire    ap_CS_fsm_state9;
wire  signed [31:0] tmp_663_fu_356_p1;
reg  signed [31:0] tmp_663_reg_579;
wire   [31:0] t_36_fu_360_p2;
reg   [31:0] t_36_reg_584;
wire    ap_CS_fsm_state10;
wire   [54:0] t_37_fu_368_p2;
reg   [54:0] t_37_reg_589;
wire    ap_CS_fsm_state11;
wire   [8:0] j_6_fu_407_p2;
reg   [8:0] j_6_reg_597;
wire    ap_CS_fsm_state13;
reg   [9:0] p_addr_reg_602;
wire   [0:0] tmp_151_fu_401_p2;
wire   [31:0] t_33_fu_427_p2;
reg   [31:0] t_33_reg_608;
wire    ap_CS_fsm_state15;
wire   [48:0] a_assign_fu_437_p2;
reg   [48:0] a_assign_reg_613;
wire    ap_CS_fsm_state16;
wire   [54:0] t_34_fu_446_p2;
reg   [54:0] t_34_reg_618;
reg   [8:0] len_reg_114;
reg   [9:0] j_reg_126;
wire   [0:0] tmp_fu_184_p3;
reg   [31:0] j8_reg_138;
wire    ap_CS_fsm_state12;
reg   [8:0] j_1_reg_147;
wire    ap_CS_fsm_state17;
wire   [63:0] tmp_152_fu_215_p1;
wire   [63:0] tmp_640_cast_fu_286_p1;
wire   [63:0] tmp_641_cast_fu_310_p1;
wire   [63:0] tmp_638_cast_fu_422_p1;
reg   [31:0] k_fu_58;
wire   [31:0] tmp_160_fu_329_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_i_fu_396_p1;
wire   [31:0] tmp_i3_fu_474_p1;
wire   [10:0] tmp_s_fu_163_p3;
wire   [1:0] tmp_656_fu_196_p4;
wire   [9:0] tmp_153_fu_231_p2;
wire   [8:0] tmp_657_fu_246_p1;
wire   [0:0] tmp_154_fu_240_p2;
wire   [8:0] tmp_57_fu_250_p2;
wire   [8:0] start_fu_256_p3;
wire   [11:0] tmp_659_fu_277_p1;
wire   [11:0] tmp_614_fu_281_p2;
wire   [11:0] tmp_661_fu_295_p1;
wire   [11:0] tmp_660_fu_291_p1;
wire   [11:0] tmp_662_fu_299_p2;
wire   [11:0] tmp_615_fu_305_p2;
wire   [31:0] tmp_161_fu_336_p2;
wire   [22:0] a_assign_s_fu_351_p0;
wire   [31:0] a_assign_s_fu_351_p1;
wire   [31:0] t_37_fu_368_p1;
wire   [55:0] a_assign_19_cast2_fu_374_p1;
wire   [55:0] t_51_cast_fu_377_p1;
wire   [55:0] t_38_fu_380_p2;
wire   [23:0] tmp_616_fu_386_p4;
wire   [11:0] tmp_155_cast_fu_413_p1;
wire   [11:0] tmp_612_fu_417_p2;
wire  signed [31:0] t_33_fu_427_p0;
wire  signed [31:0] tmp_243_cast_fu_433_p0;
wire   [31:0] a_assign_fu_437_p0;
wire   [31:0] t_34_fu_446_p0;
wire   [55:0] a_assign_cast1_fu_452_p1;
wire   [55:0] t_47_cast_fu_455_p1;
wire   [55:0] t_35_fu_458_p2;
wire   [23:0] tmp_613_fu_464_p4;
reg   [16:0] ap_NS_fsm;
wire   [48:0] a_assign_fu_437_p00;
wire   [54:0] a_assign_s_fu_351_p10;
wire   [54:0] t_34_fu_446_p00;
wire   [54:0] t_37_fu_368_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

invntt_frominvmoneOg #(
    .DataWidth( 23 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
zetas_inv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zetas_inv_address0),
    .ce0(zetas_inv_ce0),
    .q0(zetas_inv_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j8_reg_138 <= j_7_reg_559;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j8_reg_138 <= j_cast4_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_184_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_147 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_1_reg_147 <= j_6_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_184_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_126 <= 10'd0;
    end else if (((tmp_156_fu_272_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_126 <= tmp_163_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_156_fu_272_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_fu_58 <= k_7_reg_525;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_58 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        len_reg_114 <= len_2_fu_220_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_reg_114 <= 9'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_158 <= p_q1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_158 <= p_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        a_assign_reg_613[48 : 1] <= a_assign_fu_437_p2[48 : 1];
        t_34_reg_618[54 : 1] <= t_34_fu_446_p2[54 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        a_assign_s_reg_574 <= a_assign_s_fu_351_p2;
        tmp_663_reg_579 <= tmp_663_fu_356_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_6_reg_597 <= j_6_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_156_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_7_reg_559 <= j_7_fu_315_p2;
        p_addr_4_reg_548 <= tmp_640_cast_fu_286_p1;
        p_addr_5_reg_553 <= tmp_641_cast_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_cast4_reg_502[9 : 0] <= j_cast4_fu_192_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_7_reg_525 <= k_7_fu_226_p2;
        start_cast_reg_535[8 : 0] <= start_cast_fu_264_p1[8 : 0];
        tmp_239_cast3_reg_530[9 : 0] <= tmp_239_cast3_fu_236_p1[9 : 0];
        tmp_241_cast_reg_540[22 : 0] <= tmp_241_cast_fu_268_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        len_cast_reg_493[8 : 0] <= len_cast_fu_180_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_151_fu_401_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        p_addr_reg_602 <= tmp_638_cast_fu_422_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        t_33_reg_608[31 : 1] <= t_33_fu_427_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        t_36_reg_584 <= t_36_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        t_37_reg_589 <= t_37_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_162_reg_569 <= tmp_162_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_636_cast_reg_486[10 : 8] <= tmp_636_cast_fu_171_p1[10 : 8];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_151_fu_401_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_151_fu_401_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_address0 = p_addr_reg_602;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_address0 = p_addr_5_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_address0 = p_addr_4_reg_548;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_address0 = tmp_640_cast_fu_286_p1;
    end else begin
        p_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_address1 = tmp_638_cast_fu_422_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_address1 = p_addr_5_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        p_address1 = tmp_641_cast_fu_310_p1;
    end else begin
        p_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        p_ce0 = 1'b1;
    end else begin
        p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        p_ce1 = 1'b1;
    end else begin
        p_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_d0 = tmp_i3_fu_474_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_d0 = tmp_i_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_d0 = tmp_160_fu_329_p2;
    end else begin
        p_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12))) begin
        p_we0 = 1'b1;
    end else begin
        p_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zetas_inv_ce0 = 1'b1;
    end else begin
        zetas_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_184_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_156_fu_272_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            if (((tmp_151_fu_401_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_19_cast2_fu_374_p1 = a_assign_s_reg_574;

assign a_assign_cast1_fu_452_p1 = a_assign_reg_613;

assign a_assign_fu_437_p0 = a_assign_fu_437_p00;

assign a_assign_fu_437_p00 = $unsigned(tmp_243_cast_fu_433_p0);

assign a_assign_fu_437_p2 = (a_assign_fu_437_p0 * $signed('hA3FA));

assign a_assign_s_fu_351_p0 = tmp_241_cast_reg_540;

assign a_assign_s_fu_351_p1 = a_assign_s_fu_351_p10;

assign a_assign_s_fu_351_p10 = tmp_162_reg_569;

assign a_assign_s_fu_351_p2 = (a_assign_s_fu_351_p0 * a_assign_s_fu_351_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_fu_206_p2 = ((tmp_656_fu_196_p4 == 2'd0) ? 1'b1 : 1'b0);

assign j_6_fu_407_p2 = (j_1_reg_147 + 9'd1);

assign j_7_fu_315_p2 = (32'd1 + j8_reg_138);

assign j_cast4_fu_192_p1 = j_reg_126;

assign k_7_fu_226_p2 = (32'd1 + k_fu_58);

assign len_2_fu_220_p2 = len_reg_114 << 9'd1;

assign len_cast_fu_180_p1 = len_reg_114;

assign start_cast_fu_264_p1 = start_fu_256_p3;

assign start_fu_256_p3 = ((tmp_154_fu_240_p2[0:0] === 1'b1) ? tmp_657_fu_246_p1 : tmp_57_fu_250_p2);

assign t_33_fu_427_p0 = reg_158;

assign t_33_fu_427_p2 = ($signed(t_33_fu_427_p0) * $signed('h801C06));

assign t_34_fu_446_p0 = t_34_fu_446_p00;

assign t_34_fu_446_p00 = t_33_reg_608;

assign t_34_fu_446_p2 = (t_34_fu_446_p0 * $signed('h7FE001));

assign t_35_fu_458_p2 = (a_assign_cast1_fu_452_p1 + t_47_cast_fu_455_p1);

assign t_36_fu_360_p2 = ($signed(32'd4236238847) * $signed(tmp_663_reg_579));

assign t_37_fu_368_p1 = t_37_fu_368_p10;

assign t_37_fu_368_p10 = t_36_reg_584;

assign t_37_fu_368_p2 = (55'd8380417 * t_37_fu_368_p1);

assign t_38_fu_380_p2 = (a_assign_19_cast2_fu_374_p1 + t_51_cast_fu_377_p1);

assign t_47_cast_fu_455_p1 = t_34_reg_618;

assign t_51_cast_fu_377_p1 = t_37_reg_589;

assign tmp_151_fu_401_p2 = ((j_1_reg_147 == 9'd256) ? 1'b1 : 1'b0);

assign tmp_152_fu_215_p1 = k_fu_58;

assign tmp_153_fu_231_p2 = (len_cast_reg_493 + j_reg_126);

assign tmp_154_fu_240_p2 = ((j_reg_126 > tmp_153_fu_231_p2) ? 1'b1 : 1'b0);

assign tmp_155_cast_fu_413_p1 = j_1_reg_147;

assign tmp_156_fu_272_p2 = ((j8_reg_138 < tmp_239_cast3_reg_530) ? 1'b1 : 1'b0);

assign tmp_160_fu_329_p2 = (p_q0 + p_q1);

assign tmp_161_fu_336_p2 = (32'd2145386752 + reg_158);

assign tmp_162_fu_342_p2 = (tmp_161_fu_336_p2 - p_q1);

assign tmp_163_fu_321_p2 = (start_cast_reg_535 + len_cast_reg_493);

assign tmp_239_cast3_fu_236_p1 = tmp_153_fu_231_p2;

assign tmp_241_cast_fu_268_p1 = zetas_inv_q0;

assign tmp_243_cast_fu_433_p0 = reg_158;

assign tmp_57_fu_250_p2 = (tmp_657_fu_246_p1 + len_reg_114);

assign tmp_612_fu_417_p2 = (tmp_636_cast_reg_486 + tmp_155_cast_fu_413_p1);

assign tmp_613_fu_464_p4 = {{t_35_fu_458_p2[55:32]}};

assign tmp_614_fu_281_p2 = (tmp_636_cast_reg_486 + tmp_659_fu_277_p1);

assign tmp_615_fu_305_p2 = (tmp_636_cast_reg_486 + tmp_662_fu_299_p2);

assign tmp_616_fu_386_p4 = {{t_38_fu_380_p2[55:32]}};

assign tmp_636_cast_fu_171_p1 = tmp_s_fu_163_p3;

assign tmp_638_cast_fu_422_p1 = tmp_612_fu_417_p2;

assign tmp_640_cast_fu_286_p1 = tmp_614_fu_281_p2;

assign tmp_641_cast_fu_310_p1 = tmp_615_fu_305_p2;

assign tmp_656_fu_196_p4 = {{j_reg_126[9:8]}};

assign tmp_657_fu_246_p1 = j_reg_126[8:0];

assign tmp_659_fu_277_p1 = j8_reg_138[11:0];

assign tmp_660_fu_291_p1 = j8_reg_138[11:0];

assign tmp_661_fu_295_p1 = len_reg_114;

assign tmp_662_fu_299_p2 = (tmp_661_fu_295_p1 + tmp_660_fu_291_p1);

assign tmp_663_fu_356_p1 = a_assign_s_fu_351_p2[31:0];

assign tmp_fu_184_p3 = len_reg_114[32'd8];

assign tmp_i3_fu_474_p1 = tmp_613_fu_464_p4;

assign tmp_i_fu_396_p1 = tmp_616_fu_386_p4;

assign tmp_s_fu_163_p3 = {{p_offset}, {8'd0}};

assign zetas_inv_address0 = tmp_152_fu_215_p1;

always @ (posedge ap_clk) begin
    tmp_636_cast_reg_486[7:0] <= 8'b00000000;
    tmp_636_cast_reg_486[11] <= 1'b0;
    len_cast_reg_493[9] <= 1'b0;
    j_cast4_reg_502[31:10] <= 22'b0000000000000000000000;
    tmp_239_cast3_reg_530[31:10] <= 22'b0000000000000000000000;
    start_cast_reg_535[9] <= 1'b0;
    tmp_241_cast_reg_540[54:23] <= 32'b00000000000000000000000000000000;
    t_33_reg_608[0] <= 1'b0;
    a_assign_reg_613[0] <= 1'b0;
    t_34_reg_618[0] <= 1'b0;
end

endmodule //invntt_frominvmont

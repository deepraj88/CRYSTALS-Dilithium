// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module expand_mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mat_vec_coeffs_address0,
        mat_vec_coeffs_ce0,
        mat_vec_coeffs_we0,
        mat_vec_coeffs_d0,
        rho_address0,
        rho_ce0,
        rho_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] mat_vec_coeffs_address0;
output   mat_vec_coeffs_ce0;
output   mat_vec_coeffs_we0;
output  [22:0] mat_vec_coeffs_d0;
output  [6:0] rho_address0;
output   rho_ce0;
input  [7:0] rho_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_vec_coeffs_ce0;
reg mat_vec_coeffs_we0;
reg rho_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_62_fu_246_p2;
reg   [5:0] i_62_reg_413;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_s_fu_252_p1;
reg   [63:0] tmp_s_reg_418;
wire   [0:0] tmp_fu_240_p2;
wire   [2:0] i_63_fu_263_p2;
reg   [2:0] i_63_reg_436;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_644_cast_fu_277_p1;
reg   [5:0] tmp_644_cast_reg_441;
wire   [0:0] exitcond1_fu_257_p2;
wire   [2:0] j_8_fu_287_p2;
reg   [2:0] j_8_reg_449;
wire    ap_CS_fsm_state5;
wire   [5:0] tmp_618_fu_316_p2;
reg   [5:0] tmp_618_reg_454;
wire   [0:0] exitcond_fu_281_p2;
wire   [13:0] tmp_647_cast_fu_321_p3;
reg   [13:0] tmp_647_cast_reg_459;
wire    ap_CS_fsm_state9;
wire    grp_keccak_squeezeblocks_3_fu_226_ap_idle;
wire    grp_keccak_squeezeblocks_3_fu_226_ap_ready;
wire    grp_keccak_squeezeblocks_3_fu_226_ap_done;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_665_fu_328_p3;
wire   [7:0] output_assign_q0;
reg   [7:0] output_assign_load_reg_472;
wire    ap_CS_fsm_state11;
wire   [31:0] pos_4_fu_358_p2;
reg   [31:0] pos_4_reg_482;
reg   [4:0] s_address0;
reg    s_ce0;
reg    s_we0;
reg   [63:0] s_d0;
wire   [63:0] s_q0;
reg    s_ce1;
reg    s_we1;
wire   [63:0] s_q1;
reg   [5:0] inbuf_address0;
reg    inbuf_ce0;
reg    inbuf_we0;
reg   [7:0] inbuf_d0;
wire   [7:0] inbuf_q0;
reg   [9:0] output_assign_address0;
reg    output_assign_ce0;
reg    output_assign_we0;
wire   [9:0] output_assign_address1;
reg    output_assign_ce1;
wire   [7:0] output_assign_q1;
wire    grp_keccak_squeezeblocks_3_fu_226_ap_start;
wire   [9:0] grp_keccak_squeezeblocks_3_fu_226_h_address0;
wire    grp_keccak_squeezeblocks_3_fu_226_h_ce0;
wire    grp_keccak_squeezeblocks_3_fu_226_h_we0;
wire   [7:0] grp_keccak_squeezeblocks_3_fu_226_h_d0;
wire   [4:0] grp_keccak_squeezeblocks_3_fu_226_s_address0;
wire    grp_keccak_squeezeblocks_3_fu_226_s_ce0;
wire    grp_keccak_squeezeblocks_3_fu_226_s_we0;
wire   [63:0] grp_keccak_squeezeblocks_3_fu_226_s_d0;
wire   [4:0] grp_keccak_squeezeblocks_3_fu_226_s_address1;
wire    grp_keccak_squeezeblocks_3_fu_226_s_ce1;
wire    grp_keccak_squeezeblocks_3_fu_226_s_we1;
wire   [63:0] grp_keccak_squeezeblocks_3_fu_226_s_d1;
wire    grp_keccak_absorb_3_fu_234_ap_start;
wire    grp_keccak_absorb_3_fu_234_ap_done;
wire    grp_keccak_absorb_3_fu_234_ap_idle;
wire    grp_keccak_absorb_3_fu_234_ap_ready;
wire   [4:0] grp_keccak_absorb_3_fu_234_s_address0;
wire    grp_keccak_absorb_3_fu_234_s_ce0;
wire    grp_keccak_absorb_3_fu_234_s_we0;
wire   [63:0] grp_keccak_absorb_3_fu_234_s_d0;
wire   [5:0] grp_keccak_absorb_3_fu_234_m_address0;
wire    grp_keccak_absorb_3_fu_234_m_ce0;
reg   [5:0] i_reg_156;
wire    ap_CS_fsm_state3;
reg   [2:0] i_1_reg_167;
reg   [2:0] j_reg_179;
reg   [31:0] pos_reg_190;
wire    ap_CS_fsm_state12;
reg   [8:0] ctr_reg_202;
reg   [8:0] ap_phi_mux_ctr_be_phi_fu_218_p4;
wire   [8:0] ctr_6_fu_389_p2;
wire   [0:0] tmp_170_fu_383_p2;
reg    grp_keccak_squeezeblocks_3_fu_226_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_keccak_absorb_3_fu_234_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_167_fu_336_p1;
wire   [63:0] tmp_168_fu_353_p1;
wire   [63:0] tmp_169_fu_364_p1;
wire   [63:0] tmp_648_cast_fu_405_p1;
wire   [7:0] tmp_256_cast_fu_307_p1;
wire   [22:0] tmp_34_fu_373_p4;
wire   [4:0] tmp_617_fu_269_p3;
wire   [1:0] tmp_664_fu_293_p1;
wire   [5:0] tmp_164_fu_297_p4;
wire   [5:0] tmp_165_cast_fu_312_p1;
wire   [31:0] pos_2_fu_341_p2;
wire   [31:0] pos_3_fu_347_p2;
wire   [6:0] tmp_666_fu_369_p1;
wire   [13:0] tmp_171_cast_fu_396_p1;
wire   [13:0] tmp_619_fu_400_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_keccak_squeezeblocks_3_fu_226_ap_start_reg = 1'b0;
#0 grp_keccak_absorb_3_fu_234_ap_start_reg = 1'b0;
end

expand_mat_s #(
    .DataWidth( 64 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(s_address0),
    .ce0(s_ce0),
    .we0(s_we0),
    .d0(s_d0),
    .q0(s_q0),
    .address1(grp_keccak_squeezeblocks_3_fu_226_s_address1),
    .ce1(s_ce1),
    .we1(s_we1),
    .d1(grp_keccak_squeezeblocks_3_fu_226_s_d1),
    .q1(s_q1)
);

expand_mat_inbuf #(
    .DataWidth( 8 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
inbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(inbuf_address0),
    .ce0(inbuf_ce0),
    .we0(inbuf_we0),
    .d0(inbuf_d0),
    .q0(inbuf_q0)
);

expand_mat_outputcud #(
    .DataWidth( 8 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
output_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_assign_address0),
    .ce0(output_assign_ce0),
    .we0(output_assign_we0),
    .d0(grp_keccak_squeezeblocks_3_fu_226_h_d0),
    .q0(output_assign_q0),
    .address1(output_assign_address1),
    .ce1(output_assign_ce1),
    .q1(output_assign_q1)
);

keccak_squeezeblocks_3 grp_keccak_squeezeblocks_3_fu_226(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_keccak_squeezeblocks_3_fu_226_ap_start),
    .ap_done(grp_keccak_squeezeblocks_3_fu_226_ap_done),
    .ap_idle(grp_keccak_squeezeblocks_3_fu_226_ap_idle),
    .ap_ready(grp_keccak_squeezeblocks_3_fu_226_ap_ready),
    .h_address0(grp_keccak_squeezeblocks_3_fu_226_h_address0),
    .h_ce0(grp_keccak_squeezeblocks_3_fu_226_h_ce0),
    .h_we0(grp_keccak_squeezeblocks_3_fu_226_h_we0),
    .h_d0(grp_keccak_squeezeblocks_3_fu_226_h_d0),
    .s_address0(grp_keccak_squeezeblocks_3_fu_226_s_address0),
    .s_ce0(grp_keccak_squeezeblocks_3_fu_226_s_ce0),
    .s_we0(grp_keccak_squeezeblocks_3_fu_226_s_we0),
    .s_d0(grp_keccak_squeezeblocks_3_fu_226_s_d0),
    .s_q0(s_q0),
    .s_address1(grp_keccak_squeezeblocks_3_fu_226_s_address1),
    .s_ce1(grp_keccak_squeezeblocks_3_fu_226_s_ce1),
    .s_we1(grp_keccak_squeezeblocks_3_fu_226_s_we1),
    .s_d1(grp_keccak_squeezeblocks_3_fu_226_s_d1),
    .s_q1(s_q1)
);

keccak_absorb_3 grp_keccak_absorb_3_fu_234(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_keccak_absorb_3_fu_234_ap_start),
    .ap_done(grp_keccak_absorb_3_fu_234_ap_done),
    .ap_idle(grp_keccak_absorb_3_fu_234_ap_idle),
    .ap_ready(grp_keccak_absorb_3_fu_234_ap_ready),
    .s_address0(grp_keccak_absorb_3_fu_234_s_address0),
    .s_ce0(grp_keccak_absorb_3_fu_234_s_ce0),
    .s_we0(grp_keccak_absorb_3_fu_234_s_we0),
    .s_d0(grp_keccak_absorb_3_fu_234_s_d0),
    .s_q0(s_q0),
    .m_address0(grp_keccak_absorb_3_fu_234_m_address0),
    .m_ce0(grp_keccak_absorb_3_fu_234_m_ce0),
    .m_q0(inbuf_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_keccak_absorb_3_fu_234_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_keccak_absorb_3_fu_234_ap_start_reg <= 1'b1;
        end else if ((grp_keccak_absorb_3_fu_234_ap_ready == 1'b1)) begin
            grp_keccak_absorb_3_fu_234_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= 1'b1;
        end else if ((grp_keccak_squeezeblocks_3_fu_226_ap_ready == 1'b1)) begin
            grp_keccak_squeezeblocks_3_fu_226_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ctr_reg_202 <= ap_phi_mux_ctr_be_phi_fu_218_p4;
    end else if (((grp_keccak_squeezeblocks_3_fu_226_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ctr_reg_202 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_167 <= i_63_reg_436;
    end else if (((tmp_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_167 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_156 <= i_62_reg_413;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_156 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_665_fu_328_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_reg_179 <= j_8_reg_449;
    end else if (((exitcond1_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_179 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pos_reg_190 <= pos_4_reg_482;
    end else if (((grp_keccak_squeezeblocks_3_fu_226_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        pos_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_62_reg_413 <= i_62_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_63_reg_436 <= i_63_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_8_reg_449 <= j_8_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_assign_load_reg_472 <= output_assign_q0;
        pos_4_reg_482 <= pos_4_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_618_reg_454 <= tmp_618_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_644_cast_reg_441[4 : 2] <= tmp_644_cast_fu_277_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_keccak_squeezeblocks_3_fu_226_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_647_cast_reg_459[13 : 8] <= tmp_647_cast_fu_321_p3[13 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_240_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_418[5 : 0] <= tmp_s_fu_252_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((exitcond1_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((tmp_170_fu_383_p2 == 1'd0)) begin
            ap_phi_mux_ctr_be_phi_fu_218_p4 = ctr_reg_202;
        end else if ((tmp_170_fu_383_p2 == 1'd1)) begin
            ap_phi_mux_ctr_be_phi_fu_218_p4 = ctr_6_fu_389_p2;
        end else begin
            ap_phi_mux_ctr_be_phi_fu_218_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_ctr_be_phi_fu_218_p4 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond1_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inbuf_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inbuf_address0 = tmp_s_reg_418;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        inbuf_address0 = grp_keccak_absorb_3_fu_234_m_address0;
    end else begin
        inbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        inbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        inbuf_ce0 = grp_keccak_absorb_3_fu_234_m_ce0;
    end else begin
        inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inbuf_d0 = tmp_256_cast_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inbuf_d0 = rho_q0;
    end else begin
        inbuf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((exitcond_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        inbuf_we0 = 1'b1;
    end else begin
        inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mat_vec_coeffs_ce0 = 1'b1;
    end else begin
        mat_vec_coeffs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_170_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        mat_vec_coeffs_we0 = 1'b1;
    end else begin
        mat_vec_coeffs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_assign_address0 = tmp_168_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_assign_address0 = tmp_167_fu_336_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_assign_address0 = grp_keccak_squeezeblocks_3_fu_226_h_address0;
    end else begin
        output_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        output_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_assign_ce0 = grp_keccak_squeezeblocks_3_fu_226_h_ce0;
    end else begin
        output_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_assign_ce1 = 1'b1;
    end else begin
        output_assign_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_assign_we0 = grp_keccak_squeezeblocks_3_fu_226_h_we0;
    end else begin
        output_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        rho_ce0 = 1'b1;
    end else begin
        rho_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = grp_keccak_absorb_3_fu_234_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address0 = grp_keccak_squeezeblocks_3_fu_226_s_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_ce0 = grp_keccak_absorb_3_fu_234_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_ce0 = grp_keccak_squeezeblocks_3_fu_226_s_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s_ce1 = grp_keccak_squeezeblocks_3_fu_226_s_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_d0 = grp_keccak_absorb_3_fu_234_s_d0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_d0 = grp_keccak_squeezeblocks_3_fu_226_s_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_we0 = grp_keccak_absorb_3_fu_234_s_we0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_we0 = grp_keccak_squeezeblocks_3_fu_226_s_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s_we1 = grp_keccak_squeezeblocks_3_fu_226_s_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_240_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_257_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_keccak_absorb_3_fu_234_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_keccak_squeezeblocks_3_fu_226_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_665_fu_328_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ctr_6_fu_389_p2 = (ctr_reg_202 + 9'd1);

assign exitcond1_fu_257_p2 = ((i_1_reg_167 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_281_p2 = ((j_reg_179 == 3'd4) ? 1'b1 : 1'b0);

assign grp_keccak_absorb_3_fu_234_ap_start = grp_keccak_absorb_3_fu_234_ap_start_reg;

assign grp_keccak_squeezeblocks_3_fu_226_ap_start = grp_keccak_squeezeblocks_3_fu_226_ap_start_reg;

assign i_62_fu_246_p2 = (i_reg_156 + 6'd1);

assign i_63_fu_263_p2 = (i_1_reg_167 + 3'd1);

assign j_8_fu_287_p2 = (j_reg_179 + 3'd1);

assign mat_vec_coeffs_address0 = tmp_648_cast_fu_405_p1;

assign mat_vec_coeffs_d0 = tmp_34_fu_373_p4;

assign output_assign_address1 = tmp_169_fu_364_p1;

assign pos_2_fu_341_p2 = (32'd1 + pos_reg_190);

assign pos_3_fu_347_p2 = (32'd2 + pos_reg_190);

assign pos_4_fu_358_p2 = (32'd3 + pos_reg_190);

assign rho_address0 = tmp_s_fu_252_p1;

assign tmp_164_fu_297_p4 = {{{tmp_664_fu_293_p1}, {1'd0}}, {i_1_reg_167}};

assign tmp_165_cast_fu_312_p1 = j_reg_179;

assign tmp_167_fu_336_p1 = pos_reg_190;

assign tmp_168_fu_353_p1 = pos_2_fu_341_p2;

assign tmp_169_fu_364_p1 = pos_3_fu_347_p2;

assign tmp_170_fu_383_p2 = ((tmp_34_fu_373_p4 < 23'd8380417) ? 1'b1 : 1'b0);

assign tmp_171_cast_fu_396_p1 = ctr_reg_202;

assign tmp_256_cast_fu_307_p1 = tmp_164_fu_297_p4;

assign tmp_34_fu_373_p4 = {{{tmp_666_fu_369_p1}, {output_assign_q0}}, {output_assign_load_reg_472}};

assign tmp_617_fu_269_p3 = {{i_1_reg_167}, {2'd0}};

assign tmp_618_fu_316_p2 = (tmp_644_cast_reg_441 + tmp_165_cast_fu_312_p1);

assign tmp_619_fu_400_p2 = (tmp_647_cast_reg_459 + tmp_171_cast_fu_396_p1);

assign tmp_644_cast_fu_277_p1 = tmp_617_fu_269_p3;

assign tmp_647_cast_fu_321_p3 = {{tmp_618_reg_454}, {8'd0}};

assign tmp_648_cast_fu_405_p1 = tmp_619_fu_400_p2;

assign tmp_664_fu_293_p1 = j_reg_179[1:0];

assign tmp_665_fu_328_p3 = ctr_reg_202[32'd8];

assign tmp_666_fu_369_p1 = output_assign_q1[6:0];

assign tmp_fu_240_p2 = ((i_reg_156 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_s_fu_252_p1 = i_reg_156;

always @ (posedge ap_clk) begin
    tmp_s_reg_418[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_644_cast_reg_441[1:0] <= 2'b00;
    tmp_644_cast_reg_441[5] <= 1'b0;
    tmp_647_cast_reg_459[7:0] <= 8'b00000000;
end

endmodule //expand_mat

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity challenge is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_coeffs_ce0 : OUT STD_LOGIC;
    c_coeffs_we0 : OUT STD_LOGIC;
    c_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
    c_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
    mu_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mu_ce0 : OUT STD_LOGIC;
    mu_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    w1_vec_coeffs_ce0 : OUT STD_LOGIC;
    w1_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    w1_vec_coeffs_ce1 : OUT STD_LOGIC;
    w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of challenge is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_C4 : STD_LOGIC_VECTOR (8 downto 0) := "011000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv23_7FE000 : STD_LOGIC_VECTOR (22 downto 0) := "11111111110000000000000";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_106_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_106_reg_657 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_107_fu_397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_107_reg_670 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_sum1_cast_fu_417_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_sum1_cast_reg_675 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_204_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_20_fu_427_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_20_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_fu_481_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_i_reg_698 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_108_fu_519_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_108_reg_706 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_206_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signs_1_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_109_fu_568_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_214_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_214_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal pos_5_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_5_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c_coeffs_addr_1_reg_750 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_216_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_220_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_220_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal mask_2_fu_629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mask_2_reg_760 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_110_fu_640_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_110_reg_765 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal inbuf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inbuf_ce0 : STD_LOGIC;
    signal inbuf_we0 : STD_LOGIC;
    signal inbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outbuf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outbuf_ce0 : STD_LOGIC;
    signal outbuf_we0 : STD_LOGIC;
    signal outbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_345_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_345_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_345_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_2_fu_345_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_2_fu_345_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_2_fu_345_m_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_keccak_absorb_2_fu_345_m_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_h_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_353_h_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_h_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_h_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_353_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_353_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_353_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_353_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_353_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_216 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_2_reg_251 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signs_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_reg_275 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_212_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_reg_286 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal pos_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_1_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos_2_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal grp_keccak_absorb_2_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_keccak_squeezeblocks_2_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sum_cast_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_646_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_648_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_207_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_215_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_217_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_218_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_i_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_318_cast_cast_ca_fu_646_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sum1_fu_373_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_205_fu_403_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_sum1_fu_411_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_691_fu_433_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_645_fu_443_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_692_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_i_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_647_fu_464_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_i_cast_fu_477_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_694_fu_490_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_i_fu_494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_693_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_690_fu_534_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_209_fu_538_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_208_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_210_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_211_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_cast_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_219_fu_617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component keccak_absorb_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keccak_squeezeblocks_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component challenge_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component challenge_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component challenge_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    inbuf_U : component challenge_inbuf
    generic map (
        DataWidth => 8,
        AddressRange => 688,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inbuf_address0,
        ce0 => inbuf_ce0,
        we0 => inbuf_we0,
        d0 => inbuf_d0,
        q0 => inbuf_q0);

    outbuf_U : component challenge_outbuf
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outbuf_address0,
        ce0 => outbuf_ce0,
        we0 => outbuf_we0,
        d0 => grp_keccak_squeezeblocks_2_fu_353_h_d0,
        q0 => outbuf_q0);

    state_U : component challenge_state
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => state_d1,
        q1 => state_q1);

    grp_keccak_absorb_2_fu_345 : component keccak_absorb_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_2_fu_345_ap_start,
        ap_done => grp_keccak_absorb_2_fu_345_ap_done,
        ap_idle => grp_keccak_absorb_2_fu_345_ap_idle,
        ap_ready => grp_keccak_absorb_2_fu_345_ap_ready,
        s_address0 => grp_keccak_absorb_2_fu_345_s_address0,
        s_ce0 => grp_keccak_absorb_2_fu_345_s_ce0,
        s_we0 => grp_keccak_absorb_2_fu_345_s_we0,
        s_d0 => grp_keccak_absorb_2_fu_345_s_d0,
        s_q0 => state_q0,
        s_address1 => grp_keccak_absorb_2_fu_345_s_address1,
        s_ce1 => grp_keccak_absorb_2_fu_345_s_ce1,
        s_we1 => grp_keccak_absorb_2_fu_345_s_we1,
        s_d1 => grp_keccak_absorb_2_fu_345_s_d1,
        s_q1 => state_q1,
        m_address0 => grp_keccak_absorb_2_fu_345_m_address0,
        m_ce0 => grp_keccak_absorb_2_fu_345_m_ce0,
        m_q0 => inbuf_q0);

    grp_keccak_squeezeblocks_2_fu_353 : component keccak_squeezeblocks_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_2_fu_353_ap_start,
        ap_done => grp_keccak_squeezeblocks_2_fu_353_ap_done,
        ap_idle => grp_keccak_squeezeblocks_2_fu_353_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_2_fu_353_ap_ready,
        h_address0 => grp_keccak_squeezeblocks_2_fu_353_h_address0,
        h_ce0 => grp_keccak_squeezeblocks_2_fu_353_h_ce0,
        h_we0 => grp_keccak_squeezeblocks_2_fu_353_h_we0,
        h_d0 => grp_keccak_squeezeblocks_2_fu_353_h_d0,
        s_address0 => grp_keccak_squeezeblocks_2_fu_353_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_2_fu_353_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_2_fu_353_s_we0,
        s_d0 => grp_keccak_squeezeblocks_2_fu_353_s_d0,
        s_q0 => state_q0,
        s_address1 => grp_keccak_squeezeblocks_2_fu_353_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_2_fu_353_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_2_fu_353_s_we1,
        s_d1 => grp_keccak_squeezeblocks_2_fu_353_s_d1,
        s_q1 => state_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_keccak_absorb_2_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_2_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_204_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_keccak_absorb_2_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_2_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_2_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_2_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_2_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (tmp_214_fu_585_p2 = ap_const_lv1_1)))) then 
                    grp_keccak_squeezeblocks_2_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_2_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_2_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_228 <= ap_const_lv3_0;
            elsif (((tmp_i_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_228 <= i_107_reg_670;
            end if; 
        end if;
    end process;

    i_2_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_251 <= i_108_reg_706;
            elsif (((grp_keccak_squeezeblocks_2_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_251 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_3_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_206_fu_513_p2 = ap_const_lv1_1))) then 
                i_3_reg_275 <= ap_const_lv9_0;
            elsif (((tmp_212_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_3_reg_275 <= i_109_fu_568_p2;
            end if; 
        end if;
    end process;

    i_4_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_212_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_4_reg_286 <= ap_const_lv9_C4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_4_reg_286 <= i_110_reg_765;
            end if; 
        end if;
    end process;

    i_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_240 <= i_20_reg_683;
            elsif (((tmp_204_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_240 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_216 <= i_106_reg_657;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_216 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    mask_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_212_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                mask_reg_310 <= ap_const_lv64_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                mask_reg_310 <= mask_2_reg_760;
            end if; 
        end if;
    end process;

    pos_1_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                pos_1_reg_322 <= pos_reg_298;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_216_fu_606_p2 = ap_const_lv1_1))) then 
                pos_1_reg_322 <= pos_5_reg_736;
            end if; 
        end if;
    end process;

    pos_2_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_214_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                pos_2_reg_333 <= pos_1_reg_322;
            elsif (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1))) then 
                pos_2_reg_333 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pos_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_212_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                pos_reg_298 <= ap_const_lv32_8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                pos_reg_298 <= pos_5_reg_736;
            end if; 
        end if;
    end process;

    signs_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                signs_reg_263 <= signs_1_fu_556_p2;
            elsif (((grp_keccak_squeezeblocks_2_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                signs_reg_263 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_216_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                c_coeffs_addr_1_reg_750 <= tmp_217_fu_612_p1(8 - 1 downto 0);
                    mask_2_reg_760(63 downto 1) <= mask_2_fu_629_p2(63 downto 1);
                tmp_220_reg_755 <= tmp_220_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_106_reg_657 <= i_106_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_107_reg_670 <= i_107_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_108_reg_706 <= i_108_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_110_reg_765 <= i_110_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_20_reg_683 <= i_20_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_204_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    p_sum1_cast_reg_675(9 downto 7) <= p_sum1_cast_fu_417_p1(9 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                pos_5_reg_736 <= pos_5_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_421_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sum_i_reg_698 <= sum_i_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_214_reg_732 <= tmp_214_fu_585_p2;
            end if;
        end if;
    end process;
    p_sum1_cast_reg_675(6 downto 0) <= "0110000";
    p_sum1_cast_reg_675(10) <= '0';
    mask_2_reg_760(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_361_p2, ap_CS_fsm_state4, tmp_204_fu_391_p2, ap_CS_fsm_state5, tmp_i_fu_421_p2, ap_CS_fsm_state10, tmp_206_fu_513_p2, ap_CS_fsm_state12, ap_CS_fsm_state17, tmp_216_fu_606_p2, grp_keccak_absorb_2_fu_345_ap_done, grp_keccak_squeezeblocks_2_fu_353_ap_done, ap_CS_fsm_state9, tmp_212_fu_562_p2, ap_CS_fsm_state13, exitcond_fu_579_p2, ap_CS_fsm_state15, ap_block_state15_on_subcall_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((tmp_204_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_i_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((grp_keccak_absorb_2_fu_345_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_keccak_squeezeblocks_2_fu_353_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_206_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((tmp_212_fu_562_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((tmp_216_fu_606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state15_on_subcall_done_assign_proc : process(tmp_214_reg_732, grp_keccak_squeezeblocks_2_fu_353_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((grp_keccak_squeezeblocks_2_fu_353_ap_done = ap_const_logic_0) and (tmp_214_reg_732 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, exitcond_fu_579_p2)
    begin
        if ((((exitcond_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, exitcond_fu_579_p2)
    begin
        if (((exitcond_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outbuf_q0),9));

    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state12, c_coeffs_addr_1_reg_750, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, tmp_213_fu_574_p1, tmp_217_fu_612_p1, tmp_218_fu_635_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_coeffs_address0 <= c_coeffs_addr_1_reg_750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_address0 <= tmp_218_fu_635_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            c_coeffs_address0 <= tmp_217_fu_612_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_coeffs_address0 <= tmp_213_fu_574_p1(8 - 1 downto 0);
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_d0_assign_proc : process(c_coeffs_q0, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, tmp_318_cast_cast_ca_fu_646_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            c_coeffs_d0 <= tmp_318_cast_cast_ca_fu_646_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            c_coeffs_d0 <= c_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            c_coeffs_d0 <= ap_const_lv23_0;
        else 
            c_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state18, tmp_212_fu_562_p2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((tmp_212_fu_562_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            c_coeffs_we0 <= ap_const_logic_1;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_579_p2 <= "1" when (i_4_reg_286 = ap_const_lv9_100) else "0";
    grp_keccak_absorb_2_fu_345_ap_start <= grp_keccak_absorb_2_fu_345_ap_start_reg;
    grp_keccak_squeezeblocks_2_fu_353_ap_start <= grp_keccak_squeezeblocks_2_fu_353_ap_start_reg;
    i_106_fu_367_p2 <= std_logic_vector(unsigned(i_reg_216) + unsigned(ap_const_lv6_1));
    i_107_fu_397_p2 <= std_logic_vector(unsigned(i_1_reg_228) + unsigned(ap_const_lv3_1));
    i_108_fu_519_p2 <= std_logic_vector(unsigned(i_2_reg_251) + unsigned(ap_const_lv4_1));
    i_109_fu_568_p2 <= std_logic_vector(unsigned(i_3_reg_275) + unsigned(ap_const_lv9_1));
    i_110_fu_640_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i_4_reg_286));
    i_20_fu_427_p2 <= std_logic_vector(unsigned(i_i_reg_240) + unsigned(ap_const_lv8_1));

    inbuf_address0_assign_proc : process(grp_keccak_absorb_2_fu_345_m_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_s_fu_386_p1, sum_i_cast_fu_509_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inbuf_address0 <= sum_i_cast_fu_509_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inbuf_address0 <= tmp_s_fu_386_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inbuf_address0 <= grp_keccak_absorb_2_fu_345_m_address0;
        else 
            inbuf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inbuf_ce0_assign_proc : process(grp_keccak_absorb_2_fu_345_m_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inbuf_ce0 <= grp_keccak_absorb_2_fu_345_m_ce0;
        else 
            inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inbuf_d0_assign_proc : process(mu_q0, ap_CS_fsm_state3, ap_CS_fsm_state6, tmp_78_i_fu_502_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            inbuf_d0 <= tmp_78_i_fu_502_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inbuf_d0 <= mu_q0;
        else 
            inbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    inbuf_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inbuf_we0 <= ap_const_logic_1;
        else 
            inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mask_2_fu_629_p2 <= std_logic_vector(shift_left(unsigned(mask_reg_310),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    mu_address0 <= sum_cast_fu_381_p1(7 - 1 downto 0);

    mu_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mu_ce0 <= ap_const_logic_1;
        else 
            mu_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_address0_assign_proc : process(ap_CS_fsm_state10, tmp_214_reg_732, ap_CS_fsm_state16, grp_keccak_squeezeblocks_2_fu_353_h_address0, ap_CS_fsm_state9, ap_CS_fsm_state15, tmp_207_fu_525_p1, tmp_215_fu_597_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outbuf_address0 <= tmp_215_fu_597_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outbuf_address0 <= tmp_207_fu_525_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            outbuf_address0 <= grp_keccak_squeezeblocks_2_fu_353_h_address0;
        else 
            outbuf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    outbuf_ce0_assign_proc : process(ap_CS_fsm_state10, tmp_214_reg_732, ap_CS_fsm_state16, grp_keccak_squeezeblocks_2_fu_353_h_ce0, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            outbuf_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            outbuf_ce0 <= grp_keccak_squeezeblocks_2_fu_353_h_ce0;
        else 
            outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_we0_assign_proc : process(tmp_214_reg_732, grp_keccak_squeezeblocks_2_fu_353_h_we0, ap_CS_fsm_state9, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            outbuf_we0 <= grp_keccak_squeezeblocks_2_fu_353_h_we0;
        else 
            outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_sum1_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_sum1_fu_411_p2),11));
    p_sum1_fu_411_p2 <= (tmp_205_fu_403_p3 or ap_const_lv10_30);
    pos_5_fu_591_p2 <= std_logic_vector(unsigned(pos_2_reg_333) + unsigned(ap_const_lv32_1));
    signs_1_fu_556_p2 <= (tmp_211_fu_550_p2 or signs_reg_263);

    state_address0_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_address0, grp_keccak_squeezeblocks_2_fu_353_s_address0, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_address0 <= grp_keccak_squeezeblocks_2_fu_353_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address0 <= grp_keccak_absorb_2_fu_345_s_address0;
        else 
            state_address0 <= "XXXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_address1, grp_keccak_squeezeblocks_2_fu_353_s_address1, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_address1 <= grp_keccak_squeezeblocks_2_fu_353_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_address1 <= grp_keccak_absorb_2_fu_345_s_address1;
        else 
            state_address1 <= "XXXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_ce0, grp_keccak_squeezeblocks_2_fu_353_s_ce0, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_ce0 <= grp_keccak_squeezeblocks_2_fu_353_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_ce0 <= grp_keccak_absorb_2_fu_345_s_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_ce1, grp_keccak_squeezeblocks_2_fu_353_s_ce1, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_ce1 <= grp_keccak_squeezeblocks_2_fu_353_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_ce1 <= grp_keccak_absorb_2_fu_345_s_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_d0, grp_keccak_squeezeblocks_2_fu_353_s_d0, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_d0 <= grp_keccak_squeezeblocks_2_fu_353_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d0 <= grp_keccak_absorb_2_fu_345_s_d0;
        else 
            state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_d1, grp_keccak_squeezeblocks_2_fu_353_s_d1, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_d1 <= grp_keccak_squeezeblocks_2_fu_353_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_d1 <= grp_keccak_absorb_2_fu_345_s_d1;
        else 
            state_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_we0, grp_keccak_squeezeblocks_2_fu_353_s_we0, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_we0 <= grp_keccak_squeezeblocks_2_fu_353_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_we0 <= grp_keccak_absorb_2_fu_345_s_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(tmp_214_reg_732, grp_keccak_absorb_2_fu_345_s_we1, grp_keccak_squeezeblocks_2_fu_353_s_we1, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_214_reg_732 = ap_const_lv1_1)))) then 
            state_we1 <= grp_keccak_squeezeblocks_2_fu_353_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_we1 <= grp_keccak_absorb_2_fu_345_s_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_fu_373_p3 <= (ap_const_lv1_1 & i_reg_216);
    sum_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_373_p3),64));
    sum_i_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_reg_698),64));
    sum_i_fu_481_p2 <= std_logic_vector(unsigned(tmp_79_i_cast_fu_477_p1) + unsigned(p_sum1_cast_reg_675));
    tmp_11_i_fu_494_p3 <= (tmp_694_fu_490_p1 & ap_const_lv4_0);
    tmp_204_fu_391_p2 <= "1" when (i_1_reg_228 = ap_const_lv3_5) else "0";
    tmp_205_fu_403_p3 <= (i_1_reg_228 & ap_const_lv7_0);
    tmp_206_fu_513_p2 <= "1" when (i_2_reg_251 = ap_const_lv4_8) else "0";
    tmp_207_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_251),64));
    tmp_208_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outbuf_q0),64));
    tmp_209_fu_538_p3 <= (tmp_690_fu_534_p1 & ap_const_lv3_0);
    tmp_210_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_209_fu_538_p3),64));
    tmp_211_fu_550_p2 <= std_logic_vector(shift_left(unsigned(tmp_208_fu_530_p1),to_integer(unsigned('0' & tmp_210_fu_546_p1(31-1 downto 0)))));
    tmp_212_fu_562_p2 <= "1" when (i_3_reg_275 = ap_const_lv9_100) else "0";
    tmp_213_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_275),64));
    tmp_214_fu_585_p2 <= "1" when (unsigned(pos_1_reg_322) > unsigned(ap_const_lv32_87)) else "0";
    tmp_215_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos_2_reg_333),64));
    tmp_216_fu_606_p2 <= "1" when (unsigned(b_cast_fu_602_p1) > unsigned(i_4_reg_286)) else "0";
    tmp_217_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outbuf_q0),64));
    tmp_218_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_286),64));
    tmp_219_fu_617_p2 <= (signs_reg_263 and mask_reg_310);
    tmp_220_fu_623_p2 <= "0" when (tmp_219_fu_617_p2 = ap_const_lv64_0) else "1";
    tmp_318_cast_cast_ca_fu_646_p3 <= 
        ap_const_lv23_7FE000 when (tmp_220_reg_755(0) = '1') else 
        ap_const_lv23_1;
    tmp_645_fu_443_p4 <= ((i_1_reg_228 & tmp_691_fu_433_p1) & ap_const_lv1_0);
    tmp_646_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_645_fu_443_p4),64));
    tmp_647_fu_464_p3 <= (i_1_reg_228 & tmp_76_i_fu_458_p2);
    tmp_648_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_647_fu_464_p3),64));
    tmp_690_fu_534_p1 <= i_2_reg_251(3 - 1 downto 0);
    tmp_691_fu_433_p1 <= i_i_reg_240(7 - 1 downto 0);
    tmp_692_fu_437_p2 <= std_logic_vector(shift_left(unsigned(i_i_reg_240),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_693_fu_486_p1 <= w1_vec_coeffs_q0(8 - 1 downto 0);
    tmp_694_fu_490_p1 <= w1_vec_coeffs_q1(4 - 1 downto 0);
    tmp_76_i_fu_458_p2 <= (tmp_692_fu_437_p2 or ap_const_lv8_1);
    tmp_78_i_fu_502_p2 <= (tmp_693_fu_486_p1 or tmp_11_i_fu_494_p3);
    tmp_79_i_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_240),11));
    tmp_fu_361_p2 <= "1" when (i_reg_216 = ap_const_lv6_30) else "0";
    tmp_i_fu_421_p2 <= "1" when (i_i_reg_240 = ap_const_lv8_80) else "0";
    tmp_s_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_216),64));
    w1_vec_coeffs_address0 <= tmp_646_fu_453_p1(11 - 1 downto 0);
    w1_vec_coeffs_address1 <= tmp_648_fu_472_p1(11 - 1 downto 0);

    w1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            w1_vec_coeffs_ce1 <= ap_const_logic_1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_sign is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sm_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sm_ce0 : OUT STD_LOGIC;
    sm_we0 : OUT STD_LOGIC;
    sm_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sm_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    smlen_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    smlen_ce0 : OUT STD_LOGIC;
    smlen_we0 : OUT STD_LOGIC;
    smlen_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    sk_ce1 : OUT STD_LOGIC;
    sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of crypto_sign is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "crypto_sign,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.738250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=99,HLS_SYN_DSP=108,HLS_SYN_FF=34635,HLS_SYN_LUT=130221,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (116 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (116 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (116 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (116 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (116 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (116 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (116 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (116 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (116 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (116 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (116 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (116 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (116 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv11_2A8 : STD_LOGIC_VECTOR (10 downto 0) := "01010101000";
    constant ap_const_lv11_88 : STD_LOGIC_VECTOR (10 downto 0) := "00010001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv64_51 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv13_A8D : STD_LOGIC_VECTOR (12 downto 0) := "0101010001101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv56_1 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv56_2 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv56_3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_FC7FDFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111100011111111101111111111111";
    constant ap_const_lv55_7FE001 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000011111111110000000000001";
    constant ap_const_lv22_1FFF : STD_LOGIC_VECTOR (21 downto 0) := "0000000001111111111111";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv32_7FE001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000011111111110000000000001";
    constant ap_const_lv32_3FF000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111111111000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_7FCED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001111111110011101101";
    constant ap_const_lv32_FFC002 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111111111100000000000010";
    constant ap_const_lv64_A8D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000101010001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (116 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal chat_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_unpack_sk_fu_1193_ap_idle : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_ap_ready : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_ap_done : STD_LOGIC;
    signal tmp_fu_1311_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_2532 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_87_fu_1320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_87_reg_2540 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inlen_assign_fu_1326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal inlen_assign_reg_2550 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_88_fu_1353_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_88_reg_2558 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_i_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_89_fu_1378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_89_reg_2571 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_90_fu_1390_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_90_reg_2579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_91_fu_1402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_91_reg_2587 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_i5_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonce_1_fu_1408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal nonce_1_reg_2602 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_92_fu_1420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_92_reg_2610 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_172_fu_1426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_172_reg_2615 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_11_reg_2623 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_i6_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_rej_gamma1m1_fu_1263_ap_return : STD_LOGIC_VECTOR (8 downto 0);
    signal ctr4_reg_2633 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_rej_gamma1m1_fu_1263_ap_idle : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_ap_ready : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_ap_done : STD_LOGIC;
    signal tmp_672_fu_1476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_672_reg_2639 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_i_cast_fu_1489_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_156_i_cast_reg_2643 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_174_fu_1494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_174_reg_2648 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_175_fu_1500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_175_reg_2653 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_reg_2663 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_178_fu_1516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_178_reg_2667 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_620_fu_1522_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_620_reg_2672 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_179_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_reg_2682 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_181_fu_1542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_181_reg_2686 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_621_fu_1548_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_621_reg_2691 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_182_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_reg_2701 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_184_fu_1568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_184_reg_2705 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_622_fu_1574_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_622_reg_2710 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_fu_1583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_185_reg_2720 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_93_fu_1600_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_93_reg_2727 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_94_fu_1612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_94_reg_2735 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_188_fu_1618_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_188_reg_2740 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_189_fu_1624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_189_reg_2745 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_190_fu_1629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_190_reg_2755 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_653_cast_fu_1648_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_653_cast_reg_2759 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal i_95_fu_1658_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_95_reg_2767 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_13_fu_1670_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_13_reg_2775 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_656_cast_fu_1690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_656_cast_reg_2780 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_load_reg_2795 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_1702_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_reg_2800 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal tmp_675_fu_1708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_675_reg_2805 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_1712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_2810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal t_39_fu_1720_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_39_reg_2815 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal i_12_fu_1751_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_reg_2823 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_655_cast_fu_1765_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_655_cast_reg_2828 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i8_fu_1745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_97_fu_1775_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_97_reg_2836 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_i_i2_fu_1769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_vec_coeffs_addr_2_reg_2846 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_96_fu_1813_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_96_reg_2854 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_658_cast_fu_1827_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_658_cast_reg_2859 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i2_fu_1807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_1837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_14_reg_2867 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal z_vec_coeffs_addr_3_reg_2872 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_i3_fu_1831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_s_fu_1913_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_s_reg_2877 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal i_98_fu_1946_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_98_reg_2886 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp_661_cast_fu_1960_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_661_cast_reg_2891 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i3_fu_1940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_1964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_reg_2896 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_fu_1976_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_15_reg_2903 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_i_i4_fu_1970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_load_3_reg_2913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ret_fu_2055_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal tmp_666_cast_fu_2071_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_666_cast_reg_2926 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal i_16_fu_2081_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_16_reg_2934 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_100_fu_2093_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_100_reg_2942 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_670_cast_fu_2113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_670_cast_reg_2947 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i11_fu_2087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s2_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_load_reg_2962 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_5_fu_2125_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_5_reg_2967 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp_686_fu_2131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_686_reg_2972 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_45_fu_2135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_45_reg_2977 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal t_46_fu_2143_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_46_reg_2982 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_99_fu_2174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_99_reg_2990 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal tmp_669_cast_fu_2188_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_669_cast_reg_2995 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i10_fu_2168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_101_fu_2198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_101_reg_3003 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_i_i6_fu_2192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wcs2_vec_coeffs_addr_1_reg_3013 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_158_i_i_fu_2225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_158_i_i_reg_3018 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_195_reg_3023 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_polyveck_chknorm_fu_1291_ap_idle : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1291_ap_ready : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1291_ap_done : STD_LOGIC;
    signal tmp_672_cast_fu_2239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_672_cast_reg_3027 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal tmp_196_fu_2243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_196_reg_3032 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_17_fu_2249_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_17_reg_3036 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal j_9_fu_2276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_9_reg_3054 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_675_cast_fu_2296_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_675_cast_reg_3062 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal i_102_fu_2306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_102_reg_3070 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_18_fu_2318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_18_reg_3078 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_677_cast_fu_2338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_677_cast_reg_3083 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i12_fu_2312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t0_vec_coeffs_load_reg_3098 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_6_fu_2350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_6_reg_3103 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal tmp_687_fu_2356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_687_reg_3108 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_48_fu_2360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_48_reg_3113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal t_49_fu_2368_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_49_reg_3118 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal tmp_200_reg_3123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal i_19_fu_2399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_19_reg_3130 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal tmp_679_cast_fu_2413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_679_cast_reg_3135 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i13_fu_2393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_104_fu_2423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_104_reg_3143 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal tmp_682_cast_fu_2438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_682_cast_reg_3148 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i8_fu_2417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_103_fu_2457_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_103_reg_3166 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal tmp_681_cast_fu_2471_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_681_cast_reg_3171 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i14_fu_2451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_105_fu_2481_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_105_reg_3179 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ct0_vec_coeffs_addr_2_reg_3184 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i9_fu_2475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inbuf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal inbuf_ce0 : STD_LOGIC;
    signal inbuf_we0 : STD_LOGIC;
    signal inbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inbuf_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal inbuf_ce1 : STD_LOGIC;
    signal inbuf_we1 : STD_LOGIC;
    signal inbuf_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal outbuf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal outbuf_ce0 : STD_LOGIC;
    signal outbuf_we0 : STD_LOGIC;
    signal outbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outbuf_ce1 : STD_LOGIC;
    signal outbuf_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_assign_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_assign_1_ce0 : STD_LOGIC;
    signal output_assign_1_we0 : STD_LOGIC;
    signal output_assign_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce0 : STD_LOGIC;
    signal s_we0 : STD_LOGIC;
    signal s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce1 : STD_LOGIC;
    signal s_we1 : STD_LOGIC;
    signal s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal seedbuf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal seedbuf_ce0 : STD_LOGIC;
    signal seedbuf_we0 : STD_LOGIC;
    signal seedbuf_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal seedbuf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_coeffs_ce0 : STD_LOGIC;
    signal c_coeffs_we0 : STD_LOGIC;
    signal c_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal chat_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal chat_coeffs_ce0 : STD_LOGIC;
    signal chat_coeffs_we0 : STD_LOGIC;
    signal chat_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mat_vec_coeffs_ce0 : STD_LOGIC;
    signal mat_vec_coeffs_we0 : STD_LOGIC;
    signal mat_vec_coeffs_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s1_vec_coeffs_ce0 : STD_LOGIC;
    signal s1_vec_coeffs_we0 : STD_LOGIC;
    signal s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s1_vec_coeffs_ce1 : STD_LOGIC;
    signal s1_vec_coeffs_we1 : STD_LOGIC;
    signal y_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_vec_coeffs_ce0 : STD_LOGIC;
    signal y_vec_coeffs_we0 : STD_LOGIC;
    signal y_vec_coeffs_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal yhat_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal yhat_vec_coeffs_ce0 : STD_LOGIC;
    signal yhat_vec_coeffs_we0 : STD_LOGIC;
    signal yhat_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal yhat_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_vec_coeffs_ce0 : STD_LOGIC;
    signal z_vec_coeffs_we0 : STD_LOGIC;
    signal z_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_vec_coeffs_ce1 : STD_LOGIC;
    signal z_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal s2_vec_coeffs_ce0 : STD_LOGIC;
    signal s2_vec_coeffs_we0 : STD_LOGIC;
    signal s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_vec_coeffs_ce1 : STD_LOGIC;
    signal s2_vec_coeffs_we1 : STD_LOGIC;
    signal t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal t0_vec_coeffs_ce0 : STD_LOGIC;
    signal t0_vec_coeffs_we0 : STD_LOGIC;
    signal t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_vec_coeffs_ce0 : STD_LOGIC;
    signal w_vec_coeffs_we0 : STD_LOGIC;
    signal w_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_vec_coeffs_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_vec_coeffs_ce1 : STD_LOGIC;
    signal w_vec_coeffs_we1 : STD_LOGIC;
    signal w_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal w1_vec_coeffs_ce0 : STD_LOGIC;
    signal w1_vec_coeffs_we0 : STD_LOGIC;
    signal w1_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w1_vec_coeffs_ce1 : STD_LOGIC;
    signal w1_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_vec_coeffs_ce0 : STD_LOGIC;
    signal h_vec_coeffs_we0 : STD_LOGIC;
    signal h_vec_coeffs_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal wcs2_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal wcs2_vec_coeffs_ce0 : STD_LOGIC;
    signal wcs2_vec_coeffs_we0 : STD_LOGIC;
    signal wcs2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wcs2_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wcs2_vec_coeffs_ce1 : STD_LOGIC;
    signal wcs2_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wcs20_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal wcs20_vec_coeffs_ce0 : STD_LOGIC;
    signal wcs20_vec_coeffs_we0 : STD_LOGIC;
    signal wcs20_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wcs20_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ct0_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ct0_vec_coeffs_ce0 : STD_LOGIC;
    signal ct0_vec_coeffs_we0 : STD_LOGIC;
    signal ct0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ct0_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ct0_vec_coeffs_ce1 : STD_LOGIC;
    signal ct0_vec_coeffs_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_vec_coeffs_ce0 : STD_LOGIC;
    signal tmp_vec_coeffs_we0 : STD_LOGIC;
    signal tmp_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_challenge_fu_1129_ap_start : STD_LOGIC;
    signal grp_challenge_fu_1129_ap_done : STD_LOGIC;
    signal grp_challenge_fu_1129_ap_idle : STD_LOGIC;
    signal grp_challenge_fu_1129_ap_ready : STD_LOGIC;
    signal grp_challenge_fu_1129_c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_challenge_fu_1129_c_coeffs_ce0 : STD_LOGIC;
    signal grp_challenge_fu_1129_c_coeffs_we0 : STD_LOGIC;
    signal grp_challenge_fu_1129_c_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_challenge_fu_1129_mu_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_challenge_fu_1129_mu_ce0 : STD_LOGIC;
    signal grp_challenge_fu_1129_w1_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_challenge_fu_1129_w1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_challenge_fu_1129_w1_vec_coeffs_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_challenge_fu_1129_w1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_1138_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_1138_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_fu_1138_s_ce1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_s_we1 : STD_LOGIC;
    signal grp_keccak_absorb_fu_1138_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_1138_m_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_keccak_absorb_fu_1138_m_ce0 : STD_LOGIC;
    signal grp_expand_mat_fu_1148_ap_start : STD_LOGIC;
    signal grp_expand_mat_fu_1148_ap_done : STD_LOGIC;
    signal grp_expand_mat_fu_1148_ap_idle : STD_LOGIC;
    signal grp_expand_mat_fu_1148_ap_ready : STD_LOGIC;
    signal grp_expand_mat_fu_1148_mat_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_expand_mat_fu_1148_mat_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_expand_mat_fu_1148_mat_vec_coeffs_we0 : STD_LOGIC;
    signal grp_expand_mat_fu_1148_mat_vec_coeffs_d0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_expand_mat_fu_1148_rho_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_expand_mat_fu_1148_rho_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_h_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_h_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_h_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_h_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_nblocks : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_1_fu_1156_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_1_fu_1156_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_h_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_h_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_h_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_h_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_s_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_s_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_s_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_squeezeblocks_2_fu_1167_s_ce1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_s_we1 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_2_fu_1167_s_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_ap_start : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_ap_done : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_ap_idle : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_ap_ready : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce1 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we1 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1184_ap_start : STD_LOGIC;
    signal grp_pack_sig_fu_1184_ap_done : STD_LOGIC;
    signal grp_pack_sig_fu_1184_ap_idle : STD_LOGIC;
    signal grp_pack_sig_fu_1184_ap_ready : STD_LOGIC;
    signal grp_pack_sig_fu_1184_sig_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pack_sig_fu_1184_sig_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1184_sig_we0 : STD_LOGIC;
    signal grp_pack_sig_fu_1184_sig_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pack_sig_fu_1184_z_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_sig_fu_1184_z_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1184_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pack_sig_fu_1184_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_pack_sig_fu_1184_c_coeffs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pack_sig_fu_1184_c_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_ap_start : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_rho_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_unpack_sk_fu_1193_rho_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_rho_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_rho_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1193_tr_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1193_tr_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_tr_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_tr_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s1_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_ce1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_we1 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_s2_vec_coeffs_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1193_t0_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_unpack_sk_fu_1193_t0_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_t0_vec_coeffs_we0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_t0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_unpack_sk_fu_1193_sk_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1193_sk_ce0 : STD_LOGIC;
    signal grp_unpack_sk_fu_1193_sk_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_unpack_sk_fu_1193_sk_ce1 : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_ap_start : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_ap_done : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_ap_idle : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_ap_ready : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_p_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_invntt_frominvmont_1_fu_1209_p_ce0 : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_p_we0 : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_frominvmont_1_fu_1209_p_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_frominvmont_1_fu_1209_p_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_invntt_frominvmont_1_fu_1209_p_ce1 : STD_LOGIC;
    signal grp_invntt_frominvmont_1_fu_1209_p_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_frominvmont_1_fu_1209_p_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_invntt_frominvmont_fu_1220_ap_start : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_ap_done : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_ap_idle : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_ap_ready : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_p_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_frominvmont_fu_1220_p_ce0 : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_p_we0 : STD_LOGIC;
    signal grp_invntt_frominvmont_fu_1220_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_invntt_frominvmont_fu_1220_p_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_invntt_frominvmont_fu_1220_p_ce1 : STD_LOGIC;
    signal grp_ntt_fu_1229_ap_start : STD_LOGIC;
    signal grp_ntt_fu_1229_ap_done : STD_LOGIC;
    signal grp_ntt_fu_1229_ap_idle : STD_LOGIC;
    signal grp_ntt_fu_1229_ap_ready : STD_LOGIC;
    signal grp_ntt_fu_1229_p_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_ntt_fu_1229_p_ce0 : STD_LOGIC;
    signal grp_ntt_fu_1229_p_we0 : STD_LOGIC;
    signal grp_ntt_fu_1229_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1229_p_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_fu_1229_p_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ntt_1_fu_1239_ap_start : STD_LOGIC;
    signal grp_ntt_1_fu_1239_ap_done : STD_LOGIC;
    signal grp_ntt_1_fu_1239_ap_idle : STD_LOGIC;
    signal grp_ntt_1_fu_1239_ap_ready : STD_LOGIC;
    signal grp_ntt_1_fu_1239_p_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_ntt_1_fu_1239_p_ce0 : STD_LOGIC;
    signal grp_ntt_1_fu_1239_p_we0 : STD_LOGIC;
    signal grp_ntt_1_fu_1239_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_1_fu_1239_p_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ntt_1_fu_1239_p_offset : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_ntt_2_fu_1249_ap_start : STD_LOGIC;
    signal grp_ntt_2_fu_1249_ap_done : STD_LOGIC;
    signal grp_ntt_2_fu_1249_ap_idle : STD_LOGIC;
    signal grp_ntt_2_fu_1249_ap_ready : STD_LOGIC;
    signal grp_ntt_2_fu_1249_p_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ntt_2_fu_1249_p_ce0 : STD_LOGIC;
    signal grp_ntt_2_fu_1249_p_we0 : STD_LOGIC;
    signal grp_ntt_2_fu_1249_p_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_make_hint_fu_1256_ap_start : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_ap_done : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_ap_idle : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_ap_ready : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_h_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_make_hint_fu_1256_h_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_h_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_h_vec_coeffs_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_polyveck_make_hint_fu_1256_u_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_make_hint_fu_1256_u_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_make_hint_fu_1256_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_make_hint_fu_1256_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_rej_gamma1m1_fu_1263_ap_start : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_gamma1m1_fu_1263_a_ce0 : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_a_we0 : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_a_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_rej_gamma1m1_fu_1263_a_offset1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_rej_gamma1m1_fu_1263_len : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_gamma1m1_fu_1263_buf_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_gamma1m1_fu_1263_buf_r_ce0 : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_buf_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_rej_gamma1m1_fu_1263_buf_r_ce1 : STD_LOGIC;
    signal grp_rej_gamma1m1_fu_1263_buflen : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_keccak_absorb_1_fu_1278_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_ap_done : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_s_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_keccak_absorb_1_fu_1278_s_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_s_we0 : STD_LOGIC;
    signal grp_keccak_absorb_1_fu_1278_s_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_1_fu_1278_m_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_keccak_absorb_1_fu_1278_m_ce0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_ap_start : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_ap_done : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_ap_idle : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_ap_ready : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v1_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1291_ap_start : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_chknorm_fu_1291_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_freeze_fu_1296_ap_start : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_ap_done : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_ap_idle : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_ap_ready : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0 : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0 : STD_LOGIC;
    signal grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_i_reg_707 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_i8_reg_719 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_i3_reg_731 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_i9_fu_1372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i4_reg_743 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_i4_fu_1384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonce_reg_755 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_predicate_op705_call_state115 : BOOLEAN;
    signal ap_block_state115_on_subcall_done : BOOLEAN;
    signal tmp_202_fu_2508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_767 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal nonce_assign_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i5_reg_790 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_173_reg_802 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_177_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal tmp_180_reg_824 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_183_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_i6_reg_846 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_2_reg_858 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_i7_fu_1594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_187_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal i_3_reg_881 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_i9_reg_893 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp_191_fu_1652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i7_reg_904 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i_reg_915 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal i_i1_reg_926 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i1_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal i_i2_reg_948 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_i_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_i2_reg_971 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_171_i_i_fu_2029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_i_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_reg_995 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal i_i11_reg_1007 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal tmp_193_fu_2075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i10_reg_1018 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i3_reg_1029 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal i_5_reg_1040 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_198_fu_2270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_1051 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal tmp_201_fu_2282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_reg_1062 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal i_i12_reg_1074 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_197_fu_2300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i13_reg_1085 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i4_reg_1096 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal i_i14_reg_1107 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_i_i5_reg_1118 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal grp_challenge_fu_1129_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_keccak_absorb_fu_1138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_expand_mat_fu_1148_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_polyvecl_pointwise_a_fu_1175_ap_start_reg : STD_LOGIC := '0';
    signal tmp_186_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_pack_sig_fu_1184_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal grp_unpack_sk_fu_1193_ap_start_reg : STD_LOGIC := '0';
    signal grp_invntt_frominvmont_1_fu_1209_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_invntt_frominvmont_fu_1220_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_fu_1229_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_1_fu_1239_ap_start_reg : STD_LOGIC := '0';
    signal grp_ntt_2_fu_1249_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal grp_polyveck_make_hint_fu_1256_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal grp_rej_gamma1m1_fu_1263_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_keccak_absorb_1_fu_1278_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_polyveck_decompose_fu_1284_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_polyveck_chknorm_fu_1291_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_polyveck_freeze_fu_1296_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal sum_cast_fu_1337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_1367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_i_cast_fu_1450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_154_i_fu_1471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_101_fu_1676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_659_cast_fu_1790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_662_cast_fu_1852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_667_cast_fu_1991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_110_fu_2099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_673_cast_fu_2213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_676_cast_fu_2264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_117_fu_2324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_683_cast_fu_2496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_669_fu_1455_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal extLd7_fu_1511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd1_fu_1537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd2_fu_1563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd3_fu_1589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal extLd_fu_1635_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_172_i_i_fu_1800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_4_fu_1934_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_172_i_i1_fu_2444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_168_i_i_fu_2501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_1332_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_i_fu_1359_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum5_i_fu_1444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_156_i_fu_1484_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_623_fu_1640_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i9_cast_fu_1681_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_625_fu_1685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_fu_1702_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_fu_1702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_39_fu_1720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_54_cast_fu_1726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_40_fu_1729_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_624_fu_1757_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i2_cast_fu_1781_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_627_fu_1785_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal extLd4_fu_1796_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_626_fu_1819_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i3_cast_fu_1843_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_629_fu_1847_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_41_fu_1857_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_630_fu_1865_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal t_56_cast_fu_1861_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_21_cast_fu_1875_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_i_i_i_i_fu_1889_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_i_fu_1879_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_631_fu_1899_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp1_fu_1905_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_i_i_i_i_cast_fu_1895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_681_fu_1919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_cast_cast_fu_1926_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_628_fu_1952_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i4_cast_fu_1982_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_633_fu_1986_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_42_fu_1996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_684_fu_2001_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_170_i_i_fu_2009_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_43_fu_2017_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_44_fu_2023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_685_fu_2035_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_2045_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_61_fu_2039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_632_fu_2063_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i3_cast_fu_2104_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_635_fu_2108_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_5_fu_2125_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_5_fu_2125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_46_fu_2143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_63_cast_fu_2149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_47_fu_2152_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_634_fu_2180_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i6_cast_fu_2204_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_637_fu_2208_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_157_i_i_fu_2219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_636_fu_2231_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_cast8_cast_fu_2255_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_639_fu_2259_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_638_fu_2288_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i4_cast_fu_2329_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_640_fu_2333_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_assign_6_fu_2350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_6_fu_2350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_49_fu_2368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_67_cast_fu_2374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_50_fu_2377_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_641_fu_2405_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i8_cast_fu_2429_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_643_fu_2433_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_642_fu_2463_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i9_cast_fu_2487_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_644_fu_2491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (116 downto 0);
    signal a_assign_5_fu_2125_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_5_fu_2125_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_6_fu_2350_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_6_fu_2350_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_fu_1702_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_fu_1702_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_39_fu_1720_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_46_fu_2143_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_49_fu_2368_p10 : STD_LOGIC_VECTOR (54 downto 0);

    component challenge IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_coeffs_ce0 : OUT STD_LOGIC;
        c_coeffs_we0 : OUT STD_LOGIC;
        c_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        c_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        mu_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        mu_ce0 : OUT STD_LOGIC;
        mu_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w1_vec_coeffs_ce0 : OUT STD_LOGIC;
        w1_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w1_vec_coeffs_ce1 : OUT STD_LOGIC;
        w1_vec_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component keccak_absorb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        mlen : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component expand_mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        mat_vec_coeffs_ce0 : OUT STD_LOGIC;
        mat_vec_coeffs_we0 : OUT STD_LOGIC;
        mat_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (22 downto 0);
        rho_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        rho_ce0 : OUT STD_LOGIC;
        rho_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keccak_squeezeblocks_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        nblocks : IN STD_LOGIC_VECTOR (3 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_squeezeblocks_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_we0 : OUT STD_LOGIC;
        h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce1 : OUT STD_LOGIC;
        s_we1 : OUT STD_LOGIC;
        s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component polyvecl_pointwise_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w_coeffs_ce0 : OUT STD_LOGIC;
        w_coeffs_we0 : OUT STD_LOGIC;
        w_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        w_coeffs_ce1 : OUT STD_LOGIC;
        w_coeffs_we1 : OUT STD_LOGIC;
        w_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_coeffs_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pack_sig IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sig_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sig_ce0 : OUT STD_LOGIC;
        sig_we0 : OUT STD_LOGIC;
        sig_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        sig_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        z_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        z_vec_coeffs_ce0 : OUT STD_LOGIC;
        z_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        c_coeffs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_coeffs_ce0 : OUT STD_LOGIC;
        c_coeffs_q0 : IN STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component unpack_sk IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rho_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        rho_ce0 : OUT STD_LOGIC;
        rho_we0 : OUT STD_LOGIC;
        rho_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        tr_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        tr_ce0 : OUT STD_LOGIC;
        tr_we0 : OUT STD_LOGIC;
        tr_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce0 : OUT STD_LOGIC;
        s1_vec_coeffs_we0 : OUT STD_LOGIC;
        s1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s1_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s1_vec_coeffs_ce1 : OUT STD_LOGIC;
        s1_vec_coeffs_we1 : OUT STD_LOGIC;
        s1_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        s2_vec_coeffs_ce0 : OUT STD_LOGIC;
        s2_vec_coeffs_we0 : OUT STD_LOGIC;
        s2_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s2_vec_coeffs_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        s2_vec_coeffs_ce1 : OUT STD_LOGIC;
        s2_vec_coeffs_we1 : OUT STD_LOGIC;
        s2_vec_coeffs_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        t0_vec_coeffs_ce0 : OUT STD_LOGIC;
        t0_vec_coeffs_we0 : OUT STD_LOGIC;
        t0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        sk_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        sk_ce1 : OUT STD_LOGIC;
        sk_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component invntt_frominvmont_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce1 : OUT STD_LOGIC;
        p_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component invntt_frominvmont IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_ce1 : OUT STD_LOGIC;
        p_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component ntt_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ce0 : OUT STD_LOGIC;
        p_we0 : OUT STD_LOGIC;
        p_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_make_hint IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        h_vec_coeffs_ce0 : OUT STD_LOGIC;
        h_vec_coeffs_we0 : OUT STD_LOGIC;
        h_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        u_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        u_vec_coeffs_ce0 : OUT STD_LOGIC;
        u_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rej_gamma1m1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_we0 : OUT STD_LOGIC;
        a_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (2 downto 0);
        a_offset1 : IN STD_LOGIC_VECTOR (8 downto 0);
        len : IN STD_LOGIC_VECTOR (9 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buf_r_ce1 : OUT STD_LOGIC;
        buf_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buflen : IN STD_LOGIC_VECTOR (10 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component keccak_absorb_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_we0 : OUT STD_LOGIC;
        s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component polyveck_decompose IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v1_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v1_vec_coeffs_ce0 : OUT STD_LOGIC;
        v1_vec_coeffs_we0 : OUT STD_LOGIC;
        v1_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v0_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v0_vec_coeffs_ce0 : OUT STD_LOGIC;
        v0_vec_coeffs_we0 : OUT STD_LOGIC;
        v0_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_chknorm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component polyveck_freeze IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        v_vec_coeffs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        v_vec_coeffs_ce0 : OUT STD_LOGIC;
        v_vec_coeffs_we0 : OUT STD_LOGIC;
        v_vec_coeffs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        v_vec_coeffs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_inbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component challenge_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_seedbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component crypto_sign_c_coehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component polyvecl_pointwisdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_mat_vjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (22 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component crypto_sign_s1_vekbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_y_veclbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component crypto_sign_yhat_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_z_vecncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_s2_veocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_t0_vepcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_w_vecqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_w1_vercU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component crypto_sign_h_vecsc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    inbuf_U : component crypto_sign_inbuf
    generic map (
        DataWidth => 8,
        AddressRange => 82,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => inbuf_address0,
        ce0 => inbuf_ce0,
        we0 => inbuf_we0,
        d0 => inbuf_d0,
        q0 => inbuf_q0,
        address1 => inbuf_address1,
        ce1 => inbuf_ce1,
        we1 => inbuf_we1,
        d1 => inbuf_d1);

    outbuf_U : component crypto_sign_outbuf
    generic map (
        DataWidth => 8,
        AddressRange => 680,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outbuf_address0,
        ce0 => outbuf_ce0,
        we0 => outbuf_we0,
        d0 => grp_keccak_squeezeblocks_1_fu_1156_h_d0,
        q0 => outbuf_q0,
        address1 => grp_rej_gamma1m1_fu_1263_buf_r_address1,
        ce1 => outbuf_ce1,
        q1 => outbuf_q1);

    state_U : component crypto_sign_state
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => grp_keccak_squeezeblocks_1_fu_1156_s_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => grp_keccak_squeezeblocks_1_fu_1156_s_d1,
        q1 => state_q1);

    output_assign_1_U : component challenge_outbuf
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => output_assign_1_address0,
        ce0 => output_assign_1_ce0,
        we0 => output_assign_1_we0,
        d0 => grp_keccak_squeezeblocks_2_fu_1167_h_d0,
        q0 => output_assign_1_q0);

    s_U : component crypto_sign_state
    generic map (
        DataWidth => 64,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_address0,
        ce0 => s_ce0,
        we0 => s_we0,
        d0 => s_d0,
        q0 => s_q0,
        address1 => s_address1,
        ce1 => s_ce1,
        we1 => s_we1,
        d1 => s_d1,
        q1 => s_q1);

    seedbuf_U : component crypto_sign_seedbuf
    generic map (
        DataWidth => 8,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seedbuf_address0,
        ce0 => seedbuf_ce0,
        we0 => seedbuf_we0,
        d0 => seedbuf_d0,
        q0 => seedbuf_q0);

    c_coeffs_U : component crypto_sign_c_coehbi
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_coeffs_address0,
        ce0 => c_coeffs_ce0,
        we0 => c_coeffs_we0,
        d0 => grp_challenge_fu_1129_c_coeffs_d0,
        q0 => c_coeffs_q0);

    chat_coeffs_U : component polyvecl_pointwisdEe
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => chat_coeffs_address0,
        ce0 => chat_coeffs_ce0,
        we0 => chat_coeffs_we0,
        d0 => chat_coeffs_d0,
        q0 => chat_coeffs_q0);

    mat_vec_coeffs_U : component crypto_sign_mat_vjbC
    generic map (
        DataWidth => 23,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_vec_coeffs_address0,
        ce0 => mat_vec_coeffs_ce0,
        we0 => mat_vec_coeffs_we0,
        d0 => grp_expand_mat_fu_1148_mat_vec_coeffs_d0,
        q0 => mat_vec_coeffs_q0);

    s1_vec_coeffs_U : component crypto_sign_s1_vekbM
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s1_vec_coeffs_address0,
        ce0 => s1_vec_coeffs_ce0,
        we0 => s1_vec_coeffs_we0,
        d0 => s1_vec_coeffs_d0,
        q0 => s1_vec_coeffs_q0,
        address1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_address1,
        ce1 => s1_vec_coeffs_ce1,
        we1 => s1_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_d1);

    y_vec_coeffs_U : component crypto_sign_y_veclbW
    generic map (
        DataWidth => 24,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_vec_coeffs_address0,
        ce0 => y_vec_coeffs_ce0,
        we0 => y_vec_coeffs_we0,
        d0 => grp_rej_gamma1m1_fu_1263_a_d0,
        q0 => y_vec_coeffs_q0);

    yhat_vec_coeffs_U : component crypto_sign_yhat_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => yhat_vec_coeffs_address0,
        ce0 => yhat_vec_coeffs_ce0,
        we0 => yhat_vec_coeffs_we0,
        d0 => yhat_vec_coeffs_d0,
        q0 => yhat_vec_coeffs_q0);

    z_vec_coeffs_U : component crypto_sign_z_vecncg
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_vec_coeffs_address0,
        ce0 => z_vec_coeffs_ce0,
        we0 => z_vec_coeffs_we0,
        d0 => z_vec_coeffs_d0,
        q0 => z_vec_coeffs_q0,
        address1 => grp_invntt_frominvmont_fu_1220_p_address1,
        ce1 => z_vec_coeffs_ce1,
        q1 => z_vec_coeffs_q1);

    s2_vec_coeffs_U : component crypto_sign_s2_veocq
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s2_vec_coeffs_address0,
        ce0 => s2_vec_coeffs_ce0,
        we0 => s2_vec_coeffs_we0,
        d0 => s2_vec_coeffs_d0,
        q0 => s2_vec_coeffs_q0,
        address1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_address1,
        ce1 => s2_vec_coeffs_ce1,
        we1 => s2_vec_coeffs_we1,
        d1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_d1);

    t0_vec_coeffs_U : component crypto_sign_t0_vepcA
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t0_vec_coeffs_address0,
        ce0 => t0_vec_coeffs_ce0,
        we0 => t0_vec_coeffs_we0,
        d0 => t0_vec_coeffs_d0,
        q0 => t0_vec_coeffs_q0);

    w_vec_coeffs_U : component crypto_sign_w_vecqcK
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_vec_coeffs_address0,
        ce0 => w_vec_coeffs_ce0,
        we0 => w_vec_coeffs_we0,
        d0 => w_vec_coeffs_d0,
        q0 => w_vec_coeffs_q0,
        address1 => w_vec_coeffs_address1,
        ce1 => w_vec_coeffs_ce1,
        we1 => w_vec_coeffs_we1,
        d1 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d1,
        q1 => w_vec_coeffs_q1);

    w1_vec_coeffs_U : component crypto_sign_w1_vercU
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w1_vec_coeffs_address0,
        ce0 => w1_vec_coeffs_ce0,
        we0 => w1_vec_coeffs_we0,
        d0 => grp_polyveck_decompose_fu_1284_v1_vec_coeffs_d0,
        q0 => w1_vec_coeffs_q0,
        address1 => grp_challenge_fu_1129_w1_vec_coeffs_address1,
        ce1 => w1_vec_coeffs_ce1,
        q1 => w1_vec_coeffs_q1);

    h_vec_coeffs_U : component crypto_sign_h_vecsc4
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_vec_coeffs_address0,
        ce0 => h_vec_coeffs_ce0,
        we0 => h_vec_coeffs_we0,
        d0 => grp_polyveck_make_hint_fu_1256_h_vec_coeffs_d0,
        q0 => h_vec_coeffs_q0);

    wcs2_vec_coeffs_U : component crypto_sign_w1_vercU
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wcs2_vec_coeffs_address0,
        ce0 => wcs2_vec_coeffs_ce0,
        we0 => wcs2_vec_coeffs_we0,
        d0 => wcs2_vec_coeffs_d0,
        q0 => wcs2_vec_coeffs_q0,
        address1 => grp_invntt_frominvmont_1_fu_1209_p_address1,
        ce1 => wcs2_vec_coeffs_ce1,
        q1 => wcs2_vec_coeffs_q1);

    wcs20_vec_coeffs_U : component crypto_sign_t0_vepcA
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wcs20_vec_coeffs_address0,
        ce0 => wcs20_vec_coeffs_ce0,
        we0 => wcs20_vec_coeffs_we0,
        d0 => wcs20_vec_coeffs_d0,
        q0 => wcs20_vec_coeffs_q0);

    ct0_vec_coeffs_U : component crypto_sign_w1_vercU
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ct0_vec_coeffs_address0,
        ce0 => ct0_vec_coeffs_ce0,
        we0 => ct0_vec_coeffs_we0,
        d0 => ct0_vec_coeffs_d0,
        q0 => ct0_vec_coeffs_q0,
        address1 => grp_invntt_frominvmont_1_fu_1209_p_address1,
        ce1 => ct0_vec_coeffs_ce1,
        q1 => ct0_vec_coeffs_q1);

    tmp_vec_coeffs_U : component crypto_sign_t0_vepcA
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_vec_coeffs_address0,
        ce0 => tmp_vec_coeffs_ce0,
        we0 => tmp_vec_coeffs_we0,
        d0 => tmp_vec_coeffs_d0,
        q0 => tmp_vec_coeffs_q0);

    grp_challenge_fu_1129 : component challenge
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_challenge_fu_1129_ap_start,
        ap_done => grp_challenge_fu_1129_ap_done,
        ap_idle => grp_challenge_fu_1129_ap_idle,
        ap_ready => grp_challenge_fu_1129_ap_ready,
        c_coeffs_address0 => grp_challenge_fu_1129_c_coeffs_address0,
        c_coeffs_ce0 => grp_challenge_fu_1129_c_coeffs_ce0,
        c_coeffs_we0 => grp_challenge_fu_1129_c_coeffs_we0,
        c_coeffs_d0 => grp_challenge_fu_1129_c_coeffs_d0,
        c_coeffs_q0 => c_coeffs_q0,
        mu_address0 => grp_challenge_fu_1129_mu_address0,
        mu_ce0 => grp_challenge_fu_1129_mu_ce0,
        mu_q0 => seedbuf_q0,
        w1_vec_coeffs_address0 => grp_challenge_fu_1129_w1_vec_coeffs_address0,
        w1_vec_coeffs_ce0 => grp_challenge_fu_1129_w1_vec_coeffs_ce0,
        w1_vec_coeffs_q0 => w1_vec_coeffs_q0,
        w1_vec_coeffs_address1 => grp_challenge_fu_1129_w1_vec_coeffs_address1,
        w1_vec_coeffs_ce1 => grp_challenge_fu_1129_w1_vec_coeffs_ce1,
        w1_vec_coeffs_q1 => w1_vec_coeffs_q1);

    grp_keccak_absorb_fu_1138 : component keccak_absorb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_fu_1138_ap_start,
        ap_done => grp_keccak_absorb_fu_1138_ap_done,
        ap_idle => grp_keccak_absorb_fu_1138_ap_idle,
        ap_ready => grp_keccak_absorb_fu_1138_ap_ready,
        s_address0 => grp_keccak_absorb_fu_1138_s_address0,
        s_ce0 => grp_keccak_absorb_fu_1138_s_ce0,
        s_we0 => grp_keccak_absorb_fu_1138_s_we0,
        s_d0 => grp_keccak_absorb_fu_1138_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_keccak_absorb_fu_1138_s_address1,
        s_ce1 => grp_keccak_absorb_fu_1138_s_ce1,
        s_we1 => grp_keccak_absorb_fu_1138_s_we1,
        s_d1 => grp_keccak_absorb_fu_1138_s_d1,
        s_q1 => s_q1,
        m_address0 => grp_keccak_absorb_fu_1138_m_address0,
        m_ce0 => grp_keccak_absorb_fu_1138_m_ce0,
        m_q0 => sm_q0,
        mlen => inlen_assign_reg_2550);

    grp_expand_mat_fu_1148 : component expand_mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_expand_mat_fu_1148_ap_start,
        ap_done => grp_expand_mat_fu_1148_ap_done,
        ap_idle => grp_expand_mat_fu_1148_ap_idle,
        ap_ready => grp_expand_mat_fu_1148_ap_ready,
        mat_vec_coeffs_address0 => grp_expand_mat_fu_1148_mat_vec_coeffs_address0,
        mat_vec_coeffs_ce0 => grp_expand_mat_fu_1148_mat_vec_coeffs_ce0,
        mat_vec_coeffs_we0 => grp_expand_mat_fu_1148_mat_vec_coeffs_we0,
        mat_vec_coeffs_d0 => grp_expand_mat_fu_1148_mat_vec_coeffs_d0,
        rho_address0 => grp_expand_mat_fu_1148_rho_address0,
        rho_ce0 => grp_expand_mat_fu_1148_rho_ce0,
        rho_q0 => seedbuf_q0);

    grp_keccak_squeezeblocks_1_fu_1156 : component keccak_squeezeblocks_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_1_fu_1156_ap_start,
        ap_done => grp_keccak_squeezeblocks_1_fu_1156_ap_done,
        ap_idle => grp_keccak_squeezeblocks_1_fu_1156_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_1_fu_1156_ap_ready,
        h_address0 => grp_keccak_squeezeblocks_1_fu_1156_h_address0,
        h_ce0 => grp_keccak_squeezeblocks_1_fu_1156_h_ce0,
        h_we0 => grp_keccak_squeezeblocks_1_fu_1156_h_we0,
        h_d0 => grp_keccak_squeezeblocks_1_fu_1156_h_d0,
        nblocks => grp_keccak_squeezeblocks_1_fu_1156_nblocks,
        s_address0 => grp_keccak_squeezeblocks_1_fu_1156_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_1_fu_1156_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_1_fu_1156_s_we0,
        s_d0 => grp_keccak_squeezeblocks_1_fu_1156_s_d0,
        s_q0 => state_q0,
        s_address1 => grp_keccak_squeezeblocks_1_fu_1156_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_1_fu_1156_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_1_fu_1156_s_we1,
        s_d1 => grp_keccak_squeezeblocks_1_fu_1156_s_d1,
        s_q1 => state_q1);

    grp_keccak_squeezeblocks_2_fu_1167 : component keccak_squeezeblocks_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_2_fu_1167_ap_start,
        ap_done => grp_keccak_squeezeblocks_2_fu_1167_ap_done,
        ap_idle => grp_keccak_squeezeblocks_2_fu_1167_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_2_fu_1167_ap_ready,
        h_address0 => grp_keccak_squeezeblocks_2_fu_1167_h_address0,
        h_ce0 => grp_keccak_squeezeblocks_2_fu_1167_h_ce0,
        h_we0 => grp_keccak_squeezeblocks_2_fu_1167_h_we0,
        h_d0 => grp_keccak_squeezeblocks_2_fu_1167_h_d0,
        s_address0 => grp_keccak_squeezeblocks_2_fu_1167_s_address0,
        s_ce0 => grp_keccak_squeezeblocks_2_fu_1167_s_ce0,
        s_we0 => grp_keccak_squeezeblocks_2_fu_1167_s_we0,
        s_d0 => grp_keccak_squeezeblocks_2_fu_1167_s_d0,
        s_q0 => s_q0,
        s_address1 => grp_keccak_squeezeblocks_2_fu_1167_s_address1,
        s_ce1 => grp_keccak_squeezeblocks_2_fu_1167_s_ce1,
        s_we1 => grp_keccak_squeezeblocks_2_fu_1167_s_we1,
        s_d1 => grp_keccak_squeezeblocks_2_fu_1167_s_d1,
        s_q1 => s_q1);

    grp_polyvecl_pointwise_a_fu_1175 : component polyvecl_pointwise_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyvecl_pointwise_a_fu_1175_ap_start,
        ap_done => grp_polyvecl_pointwise_a_fu_1175_ap_done,
        ap_idle => grp_polyvecl_pointwise_a_fu_1175_ap_idle,
        ap_ready => grp_polyvecl_pointwise_a_fu_1175_ap_ready,
        w_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address0,
        w_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce0,
        w_coeffs_we0 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we0,
        w_coeffs_d0 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d0,
        w_coeffs_q0 => w_vec_coeffs_q0,
        w_coeffs_address1 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address1,
        w_coeffs_ce1 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce1,
        w_coeffs_we1 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we1,
        w_coeffs_d1 => grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d1,
        w_coeffs_q1 => w_vec_coeffs_q1,
        w_coeffs_offset => i_2_reg_858,
        u_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => mat_vec_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => yhat_vec_coeffs_q0);

    grp_pack_sig_fu_1184 : component pack_sig
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pack_sig_fu_1184_ap_start,
        ap_done => grp_pack_sig_fu_1184_ap_done,
        ap_idle => grp_pack_sig_fu_1184_ap_idle,
        ap_ready => grp_pack_sig_fu_1184_ap_ready,
        sig_address0 => grp_pack_sig_fu_1184_sig_address0,
        sig_ce0 => grp_pack_sig_fu_1184_sig_ce0,
        sig_we0 => grp_pack_sig_fu_1184_sig_we0,
        sig_d0 => grp_pack_sig_fu_1184_sig_d0,
        sig_q0 => sm_q0,
        z_vec_coeffs_address0 => grp_pack_sig_fu_1184_z_vec_coeffs_address0,
        z_vec_coeffs_ce0 => grp_pack_sig_fu_1184_z_vec_coeffs_ce0,
        z_vec_coeffs_q0 => z_vec_coeffs_q0,
        h_vec_coeffs_address0 => grp_pack_sig_fu_1184_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_pack_sig_fu_1184_h_vec_coeffs_ce0,
        h_vec_coeffs_q0 => h_vec_coeffs_q0,
        c_coeffs_address0 => grp_pack_sig_fu_1184_c_coeffs_address0,
        c_coeffs_ce0 => grp_pack_sig_fu_1184_c_coeffs_ce0,
        c_coeffs_q0 => c_coeffs_q0);

    grp_unpack_sk_fu_1193 : component unpack_sk
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_unpack_sk_fu_1193_ap_start,
        ap_done => grp_unpack_sk_fu_1193_ap_done,
        ap_idle => grp_unpack_sk_fu_1193_ap_idle,
        ap_ready => grp_unpack_sk_fu_1193_ap_ready,
        rho_address0 => grp_unpack_sk_fu_1193_rho_address0,
        rho_ce0 => grp_unpack_sk_fu_1193_rho_ce0,
        rho_we0 => grp_unpack_sk_fu_1193_rho_we0,
        rho_d0 => grp_unpack_sk_fu_1193_rho_d0,
        tr_address0 => grp_unpack_sk_fu_1193_tr_address0,
        tr_ce0 => grp_unpack_sk_fu_1193_tr_ce0,
        tr_we0 => grp_unpack_sk_fu_1193_tr_we0,
        tr_d0 => grp_unpack_sk_fu_1193_tr_d0,
        s1_vec_coeffs_address0 => grp_unpack_sk_fu_1193_s1_vec_coeffs_address0,
        s1_vec_coeffs_ce0 => grp_unpack_sk_fu_1193_s1_vec_coeffs_ce0,
        s1_vec_coeffs_we0 => grp_unpack_sk_fu_1193_s1_vec_coeffs_we0,
        s1_vec_coeffs_d0 => grp_unpack_sk_fu_1193_s1_vec_coeffs_d0,
        s1_vec_coeffs_address1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_address1,
        s1_vec_coeffs_ce1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_ce1,
        s1_vec_coeffs_we1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_we1,
        s1_vec_coeffs_d1 => grp_unpack_sk_fu_1193_s1_vec_coeffs_d1,
        s2_vec_coeffs_address0 => grp_unpack_sk_fu_1193_s2_vec_coeffs_address0,
        s2_vec_coeffs_ce0 => grp_unpack_sk_fu_1193_s2_vec_coeffs_ce0,
        s2_vec_coeffs_we0 => grp_unpack_sk_fu_1193_s2_vec_coeffs_we0,
        s2_vec_coeffs_d0 => grp_unpack_sk_fu_1193_s2_vec_coeffs_d0,
        s2_vec_coeffs_address1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_address1,
        s2_vec_coeffs_ce1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_ce1,
        s2_vec_coeffs_we1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_we1,
        s2_vec_coeffs_d1 => grp_unpack_sk_fu_1193_s2_vec_coeffs_d1,
        t0_vec_coeffs_address0 => grp_unpack_sk_fu_1193_t0_vec_coeffs_address0,
        t0_vec_coeffs_ce0 => grp_unpack_sk_fu_1193_t0_vec_coeffs_ce0,
        t0_vec_coeffs_we0 => grp_unpack_sk_fu_1193_t0_vec_coeffs_we0,
        t0_vec_coeffs_d0 => grp_unpack_sk_fu_1193_t0_vec_coeffs_d0,
        sk_address0 => grp_unpack_sk_fu_1193_sk_address0,
        sk_ce0 => grp_unpack_sk_fu_1193_sk_ce0,
        sk_q0 => sk_q0,
        sk_address1 => grp_unpack_sk_fu_1193_sk_address1,
        sk_ce1 => grp_unpack_sk_fu_1193_sk_ce1,
        sk_q1 => sk_q1);

    grp_invntt_frominvmont_1_fu_1209 : component invntt_frominvmont_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invntt_frominvmont_1_fu_1209_ap_start,
        ap_done => grp_invntt_frominvmont_1_fu_1209_ap_done,
        ap_idle => grp_invntt_frominvmont_1_fu_1209_ap_idle,
        ap_ready => grp_invntt_frominvmont_1_fu_1209_ap_ready,
        p_address0 => grp_invntt_frominvmont_1_fu_1209_p_address0,
        p_ce0 => grp_invntt_frominvmont_1_fu_1209_p_ce0,
        p_we0 => grp_invntt_frominvmont_1_fu_1209_p_we0,
        p_d0 => grp_invntt_frominvmont_1_fu_1209_p_d0,
        p_q0 => grp_invntt_frominvmont_1_fu_1209_p_q0,
        p_address1 => grp_invntt_frominvmont_1_fu_1209_p_address1,
        p_ce1 => grp_invntt_frominvmont_1_fu_1209_p_ce1,
        p_q1 => grp_invntt_frominvmont_1_fu_1209_p_q1,
        p_offset => grp_invntt_frominvmont_1_fu_1209_p_offset);

    grp_invntt_frominvmont_fu_1220 : component invntt_frominvmont
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_invntt_frominvmont_fu_1220_ap_start,
        ap_done => grp_invntt_frominvmont_fu_1220_ap_done,
        ap_idle => grp_invntt_frominvmont_fu_1220_ap_idle,
        ap_ready => grp_invntt_frominvmont_fu_1220_ap_ready,
        p_address0 => grp_invntt_frominvmont_fu_1220_p_address0,
        p_ce0 => grp_invntt_frominvmont_fu_1220_p_ce0,
        p_we0 => grp_invntt_frominvmont_fu_1220_p_we0,
        p_d0 => grp_invntt_frominvmont_fu_1220_p_d0,
        p_q0 => z_vec_coeffs_q0,
        p_address1 => grp_invntt_frominvmont_fu_1220_p_address1,
        p_ce1 => grp_invntt_frominvmont_fu_1220_p_ce1,
        p_q1 => z_vec_coeffs_q1,
        p_offset => i_3_reg_881);

    grp_ntt_fu_1229 : component ntt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_fu_1229_ap_start,
        ap_done => grp_ntt_fu_1229_ap_done,
        ap_idle => grp_ntt_fu_1229_ap_idle,
        ap_ready => grp_ntt_fu_1229_ap_ready,
        p_address0 => grp_ntt_fu_1229_p_address0,
        p_ce0 => grp_ntt_fu_1229_p_ce0,
        p_we0 => grp_ntt_fu_1229_p_we0,
        p_d0 => grp_ntt_fu_1229_p_d0,
        p_q0 => grp_ntt_fu_1229_p_q0,
        p_offset => grp_ntt_fu_1229_p_offset);

    grp_ntt_1_fu_1239 : component ntt_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_1_fu_1239_ap_start,
        ap_done => grp_ntt_1_fu_1239_ap_done,
        ap_idle => grp_ntt_1_fu_1239_ap_idle,
        ap_ready => grp_ntt_1_fu_1239_ap_ready,
        p_address0 => grp_ntt_1_fu_1239_p_address0,
        p_ce0 => grp_ntt_1_fu_1239_p_ce0,
        p_we0 => grp_ntt_1_fu_1239_p_we0,
        p_d0 => grp_ntt_1_fu_1239_p_d0,
        p_q0 => grp_ntt_1_fu_1239_p_q0,
        p_offset => grp_ntt_1_fu_1239_p_offset);

    grp_ntt_2_fu_1249 : component ntt_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ntt_2_fu_1249_ap_start,
        ap_done => grp_ntt_2_fu_1249_ap_done,
        ap_idle => grp_ntt_2_fu_1249_ap_idle,
        ap_ready => grp_ntt_2_fu_1249_ap_ready,
        p_address0 => grp_ntt_2_fu_1249_p_address0,
        p_ce0 => grp_ntt_2_fu_1249_p_ce0,
        p_we0 => grp_ntt_2_fu_1249_p_we0,
        p_d0 => grp_ntt_2_fu_1249_p_d0,
        p_q0 => chat_coeffs_q0);

    grp_polyveck_make_hint_fu_1256 : component polyveck_make_hint
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_make_hint_fu_1256_ap_start,
        ap_done => grp_polyveck_make_hint_fu_1256_ap_done,
        ap_idle => grp_polyveck_make_hint_fu_1256_ap_idle,
        ap_ready => grp_polyveck_make_hint_fu_1256_ap_ready,
        h_vec_coeffs_address0 => grp_polyveck_make_hint_fu_1256_h_vec_coeffs_address0,
        h_vec_coeffs_ce0 => grp_polyveck_make_hint_fu_1256_h_vec_coeffs_ce0,
        h_vec_coeffs_we0 => grp_polyveck_make_hint_fu_1256_h_vec_coeffs_we0,
        h_vec_coeffs_d0 => grp_polyveck_make_hint_fu_1256_h_vec_coeffs_d0,
        u_vec_coeffs_address0 => grp_polyveck_make_hint_fu_1256_u_vec_coeffs_address0,
        u_vec_coeffs_ce0 => grp_polyveck_make_hint_fu_1256_u_vec_coeffs_ce0,
        u_vec_coeffs_q0 => tmp_vec_coeffs_q0,
        v_vec_coeffs_address0 => grp_polyveck_make_hint_fu_1256_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_make_hint_fu_1256_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => ct0_vec_coeffs_q0,
        ap_return => grp_polyveck_make_hint_fu_1256_ap_return);

    grp_rej_gamma1m1_fu_1263 : component rej_gamma1m1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rej_gamma1m1_fu_1263_ap_start,
        ap_done => grp_rej_gamma1m1_fu_1263_ap_done,
        ap_idle => grp_rej_gamma1m1_fu_1263_ap_idle,
        ap_ready => grp_rej_gamma1m1_fu_1263_ap_ready,
        a_address0 => grp_rej_gamma1m1_fu_1263_a_address0,
        a_ce0 => grp_rej_gamma1m1_fu_1263_a_ce0,
        a_we0 => grp_rej_gamma1m1_fu_1263_a_we0,
        a_d0 => grp_rej_gamma1m1_fu_1263_a_d0,
        a_offset => i_1_reg_767,
        a_offset1 => grp_rej_gamma1m1_fu_1263_a_offset1,
        len => grp_rej_gamma1m1_fu_1263_len,
        buf_r_address0 => grp_rej_gamma1m1_fu_1263_buf_r_address0,
        buf_r_ce0 => grp_rej_gamma1m1_fu_1263_buf_r_ce0,
        buf_r_q0 => outbuf_q0,
        buf_r_address1 => grp_rej_gamma1m1_fu_1263_buf_r_address1,
        buf_r_ce1 => grp_rej_gamma1m1_fu_1263_buf_r_ce1,
        buf_r_q1 => outbuf_q1,
        buflen => grp_rej_gamma1m1_fu_1263_buflen,
        ap_return => grp_rej_gamma1m1_fu_1263_ap_return);

    grp_keccak_absorb_1_fu_1278 : component keccak_absorb_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_1_fu_1278_ap_start,
        ap_done => grp_keccak_absorb_1_fu_1278_ap_done,
        ap_idle => grp_keccak_absorb_1_fu_1278_ap_idle,
        ap_ready => grp_keccak_absorb_1_fu_1278_ap_ready,
        s_address0 => grp_keccak_absorb_1_fu_1278_s_address0,
        s_ce0 => grp_keccak_absorb_1_fu_1278_s_ce0,
        s_we0 => grp_keccak_absorb_1_fu_1278_s_we0,
        s_d0 => grp_keccak_absorb_1_fu_1278_s_d0,
        s_q0 => state_q0,
        m_address0 => grp_keccak_absorb_1_fu_1278_m_address0,
        m_ce0 => grp_keccak_absorb_1_fu_1278_m_ce0,
        m_q0 => inbuf_q0);

    grp_polyveck_decompose_fu_1284 : component polyveck_decompose
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_decompose_fu_1284_ap_start,
        ap_done => grp_polyveck_decompose_fu_1284_ap_done,
        ap_idle => grp_polyveck_decompose_fu_1284_ap_idle,
        ap_ready => grp_polyveck_decompose_fu_1284_ap_ready,
        v1_vec_coeffs_address0 => grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0,
        v1_vec_coeffs_ce0 => grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0,
        v1_vec_coeffs_we0 => grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0,
        v1_vec_coeffs_d0 => grp_polyveck_decompose_fu_1284_v1_vec_coeffs_d0,
        v0_vec_coeffs_address0 => grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0,
        v0_vec_coeffs_ce0 => grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0,
        v0_vec_coeffs_we0 => grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0,
        v0_vec_coeffs_d0 => grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0,
        v_vec_coeffs_address0 => grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0);

    grp_polyveck_chknorm_fu_1291 : component polyveck_chknorm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_chknorm_fu_1291_ap_start,
        ap_done => grp_polyveck_chknorm_fu_1291_ap_done,
        ap_idle => grp_polyveck_chknorm_fu_1291_ap_idle,
        ap_ready => grp_polyveck_chknorm_fu_1291_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0,
        v_vec_coeffs_q0 => grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0,
        ap_return => grp_polyveck_chknorm_fu_1291_ap_return);

    grp_polyveck_freeze_fu_1296 : component polyveck_freeze
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_polyveck_freeze_fu_1296_ap_start,
        ap_done => grp_polyveck_freeze_fu_1296_ap_done,
        ap_idle => grp_polyveck_freeze_fu_1296_ap_idle,
        ap_ready => grp_polyveck_freeze_fu_1296_ap_ready,
        v_vec_coeffs_address0 => grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0,
        v_vec_coeffs_ce0 => grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0,
        v_vec_coeffs_we0 => grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0,
        v_vec_coeffs_d0 => grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0,
        v_vec_coeffs_q0 => grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_challenge_fu_1129_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_challenge_fu_1129_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    grp_challenge_fu_1129_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_challenge_fu_1129_ap_ready = ap_const_logic_1)) then 
                    grp_challenge_fu_1129_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_expand_mat_fu_1148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_expand_mat_fu_1148_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_i_fu_1347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_expand_mat_fu_1148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_expand_mat_fu_1148_ap_ready = ap_const_logic_1)) then 
                    grp_expand_mat_fu_1148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_invntt_frominvmont_1_fu_1209_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invntt_frominvmont_1_fu_1209_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((tmp_i12_fu_2312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97)) or ((tmp_i11_fu_2087_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75)))) then 
                    grp_invntt_frominvmont_1_fu_1209_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invntt_frominvmont_1_fu_1209_ap_ready = ap_const_logic_1)) then 
                    grp_invntt_frominvmont_1_fu_1209_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_invntt_frominvmont_fu_1220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_invntt_frominvmont_fu_1220_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i1_fu_1664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then 
                    grp_invntt_frominvmont_fu_1220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_invntt_frominvmont_fu_1220_ap_ready = ap_const_logic_1)) then 
                    grp_invntt_frominvmont_fu_1220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_1_fu_1278_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_1_fu_1278_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_keccak_absorb_1_fu_1278_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_1_fu_1278_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_1_fu_1278_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_absorb_fu_1138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_fu_1138_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond_fu_1315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_keccak_absorb_fu_1138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_fu_1138_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_fu_1138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_1_fu_1156_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_2_fu_1167_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_1_fu_1239_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_1_fu_1239_ap_start_reg <= ap_const_logic_0;
            else
                if ((((tmp_i7_fu_1594_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((tmp_i9_fu_1372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                    grp_ntt_1_fu_1239_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_1_fu_1239_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_1_fu_1239_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_2_fu_1249_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_2_fu_1249_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                    grp_ntt_2_fu_1249_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_2_fu_1249_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_2_fu_1249_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_ntt_fu_1229_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ntt_fu_1229_ap_start_reg <= ap_const_logic_0;
            else
                if ((((tmp_i5_fu_1396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((tmp_i4_fu_1384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
                    grp_ntt_fu_1229_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ntt_fu_1229_ap_ready = ap_const_logic_1)) then 
                    grp_ntt_fu_1229_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pack_sig_fu_1184_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pack_sig_fu_1184_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
                    grp_pack_sig_fu_1184_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pack_sig_fu_1184_ap_ready = ap_const_logic_1)) then 
                    grp_pack_sig_fu_1184_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_chknorm_fu_1291_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_chknorm_fu_1291_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                    grp_polyveck_chknorm_fu_1291_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_chknorm_fu_1291_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_chknorm_fu_1291_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_decompose_fu_1284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_decompose_fu_1284_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    grp_polyveck_decompose_fu_1284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_decompose_fu_1284_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_decompose_fu_1284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_freeze_fu_1296_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_freeze_fu_1296_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state89) or ((tmp_i14_fu_2451_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state110)) or ((tmp_197_fu_2300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((tmp_i10_fu_2168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((tmp_186_fu_1606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
                    grp_polyveck_freeze_fu_1296_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_freeze_fu_1296_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_freeze_fu_1296_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyveck_make_hint_fu_1256_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyveck_make_hint_fu_1256_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                    grp_polyveck_make_hint_fu_1256_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyveck_make_hint_fu_1256_ap_ready = ap_const_logic_1)) then 
                    grp_polyveck_make_hint_fu_1256_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_polyvecl_pointwise_a_fu_1175_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_polyvecl_pointwise_a_fu_1175_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_186_fu_1606_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    grp_polyvecl_pointwise_a_fu_1175_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_polyvecl_pointwise_a_fu_1175_ap_ready = ap_const_logic_1)) then 
                    grp_polyvecl_pointwise_a_fu_1175_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rej_gamma1m1_fu_1263_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rej_gamma1m1_fu_1263_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    grp_rej_gamma1m1_fu_1263_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rej_gamma1m1_fu_1263_ap_ready = ap_const_logic_1)) then 
                    grp_rej_gamma1m1_fu_1263_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_unpack_sk_fu_1193_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_unpack_sk_fu_1193_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_unpack_sk_fu_1193_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_unpack_sk_fu_1193_ap_ready = ap_const_logic_1)) then 
                    grp_unpack_sk_fu_1193_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then 
                i_1_reg_767 <= i_92_reg_2610;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_1_reg_767 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_858_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i7_fu_1594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i_2_reg_858 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then 
                i_2_reg_858 <= i_94_reg_2735;
            end if; 
        end if;
    end process;

    i_3_reg_881_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_invntt_frominvmont_fu_1220_ap_done = ap_const_logic_1))) then 
                i_3_reg_881 <= i_95_reg_2767;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_ntt_2_fu_1249_ap_done = ap_const_logic_1))) then 
                i_3_reg_881 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_reg_995_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_192_fu_1964_p2 = ap_const_lv1_1) and (tmp_i3_fu_1940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                i_4_reg_995 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state81) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then 
                i_4_reg_995 <= i_16_reg_2934;
            end if; 
        end if;
    end process;

    i_5_reg_1040_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then 
                i_5_reg_1040 <= ap_const_lv3_0;
            elsif (((tmp_198_fu_2270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                i_5_reg_1040 <= i_17_reg_3036;
            end if; 
        end if;
    end process;

    i_6_reg_1062_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_196_fu_2243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                i_6_reg_1062 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then 
                i_6_reg_1062 <= i_102_reg_3070;
            end if; 
        end if;
    end process;

    i_i10_reg_1018_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_193_fu_2075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                i_i10_reg_1018 <= ap_const_lv3_0;
            elsif (((tmp_i_i6_fu_2192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                i_i10_reg_1018 <= i_99_reg_2990;
            end if; 
        end if;
    end process;

    i_i11_reg_1007_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_193_fu_2075_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
                i_i11_reg_1007 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                i_i11_reg_1007 <= i_100_reg_2942;
            end if; 
        end if;
    end process;

    i_i12_reg_1074_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_197_fu_2300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                i_i12_reg_1074 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                i_i12_reg_1074 <= i_18_reg_3078;
            end if; 
        end if;
    end process;

    i_i13_reg_1085_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then 
                i_i13_reg_1085 <= ap_const_lv3_0;
            elsif (((tmp_i_i8_fu_2417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
                i_i13_reg_1085 <= i_19_reg_3130;
            end if; 
        end if;
    end process;

    i_i14_reg_1107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i13_fu_2393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                i_i14_reg_1107 <= ap_const_lv3_0;
            elsif (((tmp_i_i9_fu_2475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then 
                i_i14_reg_1107 <= i_103_reg_3166;
            end if; 
        end if;
    end process;

    i_i1_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i8_fu_1745_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_i1_reg_926 <= ap_const_lv3_0;
            elsif (((tmp_i_i3_fu_1831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
                i_i1_reg_926 <= i_96_reg_2854;
            end if; 
        end if;
    end process;

    i_i2_reg_948_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_1807_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                i_i2_reg_948 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_i2_reg_948 <= i_98_reg_2886;
            end if; 
        end if;
    end process;

    i_i3_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i9_fu_1372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_i3_reg_731 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_ntt_fu_1229_ap_done = ap_const_logic_1))) then 
                i_i3_reg_731 <= i_90_reg_2579;
            end if; 
        end if;
    end process;

    i_i4_reg_743_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i4_fu_1384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_i4_reg_743 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_ntt_fu_1229_ap_done = ap_const_logic_1))) then 
                i_i4_reg_743 <= i_91_reg_2587;
            end if; 
        end if;
    end process;

    i_i5_reg_790_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_i5_reg_790 <= i_11_reg_2623;
            elsif (((tmp_s_fu_1414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_i5_reg_790 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_i6_reg_846_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_185_reg_2720 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_i6_reg_846 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_ntt_1_fu_1239_ap_done = ap_const_logic_1))) then 
                i_i6_reg_846 <= i_93_reg_2727;
            end if; 
        end if;
    end process;

    i_i7_reg_904_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_191_fu_1652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                i_i7_reg_904 <= ap_const_lv3_0;
            elsif (((tmp_i_i2_fu_1769_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                i_i7_reg_904 <= i_12_reg_2823;
            end if; 
        end if;
    end process;

    i_i8_reg_719_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_ntt_1_fu_1239_ap_done = ap_const_logic_1))) then 
                i_i8_reg_719 <= i_89_reg_2571;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_expand_mat_fu_1148_ap_done = ap_const_logic_1))) then 
                i_i8_reg_719 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i9_reg_893_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_191_fu_1652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
                i_i9_reg_893 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                i_i9_reg_893 <= i_13_reg_2775;
            end if; 
        end if;
    end process;

    i_i_i1_reg_937_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
                i_i_i1_reg_937 <= i_14_reg_2867;
            elsif (((tmp_i2_fu_1807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                i_i_i1_reg_937 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i2_reg_971_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_171_i_i_fu_2029_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                i_i_i2_reg_971 <= i_15_reg_2903;
            elsif (((tmp_i3_fu_1940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
                i_i_i2_reg_971 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i3_reg_1029_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i_i_i3_reg_1029 <= i_101_reg_3003;
            elsif (((tmp_i10_fu_2168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
                i_i_i3_reg_1029 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i4_reg_1096_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
                i_i_i4_reg_1096 <= i_104_reg_3143;
            elsif (((tmp_i13_fu_2393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                i_i_i4_reg_1096 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i5_reg_1118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                i_i_i5_reg_1118 <= i_105_reg_3179;
            elsif (((tmp_i14_fu_2451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then 
                i_i_i5_reg_1118 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_915_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                i_i_i_reg_915 <= i_97_reg_2836;
            elsif (((tmp_i8_fu_1745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_i_i_reg_915 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_i_reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_i_reg_707 <= i_88_reg_2558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_keccak_squeezeblocks_2_fu_1167_ap_done = ap_const_logic_1))) then 
                i_i_reg_707 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_695 <= i_87_reg_2540;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_unpack_sk_fu_1193_ap_done = ap_const_logic_1))) then 
                i_reg_695 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_1051_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_196_fu_2243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                j_reg_1051 <= ap_const_lv9_0;
            elsif (((tmp_201_fu_2282_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                j_reg_1051 <= j_9_reg_3054;
            end if; 
        end if;
    end process;

    nonce_assign_reg_779_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then 
                nonce_assign_reg_779 <= tmp_172_reg_2615;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                nonce_assign_reg_779 <= nonce_reg_755;
            end if; 
        end if;
    end process;

    nonce_reg_755_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i5_fu_1396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                nonce_reg_755 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done) and ((tmp_202_fu_2508_p2 = ap_const_lv1_1) or (tmp_200_reg_3123 = ap_const_lv1_0) or (tmp_196_reg_3032 = ap_const_lv1_0) or (tmp_195_reg_3023 = ap_const_lv1_0) or (tmp_192_reg_2896 = ap_const_lv1_0)))) then 
                nonce_reg_755 <= nonce_1_reg_2602;
            end if; 
        end if;
    end process;

    p_0_i_i_reg_982_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_171_i_i_fu_2029_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then 
                p_0_i_i_reg_982 <= ap_const_lv1_1;
            elsif (((tmp_i_i4_fu_1970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then 
                p_0_i_i_reg_982 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    ret_i_reg_959_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_1807_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                ret_i_reg_959 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                ret_i_reg_959 <= ret_fu_2055_p3;
            end if; 
        end if;
    end process;

    tmp_173_reg_802_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_1414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                tmp_173_reg_802 <= ap_const_lv8_0;
            elsif (((tmp_176_reg_2663 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                tmp_173_reg_802 <= tmp_174_reg_2648;
            end if; 
        end if;
    end process;

    tmp_177_reg_813_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_176_reg_2663 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                tmp_177_reg_813 <= ap_const_lv8_0;
            elsif (((tmp_179_reg_2682 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                tmp_177_reg_813 <= tmp_178_reg_2667;
            end if; 
        end if;
    end process;

    tmp_180_reg_824_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_179_reg_2682 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                tmp_180_reg_824 <= ap_const_lv8_0;
            elsif (((tmp_182_reg_2701 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                tmp_180_reg_824 <= tmp_181_reg_2686;
            end if; 
        end if;
    end process;

    tmp_183_reg_835_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_182_reg_2701 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                tmp_183_reg_835 <= ap_const_lv8_0;
            elsif (((tmp_185_reg_2720 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                tmp_183_reg_835 <= tmp_184_reg_2705;
            end if; 
        end if;
    end process;

    tmp_187_reg_870_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_190_reg_2755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                tmp_187_reg_870 <= tmp_188_reg_2740;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_challenge_fu_1129_ap_done = ap_const_logic_1))) then 
                tmp_187_reg_870 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                a_assign_5_reg_2967 <= a_assign_5_fu_2125_p2;
                tmp_686_reg_2972 <= tmp_686_fu_2131_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                a_assign_6_reg_3103 <= a_assign_6_fu_2350_p2;
                tmp_687_reg_3108 <= tmp_687_fu_2356_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                a_assign_reg_2800 <= a_assign_fu_1702_p2;
                tmp_675_reg_2805 <= tmp_675_fu_1708_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                a_assign_s_reg_2877 <= a_assign_s_fu_1913_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i9_fu_2475_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                ct0_vec_coeffs_addr_2_reg_3184 <= tmp_683_cast_fu_2496_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_rej_gamma1m1_fu_1263_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                ctr4_reg_2633 <= grp_rej_gamma1m1_fu_1263_ap_return;
                tmp_672_reg_2639 <= grp_rej_gamma1m1_fu_1263_ap_return(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                i_100_reg_2942 <= i_100_fu_2093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                i_101_reg_3003 <= i_101_fu_2198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                i_102_reg_3070 <= i_102_fu_2306_p2;
                    tmp_675_cast_reg_3062(10 downto 8) <= tmp_675_cast_fu_2296_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                i_103_reg_3166 <= i_103_fu_2457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                i_104_reg_3143 <= i_104_fu_2423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                i_105_reg_3179 <= i_105_fu_2481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_11_reg_2623 <= i_11_fu_1438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                i_12_reg_2823 <= i_12_fu_1751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                i_13_reg_2775 <= i_13_fu_1670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                i_14_reg_2867 <= i_14_fu_1837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                i_15_reg_2903 <= i_15_fu_1976_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                i_16_reg_2934 <= i_16_fu_2081_p2;
                    tmp_666_cast_reg_2926(10 downto 8) <= tmp_666_cast_fu_2071_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                i_17_reg_3036 <= i_17_fu_2249_p2;
                tmp_196_reg_3032 <= tmp_196_fu_2243_p2;
                    tmp_672_cast_reg_3027(10 downto 8) <= tmp_672_cast_fu_2239_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                i_18_reg_3078 <= i_18_fu_2318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                i_19_reg_3130 <= i_19_fu_2399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_87_reg_2540 <= i_87_fu_1320_p2;
                tmp_reg_2532 <= tmp_fu_1311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_88_reg_2558 <= i_88_fu_1353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_89_reg_2571 <= i_89_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_90_reg_2579 <= i_90_fu_1390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_91_reg_2587 <= i_91_fu_1402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_92_reg_2610 <= i_92_fu_1420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_93_reg_2727 <= i_93_fu_1600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_94_reg_2735 <= i_94_fu_1612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                i_95_reg_2767 <= i_95_fu_1658_p2;
                    tmp_653_cast_reg_2759(10 downto 8) <= tmp_653_cast_fu_1648_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                i_96_reg_2854 <= i_96_fu_1813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                i_97_reg_2836 <= i_97_fu_1775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                i_98_reg_2886 <= i_98_fu_1946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                i_99_reg_2990 <= i_99_fu_2174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                inlen_assign_reg_2550 <= inlen_assign_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                j_9_reg_3054 <= j_9_fu_2276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                nonce_1_reg_2602 <= nonce_1_fu_1408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state56))) then
                reg_1307 <= chat_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                s1_vec_coeffs_load_reg_2795 <= s1_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                s2_vec_coeffs_load_reg_2962 <= s2_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                t0_vec_coeffs_load_reg_3098 <= t0_vec_coeffs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                t_39_reg_2815 <= t_39_fu_1720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                t_45_reg_2977 <= t_45_fu_2135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                t_46_reg_2982 <= t_46_fu_2143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                t_48_reg_3113 <= t_48_fu_2360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                t_49_reg_3118 <= t_49_fu_2368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                t_reg_2810 <= t_fu_1712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    tmp_156_i_cast_reg_2643(8 downto 0) <= tmp_156_i_cast_fu_1489_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                tmp_158_i_i_reg_3018 <= tmp_158_i_i_fu_2225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_1414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_172_reg_2615 <= tmp_172_fu_1426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_174_reg_2648 <= tmp_174_fu_1494_p2;
                    tmp_175_reg_2653(7 downto 0) <= tmp_175_fu_1500_p1(7 downto 0);
                tmp_176_reg_2663 <= tmp_176_fu_1505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_178_reg_2667 <= tmp_178_fu_1516_p2;
                tmp_179_reg_2682 <= tmp_179_fu_1531_p2;
                    tmp_620_reg_2672(7 downto 0) <= tmp_620_fu_1522_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_181_reg_2686 <= tmp_181_fu_1542_p2;
                tmp_182_reg_2701 <= tmp_182_fu_1557_p2;
                    tmp_621_reg_2691(7 downto 0) <= tmp_621_fu_1548_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_184_reg_2705 <= tmp_184_fu_1568_p2;
                tmp_185_reg_2720 <= tmp_185_fu_1583_p2;
                    tmp_622_reg_2710(7 downto 0) <= tmp_622_fu_1574_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                tmp_188_reg_2740 <= tmp_188_fu_1618_p2;
                    tmp_189_reg_2745(7 downto 0) <= tmp_189_fu_1624_p1(7 downto 0);
                tmp_190_reg_2755 <= tmp_190_fu_1629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i3_fu_1940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                tmp_192_reg_2896 <= tmp_192_fu_1964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                tmp_195_reg_3023 <= grp_fu_1301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                tmp_200_reg_3123 <= grp_fu_1301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i8_fu_1745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    tmp_655_cast_reg_2828(10 downto 8) <= tmp_655_cast_fu_1765_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i1_fu_1664_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    tmp_656_cast_reg_2780(11 downto 0) <= tmp_656_cast_fu_1690_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_1807_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    tmp_658_cast_reg_2859(10 downto 8) <= tmp_658_cast_fu_1827_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i3_fu_1940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    tmp_661_cast_reg_2891(10 downto 8) <= tmp_661_cast_fu_1960_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i10_fu_2168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    tmp_669_cast_reg_2995(10 downto 8) <= tmp_669_cast_fu_2188_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i11_fu_2087_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    tmp_670_cast_reg_2947(11 downto 0) <= tmp_670_cast_fu_2113_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i12_fu_2312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    tmp_677_cast_reg_3083(11 downto 0) <= tmp_677_cast_fu_2338_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i13_fu_2393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    tmp_679_cast_reg_3135(10 downto 8) <= tmp_679_cast_fu_2413_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i14_fu_2451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    tmp_681_cast_reg_3171(10 downto 8) <= tmp_681_cast_fu_2471_p1(10 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i8_fu_2417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    tmp_682_cast_reg_3148(11 downto 0) <= tmp_682_cast_fu_2438_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i6_fu_2192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                wcs2_vec_coeffs_addr_1_reg_3013 <= tmp_673_cast_fu_2213_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i2_fu_1769_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                z_vec_coeffs_addr_2_reg_2846 <= tmp_659_cast_fu_1790_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_i3_fu_1831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                z_vec_coeffs_addr_3_reg_2872 <= tmp_662_cast_fu_1852_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                z_vec_coeffs_load_3_reg_2913 <= z_vec_coeffs_q0;
            end if;
        end if;
    end process;
    tmp_156_i_cast_reg_2643(9) <= '0';
    tmp_175_reg_2653(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_620_reg_2672(63 downto 8) <= "00000000000000000000000000000000000000000000000000000001";
    tmp_621_reg_2691(63 downto 8) <= "00000000000000000000000000000000000000000000000000000010";
    tmp_622_reg_2710(63 downto 8) <= "00000000000000000000000000000000000000000000000000000011";
    tmp_189_reg_2745(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_653_cast_reg_2759(7 downto 0) <= "00000000";
    tmp_653_cast_reg_2759(11) <= '0';
    tmp_656_cast_reg_2780(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_655_cast_reg_2828(7 downto 0) <= "00000000";
    tmp_655_cast_reg_2828(11) <= '0';
    tmp_658_cast_reg_2859(7 downto 0) <= "00000000";
    tmp_658_cast_reg_2859(11) <= '0';
    tmp_661_cast_reg_2891(7 downto 0) <= "00000000";
    tmp_661_cast_reg_2891(11) <= '0';
    tmp_666_cast_reg_2926(7 downto 0) <= "00000000";
    tmp_666_cast_reg_2926(11) <= '0';
    tmp_670_cast_reg_2947(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_669_cast_reg_2995(7 downto 0) <= "00000000";
    tmp_669_cast_reg_2995(11) <= '0';
    tmp_672_cast_reg_3027(7 downto 0) <= "00000000";
    tmp_672_cast_reg_3027(11) <= '0';
    tmp_675_cast_reg_3062(7 downto 0) <= "00000000";
    tmp_675_cast_reg_3062(11) <= '0';
    tmp_677_cast_reg_3083(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_679_cast_reg_3135(7 downto 0) <= "00000000";
    tmp_679_cast_reg_3135(11) <= '0';
    tmp_682_cast_reg_3148(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_681_cast_reg_3171(7 downto 0) <= "00000000";
    tmp_681_cast_reg_3171(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_unpack_sk_fu_1193_ap_done, ap_CS_fsm_state3, exitcond_fu_1315_p2, ap_CS_fsm_state8, exitcond_i_fu_1347_p2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, tmp_i5_fu_1396_p2, ap_CS_fsm_state18, tmp_s_fu_1414_p2, ap_CS_fsm_state19, tmp_i6_fu_1432_p2, ap_CS_fsm_state26, grp_rej_gamma1m1_fu_1263_ap_done, tmp_672_fu_1476_p3, tmp_176_reg_2663, tmp_179_reg_2682, tmp_182_reg_2701, tmp_185_reg_2720, ap_CS_fsm_state39, ap_CS_fsm_state41, tmp_190_reg_2755, ap_CS_fsm_state54, ap_CS_fsm_state55, tmp_i1_fu_1664_p2, ap_CS_fsm_state62, tmp_i8_fu_1745_p2, ap_CS_fsm_state63, tmp_i_i2_fu_1769_p2, ap_CS_fsm_state65, tmp_i2_fu_1807_p2, ap_CS_fsm_state66, tmp_i_i3_fu_1831_p2, ap_CS_fsm_state69, tmp_i3_fu_1940_p2, tmp_192_fu_1964_p2, tmp_192_reg_2896, ap_CS_fsm_state70, tmp_i_i4_fu_1970_p2, ap_CS_fsm_state74, ap_CS_fsm_state75, tmp_i11_fu_2087_p2, ap_CS_fsm_state82, tmp_i10_fu_2168_p2, ap_CS_fsm_state83, tmp_i_i6_fu_2192_p2, grp_fu_1301_p2, tmp_195_reg_3023, ap_CS_fsm_state92, grp_polyveck_chknorm_fu_1291_ap_done, ap_CS_fsm_state93, tmp_196_fu_2243_p2, tmp_196_reg_3032, ap_CS_fsm_state94, ap_CS_fsm_state96, ap_CS_fsm_state97, tmp_i12_fu_2312_p2, tmp_200_reg_3123, ap_CS_fsm_state106, ap_CS_fsm_state107, tmp_i13_fu_2393_p2, ap_CS_fsm_state108, tmp_i_i8_fu_2417_p2, ap_CS_fsm_state110, tmp_i14_fu_2451_p2, ap_CS_fsm_state111, tmp_i_i9_fu_2475_p2, grp_challenge_fu_1129_ap_done, grp_keccak_absorb_fu_1138_ap_done, grp_expand_mat_fu_1148_ap_done, grp_keccak_squeezeblocks_1_fu_1156_ap_done, grp_keccak_squeezeblocks_2_fu_1167_ap_done, grp_polyvecl_pointwise_a_fu_1175_ap_done, grp_pack_sig_fu_1184_ap_done, grp_invntt_frominvmont_1_fu_1209_ap_done, grp_invntt_frominvmont_fu_1220_ap_done, grp_ntt_fu_1229_ap_done, grp_ntt_1_fu_1239_ap_done, grp_ntt_2_fu_1249_ap_done, grp_keccak_absorb_1_fu_1278_ap_done, grp_polyveck_decompose_fu_1284_ap_done, grp_polyveck_freeze_fu_1296_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, tmp_i9_fu_1372_p2, ap_CS_fsm_state16, tmp_i4_fu_1384_p2, ap_CS_fsm_state115, ap_block_state115_on_subcall_done, tmp_202_fu_2508_p2, ap_CS_fsm_state30, ap_block_state30_on_subcall_done, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state44, tmp_i7_fu_1594_p2, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_CS_fsm_state53, ap_CS_fsm_state61, tmp_191_fu_1652_p2, ap_CS_fsm_state72, tmp_171_i_i_fu_2029_p2, ap_CS_fsm_state81, tmp_193_fu_2075_p2, tmp_198_fu_2270_p2, ap_CS_fsm_state95, tmp_201_fu_2282_p2, ap_CS_fsm_state103, tmp_197_fu_2300_p2, ap_CS_fsm_state5, ap_CS_fsm_state24, ap_CS_fsm_state28, tmp_186_fu_1606_p2, ap_CS_fsm_state42, ap_CS_fsm_state117, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state88, ap_CS_fsm_state45, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state104, ap_CS_fsm_state113)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_unpack_sk_fu_1193_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_1315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_keccak_absorb_fu_1138_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_keccak_squeezeblocks_2_fu_1167_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond_i_fu_1347_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_expand_mat_fu_1148_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_i9_fu_1372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_ntt_1_fu_1239_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((tmp_i4_fu_1384_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_ntt_fu_1229_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((tmp_i5_fu_1396_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_ntt_fu_1229_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((tmp_s_fu_1414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((tmp_i6_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_keccak_absorb_1_fu_1278_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_keccak_squeezeblocks_1_fu_1156_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((grp_rej_gamma1m1_fu_1263_ap_done = ap_const_logic_1) and (tmp_672_fu_1476_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                elsif (((grp_rej_gamma1m1_fu_1263_ap_done = ap_const_logic_1) and (tmp_672_fu_1476_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_keccak_squeezeblocks_1_fu_1156_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((tmp_176_reg_2663 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((tmp_179_reg_2682 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((tmp_182_reg_2701 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((tmp_185_reg_2720 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state39 => 
                if (((tmp_i7_fu_1594_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_ntt_1_fu_1239_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((tmp_186_fu_1606_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_polyvecl_pointwise_a_fu_1175_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_polyveck_freeze_fu_1296_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_polyveck_decompose_fu_1284_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (grp_challenge_fu_1129_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((tmp_190_reg_2755 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (grp_ntt_2_fu_1249_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((tmp_191_fu_1652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                if (((tmp_i1_fu_1664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state55))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (grp_invntt_frominvmont_fu_1220_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((tmp_i8_fu_1745_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                if (((tmp_i_i2_fu_1769_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state65 => 
                if (((tmp_i2_fu_1807_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                if (((tmp_i_i3_fu_1831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state69 => 
                if (((tmp_192_fu_1964_p2 = ap_const_lv1_1) and (tmp_i3_fu_1940_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                elsif (((tmp_i3_fu_1940_p2 = ap_const_lv1_1) and (tmp_192_fu_1964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state69))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state70 => 
                if (((tmp_i_i4_fu_1970_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((tmp_171_i_i_fu_2029_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state72))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state74 => 
                if (((tmp_193_fu_2075_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                if (((tmp_i11_fu_2087_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((tmp_i10_fu_2168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state83 => 
                if (((tmp_i_i6_fu_2192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (grp_polyveck_freeze_fu_1296_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (grp_polyveck_decompose_fu_1284_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state90) and (grp_polyveck_freeze_fu_1296_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                elsif (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((tmp_196_fu_2243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state94 => 
                if (((tmp_198_fu_2270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                if (((tmp_201_fu_2282_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state96 => 
                if (((tmp_197_fu_2300_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state97 => 
                if (((tmp_i12_fu_2312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_invntt_frominvmont_1_fu_1209_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (grp_polyveck_freeze_fu_1296_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                elsif (((grp_polyveck_chknorm_fu_1291_ap_done = ap_const_logic_1) and (grp_fu_1301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state106))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                if (((tmp_i13_fu_2393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when ap_ST_fsm_state108 => 
                if (((tmp_i_i8_fu_2417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state110 => 
                if (((tmp_i14_fu_2451_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state111 => 
                if (((tmp_i_i9_fu_2475_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state111))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state113 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state113) and (grp_polyveck_freeze_fu_1296_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state114;
                else
                    ap_NS_fsm <= ap_ST_fsm_state113;
                end if;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done) and ((tmp_202_fu_2508_p2 = ap_const_lv1_1) or (tmp_200_reg_3123 = ap_const_lv1_0) or (tmp_196_reg_3032 = ap_const_lv1_0) or (tmp_195_reg_3023 = ap_const_lv1_0) or (tmp_192_reg_2896 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((tmp_200_reg_3123 = ap_const_lv1_1) and (tmp_196_reg_3032 = ap_const_lv1_1) and (tmp_195_reg_3023 = ap_const_lv1_1) and (tmp_192_reg_2896 = ap_const_lv1_1) and (tmp_202_fu_2508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (grp_pack_sig_fu_1184_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_21_cast_fu_1875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_630_fu_1865_p4),24));
    a_assign_4_fu_1934_p2 <= std_logic_vector(unsigned(a_assign_s_reg_2877) + unsigned(tmp_i_i_i_cast_cast_fu_1926_p3));
    a_assign_5_fu_2125_p0 <= a_assign_5_fu_2125_p00(32 - 1 downto 0);
    a_assign_5_fu_2125_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s2_vec_coeffs_load_reg_2962),64));
    a_assign_5_fu_2125_p1 <= a_assign_5_fu_2125_p10(32 - 1 downto 0);
    a_assign_5_fu_2125_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1307),64));
    a_assign_5_fu_2125_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_5_fu_2125_p0) * unsigned(a_assign_5_fu_2125_p1), 64));
    a_assign_6_fu_2350_p0 <= a_assign_6_fu_2350_p00(32 - 1 downto 0);
    a_assign_6_fu_2350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t0_vec_coeffs_load_reg_3098),64));
    a_assign_6_fu_2350_p1 <= a_assign_6_fu_2350_p10(32 - 1 downto 0);
    a_assign_6_fu_2350_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1307),64));
    a_assign_6_fu_2350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_6_fu_2350_p0) * unsigned(a_assign_6_fu_2350_p1), 64));
    a_assign_fu_1702_p0 <= a_assign_fu_1702_p00(32 - 1 downto 0);
    a_assign_fu_1702_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s1_vec_coeffs_load_reg_2795),64));
    a_assign_fu_1702_p1 <= a_assign_fu_1702_p10(32 - 1 downto 0);
    a_assign_fu_1702_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_1307),64));
    a_assign_fu_1702_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_assign_fu_1702_p0) * unsigned(a_assign_fu_1702_p1), 64));
    a_assign_s_fu_1913_p2 <= std_logic_vector(unsigned(tmp1_fu_1905_p3) + unsigned(tmp_42_i_i_i_i_cast_fu_1895_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);

    ap_block_state115_on_subcall_done_assign_proc : process(grp_polyveck_make_hint_fu_1256_ap_done, ap_predicate_op705_call_state115)
    begin
                ap_block_state115_on_subcall_done <= ((grp_polyveck_make_hint_fu_1256_ap_done = ap_const_logic_0) and (ap_predicate_op705_call_state115 = ap_const_boolean_1));
    end process;


    ap_block_state30_on_subcall_done_assign_proc : process(grp_rej_gamma1m1_fu_1263_ap_done, tmp_672_reg_2639)
    begin
                ap_block_state30_on_subcall_done <= ((grp_rej_gamma1m1_fu_1263_ap_done = ap_const_logic_0) and (tmp_672_reg_2639 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(grp_pack_sig_fu_1184_ap_done, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) and (grp_pack_sig_fu_1184_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op705_call_state115_assign_proc : process(tmp_192_reg_2896, tmp_195_reg_3023, tmp_196_reg_3032, tmp_200_reg_3123)
    begin
                ap_predicate_op705_call_state115 <= ((tmp_200_reg_3123 = ap_const_lv1_1) and (tmp_196_reg_3032 = ap_const_lv1_1) and (tmp_195_reg_3023 = ap_const_lv1_1) and (tmp_192_reg_2896 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(grp_pack_sig_fu_1184_ap_done, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) and (grp_pack_sig_fu_1184_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    c_coeffs_address0_assign_proc : process(ap_CS_fsm_state50, tmp_189_fu_1624_p1, grp_challenge_fu_1129_c_coeffs_address0, grp_pack_sig_fu_1184_c_coeffs_address0, ap_CS_fsm_state49, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c_coeffs_address0 <= tmp_189_fu_1624_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            c_coeffs_address0 <= grp_pack_sig_fu_1184_c_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            c_coeffs_address0 <= grp_challenge_fu_1129_c_coeffs_address0;
        else 
            c_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    c_coeffs_ce0_assign_proc : process(ap_CS_fsm_state50, grp_challenge_fu_1129_c_coeffs_ce0, grp_pack_sig_fu_1184_c_coeffs_ce0, ap_CS_fsm_state49, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            c_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            c_coeffs_ce0 <= grp_pack_sig_fu_1184_c_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            c_coeffs_ce0 <= grp_challenge_fu_1129_c_coeffs_ce0;
        else 
            c_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_coeffs_we0_assign_proc : process(grp_challenge_fu_1129_c_coeffs_we0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            c_coeffs_we0 <= grp_challenge_fu_1129_c_coeffs_we0;
        else 
            c_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    chat_coeffs_address0_assign_proc : process(tmp_189_reg_2745, ap_CS_fsm_state55, ap_CS_fsm_state75, ap_CS_fsm_state97, grp_ntt_2_fu_1249_p_address0, ap_CS_fsm_state51, ap_CS_fsm_state53, tmp_i9_101_fu_1676_p1, tmp_i3_110_fu_2099_p1, tmp_i4_117_fu_2324_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            chat_coeffs_address0 <= tmp_i4_117_fu_2324_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            chat_coeffs_address0 <= tmp_i3_110_fu_2099_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            chat_coeffs_address0 <= tmp_i9_101_fu_1676_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            chat_coeffs_address0 <= tmp_189_reg_2745(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            chat_coeffs_address0 <= grp_ntt_2_fu_1249_p_address0;
        else 
            chat_coeffs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    chat_coeffs_ce0_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state75, ap_CS_fsm_state97, grp_ntt_2_fu_1249_p_ce0, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            chat_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            chat_coeffs_ce0 <= grp_ntt_2_fu_1249_p_ce0;
        else 
            chat_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    chat_coeffs_d0_assign_proc : process(grp_ntt_2_fu_1249_p_d0, ap_CS_fsm_state51, ap_CS_fsm_state53, extLd_fu_1635_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            chat_coeffs_d0 <= extLd_fu_1635_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            chat_coeffs_d0 <= grp_ntt_2_fu_1249_p_d0;
        else 
            chat_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    chat_coeffs_we0_assign_proc : process(grp_ntt_2_fu_1249_p_we0, ap_CS_fsm_state51, ap_CS_fsm_state53)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            chat_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            chat_coeffs_we0 <= grp_ntt_2_fu_1249_p_we0;
        else 
            chat_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ct0_vec_coeffs_address0_assign_proc : process(tmp_677_cast_reg_3083, ap_CS_fsm_state106, ap_CS_fsm_state108, tmp_682_cast_fu_2438_p1, ap_CS_fsm_state111, ct0_vec_coeffs_addr_2_reg_3184, grp_invntt_frominvmont_1_fu_1209_p_address0, grp_polyveck_make_hint_fu_1256_v_vec_coeffs_address0, grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state103, ap_CS_fsm_state102, ap_CS_fsm_state112, ap_CS_fsm_state104, tmp_683_cast_fu_2496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ct0_vec_coeffs_address0 <= ct0_vec_coeffs_addr_2_reg_3184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            ct0_vec_coeffs_address0 <= tmp_683_cast_fu_2496_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            ct0_vec_coeffs_address0 <= tmp_682_cast_fu_2438_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ct0_vec_coeffs_address0 <= tmp_677_cast_reg_3083(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            ct0_vec_coeffs_address0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            ct0_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            ct0_vec_coeffs_address0 <= grp_polyveck_make_hint_fu_1256_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            ct0_vec_coeffs_address0 <= grp_invntt_frominvmont_1_fu_1209_p_address0;
        else 
            ct0_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    ct0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state106, ap_CS_fsm_state108, ap_CS_fsm_state111, grp_invntt_frominvmont_1_fu_1209_p_ce0, grp_polyveck_make_hint_fu_1256_v_vec_coeffs_ce0, grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state103, ap_CS_fsm_state102, ap_CS_fsm_state112, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            ct0_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            ct0_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            ct0_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            ct0_vec_coeffs_ce0 <= grp_polyveck_make_hint_fu_1256_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            ct0_vec_coeffs_ce0 <= grp_invntt_frominvmont_1_fu_1209_p_ce0;
        else 
            ct0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct0_vec_coeffs_ce1_assign_proc : process(grp_invntt_frominvmont_1_fu_1209_p_ce1, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            ct0_vec_coeffs_ce1 <= grp_invntt_frominvmont_1_fu_1209_p_ce1;
        else 
            ct0_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ct0_vec_coeffs_d0_assign_proc : process(grp_invntt_frominvmont_1_fu_1209_p_d0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0, ap_CS_fsm_state103, ap_CS_fsm_state102, ap_CS_fsm_state112, ap_CS_fsm_state104, tmp_168_i_i_fu_2501_p2, t_50_fu_2377_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            ct0_vec_coeffs_d0 <= tmp_168_i_i_fu_2501_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            ct0_vec_coeffs_d0 <= t_50_fu_2377_p2(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            ct0_vec_coeffs_d0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            ct0_vec_coeffs_d0 <= grp_invntt_frominvmont_1_fu_1209_p_d0;
        else 
            ct0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct0_vec_coeffs_we0_assign_proc : process(grp_invntt_frominvmont_1_fu_1209_p_we0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0, ap_CS_fsm_state103, ap_CS_fsm_state102, ap_CS_fsm_state112, ap_CS_fsm_state104)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            ct0_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            ct0_vec_coeffs_we0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            ct0_vec_coeffs_we0 <= grp_invntt_frominvmont_1_fu_1209_p_we0;
        else 
            ct0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_1315_p2 <= "1" when (i_reg_695 = mlen) else "0";
    exitcond_i_fu_1347_p2 <= "1" when (i_i_reg_707 = ap_const_lv6_30) else "0";
    extLd1_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_vec_coeffs_q0),32));
    extLd2_fu_1563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_vec_coeffs_q0),32));
    extLd3_fu_1589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_vec_coeffs_q0),32));
    extLd4_fu_1796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_vec_coeffs_q0),32));
    extLd7_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_vec_coeffs_q0),32));
    extLd_fu_1635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_coeffs_q0),32));
    grp_challenge_fu_1129_ap_start <= grp_challenge_fu_1129_ap_start_reg;
    grp_expand_mat_fu_1148_ap_start <= grp_expand_mat_fu_1148_ap_start_reg;
    grp_fu_1301_p2 <= "1" when (grp_polyveck_chknorm_fu_1291_ap_return = ap_const_lv32_0) else "0";
    grp_invntt_frominvmont_1_fu_1209_ap_start <= grp_invntt_frominvmont_1_fu_1209_ap_start_reg;

    grp_invntt_frominvmont_1_fu_1209_p_offset_assign_proc : process(i_2_reg_858, ap_CS_fsm_state44, i_4_reg_995, ap_CS_fsm_state81, i_6_reg_1062, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_invntt_frominvmont_1_fu_1209_p_offset <= i_6_reg_1062;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_invntt_frominvmont_1_fu_1209_p_offset <= i_4_reg_995;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_invntt_frominvmont_1_fu_1209_p_offset <= i_2_reg_858;
        else 
            grp_invntt_frominvmont_1_fu_1209_p_offset <= "XXX";
        end if; 
    end process;


    grp_invntt_frominvmont_1_fu_1209_p_q0_assign_proc : process(w_vec_coeffs_q0, wcs2_vec_coeffs_q0, ct0_vec_coeffs_q0, ap_CS_fsm_state44, ap_CS_fsm_state81, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q0 <= ct0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q0 <= wcs2_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q0 <= w_vec_coeffs_q0;
        else 
            grp_invntt_frominvmont_1_fu_1209_p_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_invntt_frominvmont_1_fu_1209_p_q1_assign_proc : process(w_vec_coeffs_q1, wcs2_vec_coeffs_q1, ct0_vec_coeffs_q1, ap_CS_fsm_state44, ap_CS_fsm_state81, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q1 <= ct0_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q1 <= wcs2_vec_coeffs_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_invntt_frominvmont_1_fu_1209_p_q1 <= w_vec_coeffs_q1;
        else 
            grp_invntt_frominvmont_1_fu_1209_p_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_invntt_frominvmont_fu_1220_ap_start <= grp_invntt_frominvmont_fu_1220_ap_start_reg;
    grp_keccak_absorb_1_fu_1278_ap_start <= grp_keccak_absorb_1_fu_1278_ap_start_reg;
    grp_keccak_absorb_fu_1138_ap_start <= grp_keccak_absorb_fu_1138_ap_start_reg;
    grp_keccak_squeezeblocks_1_fu_1156_ap_start <= grp_keccak_squeezeblocks_1_fu_1156_ap_start_reg;

    grp_keccak_squeezeblocks_1_fu_1156_nblocks_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_keccak_squeezeblocks_1_fu_1156_nblocks <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_keccak_squeezeblocks_1_fu_1156_nblocks <= ap_const_lv4_5;
        else 
            grp_keccak_squeezeblocks_1_fu_1156_nblocks <= "XXXX";
        end if; 
    end process;

    grp_keccak_squeezeblocks_2_fu_1167_ap_start <= grp_keccak_squeezeblocks_2_fu_1167_ap_start_reg;
    grp_ntt_1_fu_1239_ap_start <= grp_ntt_1_fu_1239_ap_start_reg;

    grp_ntt_1_fu_1239_p_offset_assign_proc : process(i_i8_reg_719, ap_CS_fsm_state12, i_i6_reg_846, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_ntt_1_fu_1239_p_offset <= i_i6_reg_846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_ntt_1_fu_1239_p_offset <= i_i8_reg_719;
        else 
            grp_ntt_1_fu_1239_p_offset <= "XXX";
        end if; 
    end process;


    grp_ntt_1_fu_1239_p_q0_assign_proc : process(s1_vec_coeffs_q0, yhat_vec_coeffs_q0, ap_CS_fsm_state12, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_ntt_1_fu_1239_p_q0 <= yhat_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_ntt_1_fu_1239_p_q0 <= s1_vec_coeffs_q0;
        else 
            grp_ntt_1_fu_1239_p_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_ntt_2_fu_1249_ap_start <= grp_ntt_2_fu_1249_ap_start_reg;
    grp_ntt_fu_1229_ap_start <= grp_ntt_fu_1229_ap_start_reg;

    grp_ntt_fu_1229_p_offset_assign_proc : process(i_i3_reg_731, ap_CS_fsm_state14, i_i4_reg_743, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_ntt_fu_1229_p_offset <= i_i4_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_ntt_fu_1229_p_offset <= i_i3_reg_731;
        else 
            grp_ntt_fu_1229_p_offset <= "XXX";
        end if; 
    end process;


    grp_ntt_fu_1229_p_q0_assign_proc : process(s2_vec_coeffs_q0, t0_vec_coeffs_q0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_ntt_fu_1229_p_q0 <= t0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_ntt_fu_1229_p_q0 <= s2_vec_coeffs_q0;
        else 
            grp_ntt_fu_1229_p_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pack_sig_fu_1184_ap_start <= grp_pack_sig_fu_1184_ap_start_reg;
    grp_polyveck_chknorm_fu_1291_ap_start <= grp_polyveck_chknorm_fu_1291_ap_start_reg;

    grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state106, wcs20_vec_coeffs_q0, ct0_vec_coeffs_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0 <= ct0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0 <= wcs20_vec_coeffs_q0;
        else 
            grp_polyveck_chknorm_fu_1291_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_decompose_fu_1284_ap_start <= grp_polyveck_decompose_fu_1284_ap_start_reg;

    grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0_assign_proc : process(w_vec_coeffs_q0, wcs2_vec_coeffs_q0, ap_CS_fsm_state47, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0 <= wcs2_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0 <= w_vec_coeffs_q0;
        else 
            grp_polyveck_decompose_fu_1284_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_freeze_fu_1296_ap_start <= grp_polyveck_freeze_fu_1296_ap_start_reg;

    grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0_assign_proc : process(w_vec_coeffs_q0, wcs2_vec_coeffs_q0, wcs20_vec_coeffs_q0, ct0_vec_coeffs_q0, tmp_vec_coeffs_q0, ap_CS_fsm_state45, ap_CS_fsm_state86, ap_CS_fsm_state90, ap_CS_fsm_state104, ap_CS_fsm_state113)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= tmp_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= ct0_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= wcs20_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= wcs2_vec_coeffs_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= w_vec_coeffs_q0;
        else 
            grp_polyveck_freeze_fu_1296_v_vec_coeffs_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_polyveck_make_hint_fu_1256_ap_start <= grp_polyveck_make_hint_fu_1256_ap_start_reg;
    grp_polyvecl_pointwise_a_fu_1175_ap_start <= grp_polyvecl_pointwise_a_fu_1175_ap_start_reg;

    grp_rej_gamma1m1_fu_1263_a_offset1_assign_proc : process(ctr4_reg_2633, ap_CS_fsm_state26, tmp_672_reg_2639, ap_CS_fsm_state30)
    begin
        if (((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_rej_gamma1m1_fu_1263_a_offset1 <= ctr4_reg_2633;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_rej_gamma1m1_fu_1263_a_offset1 <= ap_const_lv9_0;
        else 
            grp_rej_gamma1m1_fu_1263_a_offset1 <= "XXXXXXXXX";
        end if; 
    end process;

    grp_rej_gamma1m1_fu_1263_ap_start <= grp_rej_gamma1m1_fu_1263_ap_start_reg;

    grp_rej_gamma1m1_fu_1263_buflen_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, ap_CS_fsm_state30)
    begin
        if (((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_rej_gamma1m1_fu_1263_buflen <= ap_const_lv11_88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_rej_gamma1m1_fu_1263_buflen <= ap_const_lv11_2A8;
        else 
            grp_rej_gamma1m1_fu_1263_buflen <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_rej_gamma1m1_fu_1263_len_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, tmp_156_i_cast_reg_2643, ap_CS_fsm_state30)
    begin
        if (((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_rej_gamma1m1_fu_1263_len <= tmp_156_i_cast_reg_2643;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_rej_gamma1m1_fu_1263_len <= ap_const_lv10_100;
        else 
            grp_rej_gamma1m1_fu_1263_len <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_unpack_sk_fu_1193_ap_start <= grp_unpack_sk_fu_1193_ap_start_reg;

    h_vec_coeffs_address0_assign_proc : process(grp_pack_sig_fu_1184_h_vec_coeffs_address0, grp_polyveck_make_hint_fu_1256_h_vec_coeffs_address0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            h_vec_coeffs_address0 <= grp_polyveck_make_hint_fu_1256_h_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            h_vec_coeffs_address0 <= grp_pack_sig_fu_1184_h_vec_coeffs_address0;
        else 
            h_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    h_vec_coeffs_ce0_assign_proc : process(grp_pack_sig_fu_1184_h_vec_coeffs_ce0, grp_polyveck_make_hint_fu_1256_h_vec_coeffs_ce0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            h_vec_coeffs_ce0 <= grp_polyveck_make_hint_fu_1256_h_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            h_vec_coeffs_ce0 <= grp_pack_sig_fu_1184_h_vec_coeffs_ce0;
        else 
            h_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_vec_coeffs_we0_assign_proc : process(grp_polyveck_make_hint_fu_1256_h_vec_coeffs_we0, ap_CS_fsm_state115, ap_predicate_op705_call_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            h_vec_coeffs_we0 <= grp_polyveck_make_hint_fu_1256_h_vec_coeffs_we0;
        else 
            h_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_100_fu_2093_p2 <= std_logic_vector(unsigned(i_i11_reg_1007) + unsigned(ap_const_lv9_1));
    i_101_fu_2198_p2 <= std_logic_vector(unsigned(i_i_i3_reg_1029) + unsigned(ap_const_lv9_1));
    i_102_fu_2306_p2 <= std_logic_vector(unsigned(i_6_reg_1062) + unsigned(ap_const_lv3_1));
    i_103_fu_2457_p2 <= std_logic_vector(unsigned(i_i14_reg_1107) + unsigned(ap_const_lv3_1));
    i_104_fu_2423_p2 <= std_logic_vector(unsigned(i_i_i4_reg_1096) + unsigned(ap_const_lv9_1));
    i_105_fu_2481_p2 <= std_logic_vector(unsigned(i_i_i5_reg_1118) + unsigned(ap_const_lv9_1));
    i_11_fu_1438_p2 <= std_logic_vector(unsigned(i_i5_reg_790) + unsigned(ap_const_lv7_1));
    i_12_fu_1751_p2 <= std_logic_vector(unsigned(i_i7_reg_904) + unsigned(ap_const_lv3_1));
    i_13_fu_1670_p2 <= std_logic_vector(unsigned(i_i9_reg_893) + unsigned(ap_const_lv9_1));
    i_14_fu_1837_p2 <= std_logic_vector(unsigned(i_i_i1_reg_937) + unsigned(ap_const_lv9_1));
    i_15_fu_1976_p2 <= std_logic_vector(unsigned(i_i_i2_reg_971) + unsigned(ap_const_lv9_1));
    i_16_fu_2081_p2 <= std_logic_vector(unsigned(i_4_reg_995) + unsigned(ap_const_lv3_1));
    i_17_fu_2249_p2 <= std_logic_vector(unsigned(i_5_reg_1040) + unsigned(ap_const_lv3_1));
    i_18_fu_2318_p2 <= std_logic_vector(unsigned(i_i12_reg_1074) + unsigned(ap_const_lv9_1));
    i_19_fu_2399_p2 <= std_logic_vector(unsigned(i_i13_reg_1085) + unsigned(ap_const_lv3_1));
    i_87_fu_1320_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_695));
    i_88_fu_1353_p2 <= std_logic_vector(unsigned(i_i_reg_707) + unsigned(ap_const_lv6_1));
    i_89_fu_1378_p2 <= std_logic_vector(unsigned(i_i8_reg_719) + unsigned(ap_const_lv3_1));
    i_90_fu_1390_p2 <= std_logic_vector(unsigned(i_i3_reg_731) + unsigned(ap_const_lv3_1));
    i_91_fu_1402_p2 <= std_logic_vector(unsigned(i_i4_reg_743) + unsigned(ap_const_lv3_1));
    i_92_fu_1420_p2 <= std_logic_vector(unsigned(i_1_reg_767) + unsigned(ap_const_lv3_1));
    i_93_fu_1600_p2 <= std_logic_vector(unsigned(i_i6_reg_846) + unsigned(ap_const_lv3_1));
    i_94_fu_1612_p2 <= std_logic_vector(unsigned(i_2_reg_858) + unsigned(ap_const_lv3_1));
    i_95_fu_1658_p2 <= std_logic_vector(unsigned(i_3_reg_881) + unsigned(ap_const_lv3_1));
    i_96_fu_1813_p2 <= std_logic_vector(unsigned(i_i1_reg_926) + unsigned(ap_const_lv3_1));
    i_97_fu_1775_p2 <= std_logic_vector(unsigned(i_i_i_reg_915) + unsigned(ap_const_lv9_1));
    i_98_fu_1946_p2 <= std_logic_vector(unsigned(i_i2_reg_948) + unsigned(ap_const_lv3_1));
    i_99_fu_2174_p2 <= std_logic_vector(unsigned(i_i10_reg_1018) + unsigned(ap_const_lv3_1));

    inbuf_address0_assign_proc : process(ap_CS_fsm_state19, grp_keccak_absorb_1_fu_1278_m_address0, ap_CS_fsm_state20, ap_CS_fsm_state22, tmp_154_i_fu_1471_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inbuf_address0 <= tmp_154_i_fu_1471_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inbuf_address0 <= ap_const_lv64_50(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inbuf_address0 <= grp_keccak_absorb_1_fu_1278_m_address0;
        else 
            inbuf_address0 <= "XXXXXXX";
        end if; 
    end process;

    inbuf_address1 <= ap_const_lv64_51(7 - 1 downto 0);

    inbuf_ce0_assign_proc : process(ap_CS_fsm_state19, grp_keccak_absorb_1_fu_1278_m_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            inbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            inbuf_ce0 <= grp_keccak_absorb_1_fu_1278_m_ce0;
        else 
            inbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inbuf_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inbuf_ce1 <= ap_const_logic_1;
        else 
            inbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inbuf_d0_assign_proc : process(ap_CS_fsm_state19, seedbuf_q0, ap_CS_fsm_state20, tmp_669_fu_1455_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            inbuf_d0 <= seedbuf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            inbuf_d0 <= tmp_669_fu_1455_p1;
        else 
            inbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;

    inbuf_d1 <= nonce_assign_reg_779(15 downto 8);

    inbuf_we0_assign_proc : process(ap_CS_fsm_state19, tmp_i6_fu_1432_p2, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((tmp_i6_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            inbuf_we0 <= ap_const_logic_1;
        else 
            inbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    inbuf_we1_assign_proc : process(ap_CS_fsm_state19, tmp_i6_fu_1432_p2)
    begin
        if (((tmp_i6_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            inbuf_we1 <= ap_const_logic_1;
        else 
            inbuf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    inlen_assign_fu_1326_p2 <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_30));
    j_9_fu_2276_p2 <= std_logic_vector(unsigned(j_reg_1051) + unsigned(ap_const_lv9_1));
    j_cast8_cast_fu_2255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1051),12));
    m_address0 <= i_reg_695(6 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_address0_assign_proc : process(grp_expand_mat_fu_1148_mat_vec_coeffs_address0, grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_address0, ap_CS_fsm_state10, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            mat_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_vec_coeffs_address0 <= grp_expand_mat_fu_1148_mat_vec_coeffs_address0;
        else 
            mat_vec_coeffs_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    mat_vec_coeffs_ce0_assign_proc : process(grp_expand_mat_fu_1148_mat_vec_coeffs_ce0, grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_ce0, ap_CS_fsm_state10, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            mat_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1175_u_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_vec_coeffs_ce0 <= grp_expand_mat_fu_1148_mat_vec_coeffs_ce0;
        else 
            mat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_vec_coeffs_we0_assign_proc : process(grp_expand_mat_fu_1148_mat_vec_coeffs_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mat_vec_coeffs_we0 <= grp_expand_mat_fu_1148_mat_vec_coeffs_we0;
        else 
            mat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    nonce_1_fu_1408_p2 <= std_logic_vector(unsigned(nonce_reg_755) + unsigned(ap_const_lv16_4));

    outbuf_address0_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, grp_keccak_squeezeblocks_1_fu_1156_h_address0, grp_rej_gamma1m1_fu_1263_buf_r_address0, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            outbuf_address0 <= grp_rej_gamma1m1_fu_1263_buf_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            outbuf_address0 <= grp_keccak_squeezeblocks_1_fu_1156_h_address0;
        else 
            outbuf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    outbuf_ce0_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, grp_keccak_squeezeblocks_1_fu_1156_h_ce0, grp_rej_gamma1m1_fu_1263_buf_r_ce0, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            outbuf_ce0 <= grp_rej_gamma1m1_fu_1263_buf_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            outbuf_ce0 <= grp_keccak_squeezeblocks_1_fu_1156_h_ce0;
        else 
            outbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_ce1_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, grp_rej_gamma1m1_fu_1263_buf_r_ce1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            outbuf_ce1 <= grp_rej_gamma1m1_fu_1263_buf_r_ce1;
        else 
            outbuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outbuf_we0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_h_we0, ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            outbuf_we0 <= grp_keccak_squeezeblocks_1_fu_1156_h_we0;
        else 
            outbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_1_address0_assign_proc : process(ap_CS_fsm_state8, grp_keccak_squeezeblocks_2_fu_1167_h_address0, ap_CS_fsm_state7, tmp_i_fu_1342_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_assign_1_address0 <= tmp_i_fu_1342_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_assign_1_address0 <= grp_keccak_squeezeblocks_2_fu_1167_h_address0;
        else 
            output_assign_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    output_assign_1_ce0_assign_proc : process(ap_CS_fsm_state8, grp_keccak_squeezeblocks_2_fu_1167_h_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_assign_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_assign_1_ce0 <= grp_keccak_squeezeblocks_2_fu_1167_h_ce0;
        else 
            output_assign_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_1_we0_assign_proc : process(grp_keccak_squeezeblocks_2_fu_1167_h_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_assign_1_we0 <= grp_keccak_squeezeblocks_2_fu_1167_h_we0;
        else 
            output_assign_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_2055_p3 <= (tmp_62_fu_2045_p4 & tmp_61_fu_2039_p2);

    s1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, tmp_656_cast_fu_1690_p1, grp_unpack_sk_fu_1193_s1_vec_coeffs_address0, grp_ntt_1_fu_1239_p_address0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            s1_vec_coeffs_address0 <= tmp_656_cast_fu_1690_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s1_vec_coeffs_address0 <= grp_ntt_1_fu_1239_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_address0 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_address0;
        else 
            s1_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state55, grp_unpack_sk_fu_1193_s1_vec_coeffs_ce0, grp_ntt_1_fu_1239_p_ce0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            s1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s1_vec_coeffs_ce0 <= grp_ntt_1_fu_1239_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_ce0 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_ce0;
        else 
            s1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s1_vec_coeffs_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_ce1 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_ce1;
        else 
            s1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s1_vec_coeffs_d0, grp_ntt_1_fu_1239_p_d0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s1_vec_coeffs_d0 <= grp_ntt_1_fu_1239_p_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_d0 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_d0;
        else 
            s1_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s1_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s1_vec_coeffs_we0, grp_ntt_1_fu_1239_p_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s1_vec_coeffs_we0 <= grp_ntt_1_fu_1239_p_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_we0 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_we0;
        else 
            s1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s1_vec_coeffs_we1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s1_vec_coeffs_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s1_vec_coeffs_we1 <= grp_unpack_sk_fu_1193_s1_vec_coeffs_we1;
        else 
            s1_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state75, tmp_670_cast_fu_2113_p1, grp_unpack_sk_fu_1193_s2_vec_coeffs_address0, grp_ntt_fu_1229_p_address0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s2_vec_coeffs_address0 <= tmp_670_cast_fu_2113_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s2_vec_coeffs_address0 <= grp_ntt_fu_1229_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_address0 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_address0;
        else 
            s2_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state75, grp_unpack_sk_fu_1193_s2_vec_coeffs_ce0, grp_ntt_fu_1229_p_ce0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            s2_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s2_vec_coeffs_ce0 <= grp_ntt_fu_1229_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_ce0 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_ce0;
        else 
            s2_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s2_vec_coeffs_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_ce1 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_ce1;
        else 
            s2_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s2_vec_coeffs_d0, grp_ntt_fu_1229_p_d0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s2_vec_coeffs_d0 <= grp_ntt_fu_1229_p_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_d0 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_d0;
        else 
            s2_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s2_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s2_vec_coeffs_we0, grp_ntt_fu_1229_p_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s2_vec_coeffs_we0 <= grp_ntt_fu_1229_p_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_we0 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_we0;
        else 
            s2_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_vec_coeffs_we1_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_s2_vec_coeffs_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_vec_coeffs_we1 <= grp_unpack_sk_fu_1193_s2_vec_coeffs_we1;
        else 
            s2_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    s_address0_assign_proc : process(grp_keccak_absorb_fu_1138_s_address0, grp_keccak_squeezeblocks_2_fu_1167_s_address0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= grp_keccak_squeezeblocks_2_fu_1167_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= grp_keccak_absorb_fu_1138_s_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_address1_assign_proc : process(grp_keccak_absorb_fu_1138_s_address1, grp_keccak_squeezeblocks_2_fu_1167_s_address1, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address1 <= grp_keccak_squeezeblocks_2_fu_1167_s_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address1 <= grp_keccak_absorb_fu_1138_s_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(grp_keccak_absorb_fu_1138_s_ce0, grp_keccak_squeezeblocks_2_fu_1167_s_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_ce0 <= grp_keccak_squeezeblocks_2_fu_1167_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_ce0 <= grp_keccak_absorb_fu_1138_s_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_keccak_absorb_fu_1138_s_ce1, grp_keccak_squeezeblocks_2_fu_1167_s_ce1, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_ce1 <= grp_keccak_squeezeblocks_2_fu_1167_s_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_ce1 <= grp_keccak_absorb_fu_1138_s_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(grp_keccak_absorb_fu_1138_s_d0, grp_keccak_squeezeblocks_2_fu_1167_s_d0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= grp_keccak_squeezeblocks_2_fu_1167_s_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d0 <= grp_keccak_absorb_fu_1138_s_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(grp_keccak_absorb_fu_1138_s_d1, grp_keccak_squeezeblocks_2_fu_1167_s_d1, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d1 <= grp_keccak_squeezeblocks_2_fu_1167_s_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_d1 <= grp_keccak_absorb_fu_1138_s_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(grp_keccak_absorb_fu_1138_s_we0, grp_keccak_squeezeblocks_2_fu_1167_s_we0, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_we0 <= grp_keccak_squeezeblocks_2_fu_1167_s_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_we0 <= grp_keccak_absorb_fu_1138_s_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_keccak_absorb_fu_1138_s_we1, grp_keccak_squeezeblocks_2_fu_1167_s_we1, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_we1 <= grp_keccak_squeezeblocks_2_fu_1167_s_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_we1 <= grp_keccak_absorb_fu_1138_s_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, grp_challenge_fu_1129_mu_address0, grp_expand_mat_fu_1148_rho_address0, grp_unpack_sk_fu_1193_rho_address0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state49, sum_i_cast_fu_1367_p1, sum5_i_cast_fu_1450_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            seedbuf_address0 <= sum5_i_cast_fu_1450_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seedbuf_address0 <= sum_i_cast_fu_1367_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_address0 <= grp_unpack_sk_fu_1193_rho_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seedbuf_address0 <= grp_expand_mat_fu_1148_rho_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            seedbuf_address0 <= grp_challenge_fu_1129_mu_address0;
        else 
            seedbuf_address0 <= "XXXXXXX";
        end if; 
    end process;


    seedbuf_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state19, grp_challenge_fu_1129_mu_ce0, grp_expand_mat_fu_1148_rho_ce0, grp_unpack_sk_fu_1193_rho_ce0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            seedbuf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_ce0 <= grp_unpack_sk_fu_1193_rho_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seedbuf_ce0 <= grp_expand_mat_fu_1148_rho_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            seedbuf_ce0 <= grp_challenge_fu_1129_mu_ce0;
        else 
            seedbuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seedbuf_d0_assign_proc : process(ap_CS_fsm_state2, output_assign_1_q0, grp_unpack_sk_fu_1193_rho_d0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seedbuf_d0 <= output_assign_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_d0 <= grp_unpack_sk_fu_1193_rho_d0;
        else 
            seedbuf_d0 <= "XXXXXXXX";
        end if; 
    end process;


    seedbuf_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_rho_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seedbuf_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            seedbuf_we0 <= grp_unpack_sk_fu_1193_rho_we0;
        else 
            seedbuf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sk_address0 <= grp_unpack_sk_fu_1193_sk_address0;
    sk_address1 <= grp_unpack_sk_fu_1193_sk_address1;
    sk_ce0 <= grp_unpack_sk_fu_1193_sk_ce0;
    sk_ce1 <= grp_unpack_sk_fu_1193_sk_ce1;

    sm_address0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_fu_1138_m_address0, grp_pack_sig_fu_1184_sig_address0, grp_unpack_sk_fu_1193_tr_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state117, sum_cast_fu_1337_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_address0 <= sum_cast_fu_1337_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sm_address0 <= grp_unpack_sk_fu_1193_tr_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sm_address0 <= grp_pack_sig_fu_1184_sig_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_address0 <= grp_keccak_absorb_fu_1138_m_address0;
        else 
            sm_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    sm_ce0_assign_proc : process(ap_CS_fsm_state2, grp_keccak_absorb_fu_1138_m_ce0, grp_pack_sig_fu_1184_sig_ce0, grp_unpack_sk_fu_1193_tr_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sm_ce0 <= grp_unpack_sk_fu_1193_tr_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sm_ce0 <= grp_pack_sig_fu_1184_sig_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sm_ce0 <= grp_keccak_absorb_fu_1138_m_ce0;
        else 
            sm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sm_d0_assign_proc : process(m_q0, ap_CS_fsm_state2, grp_pack_sig_fu_1184_sig_d0, grp_unpack_sk_fu_1193_tr_d0, ap_CS_fsm_state4, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sm_d0 <= grp_unpack_sk_fu_1193_tr_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sm_d0 <= grp_pack_sig_fu_1184_sig_d0;
        else 
            sm_d0 <= "XXXXXXXX";
        end if; 
    end process;


    sm_we0_assign_proc : process(ap_CS_fsm_state2, grp_pack_sig_fu_1184_sig_we0, grp_unpack_sk_fu_1193_tr_we0, ap_CS_fsm_state4, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sm_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sm_we0 <= grp_unpack_sk_fu_1193_tr_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            sm_we0 <= grp_pack_sig_fu_1184_sig_we0;
        else 
            sm_we0 <= ap_const_logic_0;
        end if; 
    end process;

    smlen_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    smlen_ce0_assign_proc : process(ap_CS_fsm_state115, ap_block_state115_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then 
            smlen_ce0 <= ap_const_logic_1;
        else 
            smlen_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    smlen_d0 <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_A8D));

    smlen_we0_assign_proc : process(tmp_192_reg_2896, tmp_195_reg_3023, tmp_196_reg_3032, tmp_200_reg_3123, ap_CS_fsm_state115, ap_block_state115_on_subcall_done, tmp_202_fu_2508_p2)
    begin
        if (((tmp_200_reg_3123 = ap_const_lv1_1) and (tmp_196_reg_3032 = ap_const_lv1_1) and (tmp_195_reg_3023 = ap_const_lv1_1) and (tmp_192_reg_2896 = ap_const_lv1_1) and (tmp_202_fu_2508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state115) and (ap_const_boolean_0 = ap_block_state115_on_subcall_done))) then 
            smlen_we0 <= ap_const_logic_1;
        else 
            smlen_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_address0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_address0, grp_keccak_absorb_1_fu_1278_s_address0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_address0 <= grp_keccak_absorb_1_fu_1278_s_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_address0 <= grp_keccak_squeezeblocks_1_fu_1156_s_address0;
        else 
            state_address0 <= "XXXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_ce0, grp_keccak_absorb_1_fu_1278_s_ce0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_ce0 <= grp_keccak_absorb_1_fu_1278_s_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_ce0 <= grp_keccak_squeezeblocks_1_fu_1156_s_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_ce1, ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_ce1 <= grp_keccak_squeezeblocks_1_fu_1156_s_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_d0, grp_keccak_absorb_1_fu_1278_s_d0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_d0 <= grp_keccak_absorb_1_fu_1278_s_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_d0 <= grp_keccak_squeezeblocks_1_fu_1156_s_d0;
        else 
            state_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_we0, grp_keccak_absorb_1_fu_1278_s_we0, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            state_we0 <= grp_keccak_absorb_1_fu_1278_s_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_we0 <= grp_keccak_squeezeblocks_1_fu_1156_s_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(grp_keccak_squeezeblocks_1_fu_1156_s_we1, ap_CS_fsm_state24, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            state_we1 <= grp_keccak_squeezeblocks_1_fu_1156_s_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum5_i_cast_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_i_fu_1444_p2),64));
    sum5_i_fu_1444_p2 <= std_logic_vector(unsigned(i_i5_reg_790) + unsigned(ap_const_lv7_20));
    sum_cast_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1332_p2),64));
    sum_fu_1332_p2 <= std_logic_vector(unsigned(tmp_reg_2532) + unsigned(ap_const_lv13_A8D));
    sum_i_cast_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_1359_p3),64));
    sum_i_fu_1359_p3 <= (ap_const_lv1_1 & i_i_reg_707);

    t0_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state97, tmp_677_cast_fu_2338_p1, grp_unpack_sk_fu_1193_t0_vec_coeffs_address0, grp_ntt_fu_1229_p_address0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            t0_vec_coeffs_address0 <= tmp_677_cast_fu_2338_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t0_vec_coeffs_address0 <= grp_ntt_fu_1229_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_address0 <= grp_unpack_sk_fu_1193_t0_vec_coeffs_address0;
        else 
            t0_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state97, grp_unpack_sk_fu_1193_t0_vec_coeffs_ce0, grp_ntt_fu_1229_p_ce0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            t0_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t0_vec_coeffs_ce0 <= grp_ntt_fu_1229_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_ce0 <= grp_unpack_sk_fu_1193_t0_vec_coeffs_ce0;
        else 
            t0_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t0_vec_coeffs_d0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_t0_vec_coeffs_d0, grp_ntt_fu_1229_p_d0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t0_vec_coeffs_d0 <= grp_ntt_fu_1229_p_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_d0 <= grp_unpack_sk_fu_1193_t0_vec_coeffs_d0;
        else 
            t0_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    t0_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state2, grp_unpack_sk_fu_1193_t0_vec_coeffs_we0, grp_ntt_fu_1229_p_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t0_vec_coeffs_we0 <= grp_ntt_fu_1229_p_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t0_vec_coeffs_we0 <= grp_unpack_sk_fu_1193_t0_vec_coeffs_we0;
        else 
            t0_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_39_fu_1720_p1 <= t_39_fu_1720_p10(32 - 1 downto 0);
    t_39_fu_1720_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_2810),55));
    t_39_fu_1720_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_39_fu_1720_p1), 55));
    t_40_fu_1729_p2 <= std_logic_vector(unsigned(t_54_cast_fu_1726_p1) + unsigned(a_assign_reg_2800));
    t_41_fu_1857_p1 <= z_vec_coeffs_q0(23 - 1 downto 0);
    t_42_fu_1996_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(z_vec_coeffs_load_3_reg_2913));
    t_43_fu_2017_p2 <= (tmp_170_i_i_fu_2009_p3 xor t_42_fu_1996_p2);
    t_44_fu_2023_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF000) - unsigned(t_43_fu_2017_p2));
    t_45_fu_2135_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_686_reg_2972))), 32));
    t_46_fu_2143_p1 <= t_46_fu_2143_p10(32 - 1 downto 0);
    t_46_fu_2143_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_45_reg_2977),55));
    t_46_fu_2143_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_46_fu_2143_p1), 55));
    t_47_fu_2152_p2 <= std_logic_vector(unsigned(t_63_cast_fu_2149_p1) + unsigned(a_assign_5_reg_2967));
    t_48_fu_2360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_687_reg_3108))), 32));
    t_49_fu_2368_p1 <= t_49_fu_2368_p10(32 - 1 downto 0);
    t_49_fu_2368_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_48_reg_3113),55));
    t_49_fu_2368_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv55_7FE001) * unsigned(t_49_fu_2368_p1), 55));
    t_50_fu_2377_p2 <= std_logic_vector(unsigned(t_67_cast_fu_2374_p1) + unsigned(a_assign_6_reg_3103));
    t_54_cast_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_39_reg_2815),64));
    t_56_cast_fu_1861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_41_fu_1857_p1),24));
    t_63_cast_fu_2149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_46_reg_2982),64));
    t_67_cast_fu_2374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_49_reg_3118),64));
    t_fu_1712_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ap_const_lv32_FC7FDFFF) * signed(tmp_675_reg_2805))), 32));
    tmp1_fu_1905_p3 <= (ap_const_lv10_3FE & tmp_631_fu_1899_p2);
    tmp_154_i_fu_1471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i5_reg_790),64));
    tmp_156_i_cast_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_i_fu_1484_p2),10));
    tmp_156_i_fu_1484_p2 <= std_logic_vector(signed(ap_const_lv9_100) - signed(ctr4_reg_2633));
    tmp_157_i_i_fu_2219_p2 <= std_logic_vector(unsigned(w_vec_coeffs_q0) + unsigned(ap_const_lv32_FFC002));
    tmp_158_i_i_fu_2225_p2 <= std_logic_vector(unsigned(tmp_157_i_i_fu_2219_p2) - unsigned(wcs2_vec_coeffs_q0));
    tmp_168_i_i_fu_2501_p2 <= std_logic_vector(unsigned(ap_const_lv32_FFC002) - unsigned(ct0_vec_coeffs_q0));
    tmp_170_i_i_fu_2009_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_684_fu_2001_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_171_i_i_fu_2029_p2 <= "1" when (unsigned(t_44_fu_2023_p2) < unsigned(ap_const_lv32_7FCED)) else "0";
    tmp_172_fu_1426_p2 <= std_logic_vector(unsigned(nonce_assign_reg_779) + unsigned(ap_const_lv16_1));
    tmp_172_i_i1_fu_2444_p2 <= std_logic_vector(unsigned(wcs2_vec_coeffs_q0) + unsigned(ct0_vec_coeffs_q0));
    tmp_172_i_i_fu_1800_p2 <= std_logic_vector(unsigned(z_vec_coeffs_q0) + unsigned(extLd4_fu_1796_p1));
    tmp_174_fu_1494_p2 <= std_logic_vector(unsigned(tmp_173_reg_802) + unsigned(ap_const_lv8_1));
    tmp_175_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_reg_802),64));
    tmp_176_fu_1505_p2 <= "1" when (tmp_173_reg_802 = ap_const_lv8_FF) else "0";
    tmp_178_fu_1516_p2 <= std_logic_vector(unsigned(tmp_177_reg_813) + unsigned(ap_const_lv8_1));
    tmp_179_fu_1531_p2 <= "1" when (tmp_177_reg_813 = ap_const_lv8_FF) else "0";
    tmp_181_fu_1542_p2 <= std_logic_vector(unsigned(tmp_180_reg_824) + unsigned(ap_const_lv8_1));
    tmp_182_fu_1557_p2 <= "1" when (tmp_180_reg_824 = ap_const_lv8_FF) else "0";
    tmp_184_fu_1568_p2 <= std_logic_vector(unsigned(tmp_183_reg_835) + unsigned(ap_const_lv8_1));
    tmp_185_fu_1583_p2 <= "1" when (tmp_183_reg_835 = ap_const_lv8_FF) else "0";
    tmp_186_fu_1606_p2 <= "1" when (i_2_reg_858 = ap_const_lv3_5) else "0";
    tmp_188_fu_1618_p2 <= std_logic_vector(unsigned(tmp_187_reg_870) + unsigned(ap_const_lv8_1));
    tmp_189_fu_1624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_reg_870),64));
    tmp_190_fu_1629_p2 <= "1" when (tmp_187_reg_870 = ap_const_lv8_FF) else "0";
    tmp_191_fu_1652_p2 <= "1" when (i_3_reg_881 = ap_const_lv3_4) else "0";
    tmp_192_fu_1964_p2 <= "1" when (ret_i_reg_959 = ap_const_lv32_0) else "0";
    tmp_193_fu_2075_p2 <= "1" when (i_4_reg_995 = ap_const_lv3_5) else "0";
    tmp_196_fu_2243_p2 <= "1" when (i_5_reg_1040 = ap_const_lv3_5) else "0";
    tmp_197_fu_2300_p2 <= "1" when (i_6_reg_1062 = ap_const_lv3_5) else "0";
    tmp_198_fu_2270_p2 <= "1" when (j_reg_1051 = ap_const_lv9_100) else "0";
    tmp_201_fu_2282_p2 <= "1" when (tmp_vec_coeffs_q0 = w1_vec_coeffs_q0) else "0";
    tmp_202_fu_2508_p2 <= "1" when (unsigned(grp_polyveck_make_hint_fu_1256_ap_return) > unsigned(ap_const_lv32_60)) else "0";
        tmp_42_i_i_i_i_cast_fu_1895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_i_i_i_i_fu_1889_p2),32));

    tmp_42_i_i_i_i_fu_1889_p2 <= std_logic_vector(unsigned(t_56_cast_fu_1861_p1) - unsigned(a_assign_21_cast_fu_1875_p1));
    tmp_61_fu_2039_p2 <= (tmp_685_fu_2035_p1 or p_0_i_i_reg_982);
    tmp_620_fu_1522_p3 <= (ap_const_lv56_1 & tmp_177_reg_813);
    tmp_621_fu_1548_p3 <= (ap_const_lv56_2 & tmp_180_reg_824);
    tmp_622_fu_1574_p3 <= (ap_const_lv56_3 & tmp_183_reg_835);
    tmp_623_fu_1640_p3 <= (i_3_reg_881 & ap_const_lv8_0);
    tmp_624_fu_1757_p3 <= (i_i7_reg_904 & ap_const_lv8_0);
    tmp_625_fu_1685_p2 <= std_logic_vector(unsigned(tmp_i9_cast_fu_1681_p1) + unsigned(tmp_653_cast_reg_2759));
    tmp_626_fu_1819_p3 <= (i_i1_reg_926 & ap_const_lv8_0);
    tmp_627_fu_1785_p2 <= std_logic_vector(unsigned(tmp_655_cast_reg_2828) + unsigned(tmp_i_i2_cast_fu_1781_p1));
    tmp_628_fu_1952_p3 <= (i_i2_reg_948 & ap_const_lv8_0);
    tmp_629_fu_1847_p2 <= std_logic_vector(unsigned(tmp_i_i3_cast_fu_1843_p1) + unsigned(tmp_658_cast_reg_2859));
    tmp_62_fu_2045_p4 <= ret_i_reg_959(31 downto 1);
    tmp_630_fu_1865_p4 <= z_vec_coeffs_q0(31 downto 23);
    tmp_631_fu_1899_p2 <= (tmp_i_i_i_i_fu_1879_p4 or ap_const_lv22_1FFF);
    tmp_632_fu_2063_p3 <= (i_4_reg_995 & ap_const_lv8_0);
    tmp_633_fu_1986_p2 <= std_logic_vector(unsigned(tmp_661_cast_reg_2891) + unsigned(tmp_i_i4_cast_fu_1982_p1));
    tmp_634_fu_2180_p3 <= (i_i10_reg_1018 & ap_const_lv8_0);
    tmp_635_fu_2108_p2 <= std_logic_vector(unsigned(tmp_i3_cast_fu_2104_p1) + unsigned(tmp_666_cast_reg_2926));
    tmp_636_fu_2231_p3 <= (i_5_reg_1040 & ap_const_lv8_0);
    tmp_637_fu_2208_p2 <= std_logic_vector(unsigned(tmp_669_cast_reg_2995) + unsigned(tmp_i_i6_cast_fu_2204_p1));
    tmp_638_fu_2288_p3 <= (i_6_reg_1062 & ap_const_lv8_0);
    tmp_639_fu_2259_p2 <= std_logic_vector(unsigned(tmp_672_cast_reg_3027) + unsigned(j_cast8_cast_fu_2255_p1));
    tmp_640_fu_2333_p2 <= std_logic_vector(unsigned(tmp_i4_cast_fu_2329_p1) + unsigned(tmp_675_cast_reg_3062));
    tmp_641_fu_2405_p3 <= (i_i13_reg_1085 & ap_const_lv8_0);
    tmp_642_fu_2463_p3 <= (i_i14_reg_1107 & ap_const_lv8_0);
    tmp_643_fu_2433_p2 <= std_logic_vector(unsigned(tmp_679_cast_reg_3135) + unsigned(tmp_i_i8_cast_fu_2429_p1));
    tmp_644_fu_2491_p2 <= std_logic_vector(unsigned(tmp_681_cast_reg_3171) + unsigned(tmp_i_i9_cast_fu_2487_p1));
    tmp_653_cast_fu_1648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_623_fu_1640_p3),12));
    tmp_655_cast_fu_1765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_624_fu_1757_p3),12));
    tmp_656_cast_fu_1690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_625_fu_1685_p2),64));
    tmp_658_cast_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_626_fu_1819_p3),12));
    tmp_659_cast_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_627_fu_1785_p2),64));
    tmp_661_cast_fu_1960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_628_fu_1952_p3),12));
    tmp_662_cast_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_629_fu_1847_p2),64));
    tmp_666_cast_fu_2071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_632_fu_2063_p3),12));
    tmp_667_cast_fu_1991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_633_fu_1986_p2),64));
    tmp_669_cast_fu_2188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_634_fu_2180_p3),12));
    tmp_669_fu_1455_p1 <= nonce_assign_reg_779(8 - 1 downto 0);
    tmp_670_cast_fu_2113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_635_fu_2108_p2),64));
    tmp_672_cast_fu_2239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_636_fu_2231_p3),12));
    tmp_672_fu_1476_p3 <= grp_rej_gamma1m1_fu_1263_ap_return(8 downto 8);
    tmp_673_cast_fu_2213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_637_fu_2208_p2),64));
    tmp_675_cast_fu_2296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_638_fu_2288_p3),12));
    tmp_675_fu_1708_p1 <= a_assign_fu_1702_p2(32 - 1 downto 0);
    tmp_676_cast_fu_2264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_639_fu_2259_p2),64));
    tmp_677_cast_fu_2338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_640_fu_2333_p2),64));
    tmp_679_cast_fu_2413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_641_fu_2405_p3),12));
    tmp_681_cast_fu_2471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_642_fu_2463_p3),12));
    tmp_681_fu_1919_p3 <= a_assign_s_reg_2877(31 downto 31);
    tmp_682_cast_fu_2438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_643_fu_2433_p2),64));
    tmp_683_cast_fu_2496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_644_fu_2491_p2),64));
    tmp_684_fu_2001_p3 <= t_42_fu_1996_p2(31 downto 31);
    tmp_685_fu_2035_p1 <= ret_i_reg_959(1 - 1 downto 0);
    tmp_686_fu_2131_p1 <= a_assign_5_fu_2125_p2(32 - 1 downto 0);
    tmp_687_fu_2356_p1 <= a_assign_6_fu_2350_p2(32 - 1 downto 0);
    tmp_fu_1311_p1 <= i_reg_695(13 - 1 downto 0);
    tmp_i10_fu_2168_p2 <= "1" when (i_i10_reg_1018 = ap_const_lv3_5) else "0";
    tmp_i11_fu_2087_p2 <= "1" when (i_i11_reg_1007 = ap_const_lv9_100) else "0";
    tmp_i12_fu_2312_p2 <= "1" when (i_i12_reg_1074 = ap_const_lv9_100) else "0";
    tmp_i13_fu_2393_p2 <= "1" when (i_i13_reg_1085 = ap_const_lv3_5) else "0";
    tmp_i14_fu_2451_p2 <= "1" when (i_i14_reg_1107 = ap_const_lv3_5) else "0";
    tmp_i1_fu_1664_p2 <= "1" when (i_i9_reg_893 = ap_const_lv9_100) else "0";
    tmp_i2_fu_1807_p2 <= "1" when (i_i1_reg_926 = ap_const_lv3_4) else "0";
    tmp_i3_110_fu_2099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i11_reg_1007),64));
    tmp_i3_cast_fu_2104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i11_reg_1007),12));
    tmp_i3_fu_1940_p2 <= "1" when (i_i2_reg_948 = ap_const_lv3_4) else "0";
    tmp_i4_117_fu_2324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i12_reg_1074),64));
    tmp_i4_cast_fu_2329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i12_reg_1074),12));
    tmp_i4_fu_1384_p2 <= "1" when (i_i3_reg_731 = ap_const_lv3_5) else "0";
    tmp_i5_fu_1396_p2 <= "1" when (i_i4_reg_743 = ap_const_lv3_5) else "0";
    tmp_i6_fu_1432_p2 <= "1" when (i_i5_reg_790 = ap_const_lv7_50) else "0";
    tmp_i7_fu_1594_p2 <= "1" when (i_i6_reg_846 = ap_const_lv3_4) else "0";
    tmp_i8_fu_1745_p2 <= "1" when (i_i7_reg_904 = ap_const_lv3_4) else "0";
    tmp_i9_101_fu_1676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i9_reg_893),64));
    tmp_i9_cast_fu_1681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i9_reg_893),12));
    tmp_i9_fu_1372_p2 <= "1" when (i_i8_reg_719 = ap_const_lv3_4) else "0";
    tmp_i_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_707),64));
    tmp_i_i2_cast_fu_1781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_915),12));
    tmp_i_i2_fu_1769_p2 <= "1" when (i_i_i_reg_915 = ap_const_lv9_100) else "0";
    tmp_i_i3_cast_fu_1843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i1_reg_937),12));
    tmp_i_i3_fu_1831_p2 <= "1" when (i_i_i1_reg_937 = ap_const_lv9_100) else "0";
    tmp_i_i4_cast_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i2_reg_971),12));
    tmp_i_i4_fu_1970_p2 <= "1" when (i_i_i2_reg_971 = ap_const_lv9_100) else "0";
    tmp_i_i6_cast_fu_2204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i3_reg_1029),12));
    tmp_i_i6_fu_2192_p2 <= "1" when (i_i_i3_reg_1029 = ap_const_lv9_100) else "0";
    tmp_i_i8_cast_fu_2429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i4_reg_1096),12));
    tmp_i_i8_fu_2417_p2 <= "1" when (i_i_i4_reg_1096 = ap_const_lv9_100) else "0";
    tmp_i_i9_cast_fu_2487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i5_reg_1118),12));
    tmp_i_i9_fu_2475_p2 <= "1" when (i_i_i5_reg_1118 = ap_const_lv9_100) else "0";
    tmp_i_i_i_cast_cast_fu_1926_p3 <= 
        ap_const_lv32_7FE001 when (tmp_681_fu_1919_p3(0) = '1') else 
        ap_const_lv32_0;
    tmp_i_i_i_i_fu_1879_p4 <= z_vec_coeffs_q0(31 downto 10);
    tmp_s_fu_1414_p2 <= "1" when (i_1_reg_767 = ap_const_lv3_4) else "0";

    tmp_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state94, tmp_682_cast_reg_3148, grp_polyveck_make_hint_fu_1256_u_vec_coeffs_address0, grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state109, ap_CS_fsm_state47, ap_CS_fsm_state88, ap_CS_fsm_state113, tmp_676_cast_fu_2264_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            tmp_vec_coeffs_address0 <= tmp_682_cast_reg_3148(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            tmp_vec_coeffs_address0 <= tmp_676_cast_fu_2264_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            tmp_vec_coeffs_address0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            tmp_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            tmp_vec_coeffs_address0 <= grp_polyveck_make_hint_fu_1256_u_vec_coeffs_address0;
        else 
            tmp_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    tmp_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state94, grp_polyveck_make_hint_fu_1256_u_vec_coeffs_ce0, grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0, ap_CS_fsm_state115, ap_predicate_op705_call_state115, ap_CS_fsm_state109, ap_CS_fsm_state47, ap_CS_fsm_state88, ap_CS_fsm_state113)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            tmp_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            tmp_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            tmp_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state115) and (ap_predicate_op705_call_state115 = ap_const_boolean_1))) then 
            tmp_vec_coeffs_ce0 <= grp_polyveck_make_hint_fu_1256_u_vec_coeffs_ce0;
        else 
            tmp_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_vec_coeffs_d0_assign_proc : process(grp_polyveck_decompose_fu_1284_v1_vec_coeffs_d0, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0, ap_CS_fsm_state109, ap_CS_fsm_state47, ap_CS_fsm_state88, ap_CS_fsm_state113, tmp_172_i_i1_fu_2444_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            tmp_vec_coeffs_d0 <= tmp_172_i_i1_fu_2444_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            tmp_vec_coeffs_d0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            tmp_vec_coeffs_d0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_vec_coeffs_d0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_d0;
        else 
            tmp_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_vec_coeffs_we0_assign_proc : process(grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0, ap_CS_fsm_state109, ap_CS_fsm_state47, ap_CS_fsm_state88, ap_CS_fsm_state113)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            tmp_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            tmp_vec_coeffs_we0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            tmp_vec_coeffs_we0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_vec_coeffs_we0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0;
        else 
            tmp_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state94, grp_challenge_fu_1129_w1_vec_coeffs_address0, grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0, ap_CS_fsm_state49, ap_CS_fsm_state47, tmp_676_cast_fu_2264_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            w1_vec_coeffs_address0 <= tmp_676_cast_fu_2264_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w1_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            w1_vec_coeffs_address0 <= grp_challenge_fu_1129_w1_vec_coeffs_address0;
        else 
            w1_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    w1_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state94, grp_challenge_fu_1129_w1_vec_coeffs_ce0, grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0, ap_CS_fsm_state49, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            w1_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w1_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            w1_vec_coeffs_ce0 <= grp_challenge_fu_1129_w1_vec_coeffs_ce0;
        else 
            w1_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_ce1_assign_proc : process(grp_challenge_fu_1129_w1_vec_coeffs_ce1, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            w1_vec_coeffs_ce1 <= grp_challenge_fu_1129_w1_vec_coeffs_ce1;
        else 
            w1_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w1_vec_coeffs_we0_assign_proc : process(grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w1_vec_coeffs_we0 <= grp_polyveck_decompose_fu_1284_v1_vec_coeffs_we0;
        else 
            w1_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state83, grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address0, grp_invntt_frominvmont_1_fu_1209_p_address0, grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0, ap_CS_fsm_state44, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state45, tmp_673_cast_fu_2213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            w_vec_coeffs_address0 <= tmp_673_cast_fu_2213_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            w_vec_coeffs_address0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_address0 <= grp_invntt_frominvmont_1_fu_1209_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address0;
        else 
            w_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    w_vec_coeffs_address1_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address1, grp_invntt_frominvmont_1_fu_1209_p_address1, ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_address1 <= grp_invntt_frominvmont_1_fu_1209_p_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_address1 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_address1;
        else 
            w_vec_coeffs_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    w_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state83, grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce0, grp_invntt_frominvmont_1_fu_1209_p_ce0, grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0, ap_CS_fsm_state44, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            w_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            w_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            w_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_ce0 <= grp_invntt_frominvmont_1_fu_1209_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce0;
        else 
            w_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_vec_coeffs_ce1_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce1, grp_invntt_frominvmont_1_fu_1209_p_ce1, ap_CS_fsm_state44, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_ce1 <= grp_invntt_frominvmont_1_fu_1209_p_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_ce1 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_ce1;
        else 
            w_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_vec_coeffs_d0_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d0, grp_invntt_frominvmont_1_fu_1209_p_d0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0, ap_CS_fsm_state44, ap_CS_fsm_state42, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            w_vec_coeffs_d0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_d0 <= grp_invntt_frominvmont_1_fu_1209_p_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_d0 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_d0;
        else 
            w_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_vec_coeffs_we0_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we0, grp_invntt_frominvmont_1_fu_1209_p_we0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0, ap_CS_fsm_state44, ap_CS_fsm_state42, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            w_vec_coeffs_we0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            w_vec_coeffs_we0 <= grp_invntt_frominvmont_1_fu_1209_p_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_we0 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we0;
        else 
            w_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_vec_coeffs_we1_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we1, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            w_vec_coeffs_we1 <= grp_polyvecl_pointwise_a_fu_1175_w_coeffs_we1;
        else 
            w_vec_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;


    wcs20_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state92, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0, grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            wcs20_vec_coeffs_address0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            wcs20_vec_coeffs_address0 <= grp_polyveck_chknorm_fu_1291_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs20_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_address0;
        else 
            wcs20_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    wcs20_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state92, grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0, grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            wcs20_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            wcs20_vec_coeffs_ce0 <= grp_polyveck_chknorm_fu_1291_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs20_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_ce0;
        else 
            wcs20_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wcs20_vec_coeffs_d0_assign_proc : process(grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            wcs20_vec_coeffs_d0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs20_vec_coeffs_d0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_d0;
        else 
            wcs20_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wcs20_vec_coeffs_we0_assign_proc : process(grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            wcs20_vec_coeffs_we0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs20_vec_coeffs_we0 <= grp_polyveck_decompose_fu_1284_v0_vec_coeffs_we0;
        else 
            wcs20_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wcs2_vec_coeffs_address0_assign_proc : process(tmp_670_cast_reg_2947, ap_CS_fsm_state83, wcs2_vec_coeffs_addr_1_reg_3013, ap_CS_fsm_state108, tmp_682_cast_fu_2438_p1, grp_invntt_frominvmont_1_fu_1209_p_address0, grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0, ap_CS_fsm_state81, ap_CS_fsm_state80, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state86, tmp_673_cast_fu_2213_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            wcs2_vec_coeffs_address0 <= tmp_682_cast_fu_2438_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            wcs2_vec_coeffs_address0 <= wcs2_vec_coeffs_addr_1_reg_3013;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            wcs2_vec_coeffs_address0 <= tmp_673_cast_fu_2213_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            wcs2_vec_coeffs_address0 <= tmp_670_cast_reg_2947(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            wcs2_vec_coeffs_address0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs2_vec_coeffs_address0 <= grp_polyveck_decompose_fu_1284_v_vec_coeffs_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wcs2_vec_coeffs_address0 <= grp_invntt_frominvmont_1_fu_1209_p_address0;
        else 
            wcs2_vec_coeffs_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    wcs2_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state108, grp_invntt_frominvmont_1_fu_1209_p_ce0, grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0, ap_CS_fsm_state81, ap_CS_fsm_state80, ap_CS_fsm_state85, ap_CS_fsm_state88, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            wcs2_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            wcs2_vec_coeffs_ce0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            wcs2_vec_coeffs_ce0 <= grp_polyveck_decompose_fu_1284_v_vec_coeffs_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wcs2_vec_coeffs_ce0 <= grp_invntt_frominvmont_1_fu_1209_p_ce0;
        else 
            wcs2_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wcs2_vec_coeffs_ce1_assign_proc : process(grp_invntt_frominvmont_1_fu_1209_p_ce1, ap_CS_fsm_state81)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wcs2_vec_coeffs_ce1 <= grp_invntt_frominvmont_1_fu_1209_p_ce1;
        else 
            wcs2_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wcs2_vec_coeffs_d0_assign_proc : process(tmp_158_i_i_reg_3018, grp_invntt_frominvmont_1_fu_1209_p_d0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0, ap_CS_fsm_state81, ap_CS_fsm_state80, ap_CS_fsm_state85, ap_CS_fsm_state86, t_47_fu_2152_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            wcs2_vec_coeffs_d0 <= tmp_158_i_i_reg_3018;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            wcs2_vec_coeffs_d0 <= t_47_fu_2152_p2(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            wcs2_vec_coeffs_d0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wcs2_vec_coeffs_d0 <= grp_invntt_frominvmont_1_fu_1209_p_d0;
        else 
            wcs2_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wcs2_vec_coeffs_we0_assign_proc : process(grp_invntt_frominvmont_1_fu_1209_p_we0, grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0, ap_CS_fsm_state81, ap_CS_fsm_state80, ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            wcs2_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            wcs2_vec_coeffs_we0 <= grp_polyveck_freeze_fu_1296_v_vec_coeffs_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            wcs2_vec_coeffs_we0 <= grp_invntt_frominvmont_1_fu_1209_p_we0;
        else 
            wcs2_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_vec_coeffs_address0_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, ap_CS_fsm_state31, tmp_175_fu_1500_p1, ap_CS_fsm_state33, tmp_620_fu_1522_p3, ap_CS_fsm_state35, tmp_621_fu_1548_p3, ap_CS_fsm_state37, tmp_622_fu_1574_p3, ap_CS_fsm_state63, grp_rej_gamma1m1_fu_1263_a_address0, ap_CS_fsm_state30, tmp_659_cast_fu_1790_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            y_vec_coeffs_address0 <= tmp_659_cast_fu_1790_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            y_vec_coeffs_address0 <= tmp_622_fu_1574_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            y_vec_coeffs_address0 <= tmp_621_fu_1548_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            y_vec_coeffs_address0 <= tmp_620_fu_1522_p3(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            y_vec_coeffs_address0 <= tmp_175_fu_1500_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            y_vec_coeffs_address0 <= grp_rej_gamma1m1_fu_1263_a_address0;
        else 
            y_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    y_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state35, ap_CS_fsm_state37, ap_CS_fsm_state63, grp_rej_gamma1m1_fu_1263_a_ce0, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            y_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            y_vec_coeffs_ce0 <= grp_rej_gamma1m1_fu_1263_a_ce0;
        else 
            y_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_vec_coeffs_we0_assign_proc : process(ap_CS_fsm_state26, tmp_672_reg_2639, grp_rej_gamma1m1_fu_1263_a_we0, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((tmp_672_reg_2639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            y_vec_coeffs_we0 <= grp_rej_gamma1m1_fu_1263_a_we0;
        else 
            y_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    yhat_vec_coeffs_address0_assign_proc : process(tmp_175_reg_2653, tmp_620_reg_2672, tmp_621_reg_2691, tmp_622_reg_2710, grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_address0, grp_ntt_1_fu_1239_p_address0, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            yhat_vec_coeffs_address0 <= tmp_622_reg_2710(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            yhat_vec_coeffs_address0 <= tmp_621_reg_2691(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            yhat_vec_coeffs_address0 <= tmp_620_reg_2672(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            yhat_vec_coeffs_address0 <= tmp_175_reg_2653(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            yhat_vec_coeffs_address0 <= grp_ntt_1_fu_1239_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            yhat_vec_coeffs_address0 <= grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_address0;
        else 
            yhat_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    yhat_vec_coeffs_ce0_assign_proc : process(grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_ce0, grp_ntt_1_fu_1239_p_ce0, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            yhat_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            yhat_vec_coeffs_ce0 <= grp_ntt_1_fu_1239_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            yhat_vec_coeffs_ce0 <= grp_polyvecl_pointwise_a_fu_1175_v_vec_coeffs_ce0;
        else 
            yhat_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    yhat_vec_coeffs_d0_assign_proc : process(grp_ntt_1_fu_1239_p_d0, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40, extLd7_fu_1511_p1, extLd1_fu_1537_p1, extLd2_fu_1563_p1, extLd3_fu_1589_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            yhat_vec_coeffs_d0 <= extLd3_fu_1589_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            yhat_vec_coeffs_d0 <= extLd2_fu_1563_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            yhat_vec_coeffs_d0 <= extLd1_fu_1537_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            yhat_vec_coeffs_d0 <= extLd7_fu_1511_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            yhat_vec_coeffs_d0 <= grp_ntt_1_fu_1239_p_d0;
        else 
            yhat_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    yhat_vec_coeffs_we0_assign_proc : process(grp_ntt_1_fu_1239_p_we0, ap_CS_fsm_state32, ap_CS_fsm_state34, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            yhat_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            yhat_vec_coeffs_we0 <= grp_ntt_1_fu_1239_p_we0;
        else 
            yhat_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_address0_assign_proc : process(tmp_656_cast_reg_2780, ap_CS_fsm_state63, z_vec_coeffs_addr_2_reg_2846, ap_CS_fsm_state66, z_vec_coeffs_addr_3_reg_2872, ap_CS_fsm_state70, grp_pack_sig_fu_1184_z_vec_coeffs_address0, grp_invntt_frominvmont_fu_1220_p_address0, ap_CS_fsm_state61, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_CS_fsm_state117, tmp_659_cast_fu_1790_p1, tmp_662_cast_fu_1852_p1, tmp_667_cast_fu_1991_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            z_vec_coeffs_address0 <= tmp_667_cast_fu_1991_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_3_reg_2872;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            z_vec_coeffs_address0 <= tmp_662_cast_fu_1852_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            z_vec_coeffs_address0 <= z_vec_coeffs_addr_2_reg_2846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            z_vec_coeffs_address0 <= tmp_659_cast_fu_1790_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            z_vec_coeffs_address0 <= tmp_656_cast_reg_2780(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            z_vec_coeffs_address0 <= grp_invntt_frominvmont_fu_1220_p_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            z_vec_coeffs_address0 <= grp_pack_sig_fu_1184_z_vec_coeffs_address0;
        else 
            z_vec_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_ce0_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state66, ap_CS_fsm_state70, grp_pack_sig_fu_1184_z_vec_coeffs_ce0, grp_invntt_frominvmont_fu_1220_p_ce0, ap_CS_fsm_state61, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state68, ap_CS_fsm_state117)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            z_vec_coeffs_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            z_vec_coeffs_ce0 <= grp_invntt_frominvmont_fu_1220_p_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            z_vec_coeffs_ce0 <= grp_pack_sig_fu_1184_z_vec_coeffs_ce0;
        else 
            z_vec_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_ce1_assign_proc : process(grp_invntt_frominvmont_fu_1220_p_ce1, ap_CS_fsm_state61)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            z_vec_coeffs_ce1 <= grp_invntt_frominvmont_fu_1220_p_ce1;
        else 
            z_vec_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    z_vec_coeffs_d0_assign_proc : process(grp_invntt_frominvmont_fu_1220_p_d0, ap_CS_fsm_state61, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state68, tmp_172_i_i_fu_1800_p2, a_assign_4_fu_1934_p2, t_40_fu_1729_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            z_vec_coeffs_d0 <= a_assign_4_fu_1934_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            z_vec_coeffs_d0 <= tmp_172_i_i_fu_1800_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            z_vec_coeffs_d0 <= t_40_fu_1729_p2(63 downto 32);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            z_vec_coeffs_d0 <= grp_invntt_frominvmont_fu_1220_p_d0;
        else 
            z_vec_coeffs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    z_vec_coeffs_we0_assign_proc : process(grp_invntt_frominvmont_fu_1220_p_we0, ap_CS_fsm_state61, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            z_vec_coeffs_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            z_vec_coeffs_we0 <= grp_invntt_frominvmont_fu_1220_p_we0;
        else 
            z_vec_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;

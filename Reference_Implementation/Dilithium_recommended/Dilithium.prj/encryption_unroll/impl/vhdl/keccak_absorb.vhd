-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_A5D : STD_LOGIC_VECTOR (11 downto 0) := "101001011101";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv32_FFFFFF78 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101111000";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_57_fu_320_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_644_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_645_fu_334_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_645_reg_649 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_9_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_reg_661 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_368_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_reg_666 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_fu_373_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_reg_671 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_60_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_60_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_5_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mlen_assign_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_306_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_ap_done : STD_LOGIC;
    signal indvars_iv_next_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_59_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_128_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_reg_717 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_130_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_130_reg_725 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_4_reg_735 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_61_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_61_reg_743 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_135_fu_552_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_135_reg_748 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond8_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_10_fu_566_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_i3_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_6_reg_766 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_2_fu_617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_KeccakF1600_StatePer_fu_306_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_306_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_306_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_306_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_306_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_58_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_01_rec_reg_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_reg_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_125_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i_reg_236 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_259 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_4_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_i1_reg_282 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i2_reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_306_ap_start_reg : STD_LOGIC := '0';
    signal tmp_124_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i5_cast_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_fu_623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_fu_356_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_207_cast_fu_364_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_cast_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_395_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_cast_fu_401_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_i_fu_405_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_646_fu_424_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_224_i_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_223_i_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_225_i_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_226_i_fu_440_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_208_cast_fu_492_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_cast_fu_514_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum2_fu_518_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i4_cast_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i5_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_647_fu_595_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_224_i9_fu_599_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_223_i8_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_225_i2_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_226_i2_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0);

    grp_KeccakF1600_StatePer_fu_306 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_306_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_306_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_306_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_306_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_fu_306_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_fu_306_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_fu_306_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_fu_306_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_fu_306_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_fu_306_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_fu_306_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_fu_306_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_306_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond7_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_306_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_306_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_125_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_212 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_reg_212 <= i_9_reg_661;
            end if; 
        end if;
    end process;

    i_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_125_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_248 <= ap_const_lv8_0;
            elsif (((exitcond_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_reg_248 <= i_59_fu_477_p2;
            end if; 
        end if;
    end process;

    i_3_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_3_reg_259 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_3_reg_259 <= tmp_130_reg_725;
            end if; 
        end if;
    end process;

    i_4_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_4_reg_270 <= i_61_reg_743;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_4_reg_270 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_58_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_58_reg_180 <= tmp_644_fu_331_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_306_ap_done = ap_const_logic_1))) then 
                i_58_reg_180 <= indvars_iv_next_fu_465_p2;
            end if; 
        end if;
    end process;

    i_i1_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_i1_reg_282 <= i_10_reg_756;
            elsif (((exitcond8_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_i1_reg_282 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_i_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_i_reg_224 <= i_60_reg_679;
            elsif (((exitcond7_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_i_reg_224 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_169 <= i_57_fu_320_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_01_rec_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_01_rec_reg_190 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_306_ap_done = ap_const_logic_1))) then 
                p_01_rec_reg_190 <= p_rec_reg_671;
            end if; 
        end if;
    end process;

    p_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_202 <= mlen;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_306_ap_done = ap_const_logic_1))) then 
                p_0_reg_202 <= mlen_assign_fu_459_p2;
            end if; 
        end if;
    end process;

    r_i2_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                r_i2_reg_294 <= r_2_fu_617_p2;
            elsif (((exitcond8_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                r_i2_reg_294 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    r_i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                r_i_reg_236 <= r_fu_446_p2;
            elsif (((exitcond7_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                r_i_reg_236 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_10_reg_756 <= i_10_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_60_reg_679 <= i_60_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_61_reg_743 <= i_61_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_9_reg_661 <= i_9_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                p_rec_reg_671 <= p_rec_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                s_addr_5_reg_689 <= tmp_133_fu_415_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i3_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                s_addr_6_reg_766 <= tmp_136_fu_586_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp1_reg_666 <= tmp1_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_128_reg_717(7 downto 0) <= tmp_128_fu_488_p1(7 downto 0);
                tmp_130_reg_725 <= tmp_130_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    tmp_135_reg_748(7 downto 3) <= tmp_135_fu_552_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_645_reg_649 <= tmp_645_fu_334_p1;
            end if;
        end if;
    end process;
    tmp_128_reg_717(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_135_reg_748(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_314_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_344_p2, ap_CS_fsm_state5, tmp_i_fu_379_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_306_ap_done, ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_129_fu_496_p2, ap_CS_fsm_state14, exitcond8_fu_540_p2, ap_CS_fsm_state15, tmp_i3_fu_560_p2, tmp_125_fu_338_p2, exitcond_fu_471_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_125_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond7_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_i_fu_379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_fu_306_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((tmp_129_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((exitcond8_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((tmp_i3_fu_560_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, exitcond8_fu_540_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond8_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond8_fu_540_p2)
    begin
        if (((exitcond8_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond7_fu_344_p2 <= "1" when (i_1_reg_212 = ap_const_lv5_11) else "0";
    exitcond8_fu_540_p2 <= "1" when (i_4_reg_270 = ap_const_lv5_11) else "0";
    exitcond_fu_471_p2 <= "1" when (i_2_reg_248 = ap_const_lv8_88) else "0";
    grp_KeccakF1600_StatePer_fu_306_ap_start <= grp_KeccakF1600_StatePer_fu_306_ap_start_reg;
    i_10_fu_566_p2 <= std_logic_vector(unsigned(i_i1_reg_282) + unsigned(ap_const_lv4_1));
    i_57_fu_320_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv5_1));
    i_59_fu_477_p2 <= std_logic_vector(unsigned(i_2_reg_248) + unsigned(ap_const_lv8_1));
    i_60_fu_385_p2 <= std_logic_vector(unsigned(i_i_reg_224) + unsigned(ap_const_lv4_1));
    i_61_fu_546_p2 <= std_logic_vector(unsigned(i_4_reg_270) + unsigned(ap_const_lv5_1));
    i_9_fu_350_p2 <= std_logic_vector(unsigned(i_1_reg_212) + unsigned(ap_const_lv5_1));
    indvars_iv_next_fu_465_p2 <= std_logic_vector(unsigned(i_58_reg_180) + unsigned(ap_const_lv32_FFFFFF78));

    m_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, sum_i_cast_fu_410_p1, sum2_cast_fu_523_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_address0 <= sum2_cast_fu_523_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address0 <= sum_i_cast_fu_410_p1(12 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_assign_fu_459_p2 <= std_logic_vector(unsigned(p_0_reg_202) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    p_rec_fu_373_p2 <= std_logic_vector(unsigned(p_01_rec_reg_190) + unsigned(ap_const_lv64_88));
    r_2_fu_617_p2 <= (tmp_226_i2_fu_611_p2 or r_i2_reg_294);
    r_fu_446_p2 <= (tmp_226_i_fu_440_p2 or r_i_reg_236);

    s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, s_addr_5_reg_689, ap_CS_fsm_state8, ap_CS_fsm_state15, s_addr_6_reg_766, grp_KeccakF1600_StatePer_fu_306_state_address0, ap_CS_fsm_state7, ap_CS_fsm_state17, tmp_124_fu_326_p1, tmp_133_fu_415_p1, tmp_136_fu_586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            s_address0 <= s_addr_6_reg_766;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            s_address0 <= tmp_136_fu_586_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_5_reg_689;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= tmp_133_fu_415_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= tmp_124_fu_326_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= grp_KeccakF1600_StatePer_fu_306_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_fu_306_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state15, grp_KeccakF1600_StatePer_fu_306_state_ce0, ap_CS_fsm_state7, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce0 <= grp_KeccakF1600_StatePer_fu_306_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_306_state_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_ce1 <= grp_KeccakF1600_StatePer_fu_306_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_306_state_d0, ap_CS_fsm_state7, ap_CS_fsm_state17, tmp_134_fu_452_p2, tmp_137_fu_623_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            s_d0 <= tmp_137_fu_623_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= tmp_134_fu_452_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= grp_KeccakF1600_StatePer_fu_306_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_fu_306_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_314_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_306_state_we0, ap_CS_fsm_state7, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((tmp_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we0 <= grp_KeccakF1600_StatePer_fu_306_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(ap_CS_fsm_state8, grp_KeccakF1600_StatePer_fu_306_state_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_we1 <= grp_KeccakF1600_StatePer_fu_306_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_518_p2),64));
    sum2_fu_518_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_514_p1) + unsigned(tmp_645_reg_649));
    sum_i5_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i5_fu_576_p2),64));
    sum_i5_fu_576_p2 <= std_logic_vector(unsigned(tmp_135_reg_748) + unsigned(tmp_i4_cast_fu_572_p1));
    sum_i_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_405_p2),64));
    sum_i_fu_405_p2 <= std_logic_vector(unsigned(tmp1_reg_666) + unsigned(tmp2_cast_fu_401_p1));
    t_addr_4_reg_735 <= ap_const_lv64_87(8 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state9, tmp_128_reg_717, ap_CS_fsm_state10, t_addr_4_reg_735, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state13, tmp_126_fu_483_p1, tmp_131_fu_528_p1, sum_i5_cast_fu_581_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= sum_i5_cast_fu_581_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address0 <= t_addr_4_reg_735;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address0 <= tmp_128_reg_717(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_address0 <= tmp_131_fu_528_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_address0 <= tmp_126_fu_483_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, tmp_132_fu_533_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_d0 <= tmp_132_fu_533_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            t_d0 <= ap_const_lv8_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, tmp_129_fu_496_p2, exitcond_fu_471_p2, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((tmp_129_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((exitcond_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_368_p2 <= std_logic_vector(unsigned(tmp_207_cast_fu_364_p1) + unsigned(tmp_645_reg_649));
    tmp2_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_395_p2),13));
    tmp2_fu_395_p2 <= std_logic_vector(signed(ap_const_lv12_A5D) + signed(tmp_i_cast_fu_391_p1));
    tmp3_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_508_p2),13));
    tmp3_fu_508_p2 <= std_logic_vector(unsigned(tmp_208_cast_fu_492_p1) + unsigned(ap_const_lv12_A5D));
    tmp_124_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_169),64));
    tmp_125_fu_338_p2 <= "1" when (unsigned(p_0_reg_202) < unsigned(ap_const_lv64_88)) else "0";
    tmp_126_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_248),64));
    tmp_127_fu_356_p3 <= (i_1_reg_212 & ap_const_lv3_0);
    tmp_128_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_259),64));
    tmp_129_fu_496_p2 <= "1" when (unsigned(tmp_128_fu_488_p1) < unsigned(p_0_reg_202)) else "0";
    tmp_130_fu_502_p2 <= std_logic_vector(unsigned(i_3_reg_259) + unsigned(ap_const_lv8_1));
    tmp_131_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_58_reg_180),64));
    tmp_132_fu_533_p2 <= (t_q0 or ap_const_lv8_80);
    tmp_133_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_212),64));
    tmp_134_fu_452_p2 <= (s_q0 xor r_i_reg_236);
    tmp_135_fu_552_p3 <= (i_4_reg_270 & ap_const_lv3_0);
    tmp_136_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_270),64));
    tmp_137_fu_623_p2 <= (s_q0 xor r_i2_reg_294);
    tmp_207_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_356_p3),13));
    tmp_208_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_259),12));
    tmp_223_i8_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q0),64));
    tmp_223_i_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_q0),64));
    tmp_224_i9_fu_599_p3 <= (tmp_647_fu_595_p1 & ap_const_lv3_0);
    tmp_224_i_fu_428_p3 <= (tmp_646_fu_424_p1 & ap_const_lv3_0);
    tmp_225_i2_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_224_i9_fu_599_p3),64));
    tmp_225_i_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_224_i_fu_428_p3),64));
    tmp_226_i2_fu_611_p2 <= std_logic_vector(shift_left(unsigned(tmp_223_i8_fu_591_p1),to_integer(unsigned('0' & tmp_225_i2_fu_607_p1(31-1 downto 0)))));
    tmp_226_i_fu_440_p2 <= std_logic_vector(shift_left(unsigned(tmp_223_i_fu_420_p1),to_integer(unsigned('0' & tmp_225_i_fu_436_p1(31-1 downto 0)))));
    tmp_644_fu_331_p1 <= mlen(32 - 1 downto 0);
    tmp_645_fu_334_p1 <= p_01_rec_reg_190(13 - 1 downto 0);
    tmp_646_fu_424_p1 <= i_i_reg_224(3 - 1 downto 0);
    tmp_647_fu_595_p1 <= i_i1_reg_282(3 - 1 downto 0);
    tmp_fu_314_p2 <= "1" when (i_reg_169 = ap_const_lv5_19) else "0";
    tmp_i3_fu_560_p2 <= "1" when (i_i1_reg_282 = ap_const_lv4_8) else "0";
    tmp_i4_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_282),8));
    tmp_i_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_224),12));
    tmp_i_fu_379_p2 <= "1" when (i_i_reg_224 = ap_const_lv4_8) else "0";
end behav;
